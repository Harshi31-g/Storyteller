"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remotion";
exports.ids = ["vendor-chunks/remotion"];
exports.modules = {

/***/ "(ssr)/./node_modules/remotion/dist/esm/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/remotion/dist/esm/index.mjs ***!
  \**************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbsoluteFill: () => (/* binding */ AbsoluteFill),\n/* harmony export */   AnimatedImage: () => (/* binding */ AnimatedImage),\n/* harmony export */   Artifact: () => (/* binding */ Artifact),\n/* harmony export */   Audio: () => (/* binding */ Audio),\n/* harmony export */   Composition: () => (/* binding */ Composition),\n/* harmony export */   Config: () => (/* binding */ Config),\n/* harmony export */   Easing: () => (/* binding */ Easing),\n/* harmony export */   Experimental: () => (/* binding */ Experimental),\n/* harmony export */   Folder: () => (/* binding */ Folder),\n/* harmony export */   FolderContext: () => (/* binding */ FolderContext),\n/* harmony export */   Freeze: () => (/* binding */ Freeze),\n/* harmony export */   IFrame: () => (/* binding */ IFrame),\n/* harmony export */   Img: () => (/* binding */ Img),\n/* harmony export */   Internals: () => (/* binding */ Internals),\n/* harmony export */   Loop: () => (/* binding */ Loop),\n/* harmony export */   OffthreadVideo: () => (/* binding */ OffthreadVideo),\n/* harmony export */   Sequence: () => (/* binding */ Sequence),\n/* harmony export */   Series: () => (/* binding */ Series),\n/* harmony export */   Still: () => (/* binding */ Still),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   Video: () => (/* binding */ Video),\n/* harmony export */   cancelRender: () => (/* binding */ cancelRender),\n/* harmony export */   continueRender: () => (/* binding */ continueRender),\n/* harmony export */   delayRender: () => (/* binding */ delayRender),\n/* harmony export */   getInputProps: () => (/* binding */ getInputProps),\n/* harmony export */   getRemotionEnvironment: () => (/* binding */ getRemotionEnvironment),\n/* harmony export */   getStaticFiles: () => (/* binding */ getStaticFiles),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   interpolateColors: () => (/* binding */ interpolateColors),\n/* harmony export */   measureSpring: () => (/* binding */ measureSpring),\n/* harmony export */   prefetch: () => (/* binding */ prefetch),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   registerRoot: () => (/* binding */ registerRoot),\n/* harmony export */   spring: () => (/* binding */ spring),\n/* harmony export */   staticFile: () => (/* binding */ staticFile),\n/* harmony export */   useBufferState: () => (/* binding */ useBufferState),\n/* harmony export */   useCurrentFrame: () => (/* binding */ useCurrentFrame),\n/* harmony export */   useCurrentScale: () => (/* binding */ useCurrentScale),\n/* harmony export */   useDelayRender: () => (/* binding */ useDelayRender),\n/* harmony export */   useRemotionEnvironment: () => (/* binding */ useRemotionEnvironment),\n/* harmony export */   useVideoConfig: () => (/* binding */ useVideoConfig),\n/* harmony export */   watchStaticFile: () => (/* binding */ watchStaticFile)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true,\n        configurable: true,\n        set: (newValue)=>all[name] = ()=>newValue\n    });\n};\n// src/_check-rsc.ts\n\nif (typeof react__WEBPACK_IMPORTED_MODULE_0__.createContext !== \"function\") {\n    const err = [\n        'Remotion requires React.createContext, but it is \"undefined\".',\n        'If you are in a React Server Component, turn it into a client component by adding \"use client\" at the top of the file.',\n        \"\",\n        \"Before:\",\n        '  import {useCurrentFrame} from \"remotion\";',\n        \"\",\n        \"After:\",\n        '  \"use client\";',\n        '  import {useCurrentFrame} from \"remotion\";'\n    ];\n    throw new Error(err.join(`\n`));\n}\n// src/Clipper.tsx\nvar Clipper = ()=>{\n    throw new Error(\"<Clipper> has been removed as of Remotion v4.0.228. The native clipping APIs were experimental and subject to removal at any time. We removed them because they were sparingly used and made rendering often slower rather than faster.\");\n};\n// src/enable-sequence-stack-traces.ts\n\n// src/get-remotion-environment.ts\n\nfunction getNodeEnvString() {\n    return [\n        \"NOD\",\n        \"E_EN\",\n        \"V\"\n    ].join(\"\");\n}\nvar getEnvString = ()=>{\n    return [\n        \"e\",\n        \"nv\"\n    ].join(\"\");\n};\nvar getRemotionEnvironment = ()=>{\n    const isPlayer =  false && 0;\n    const isRendering =  false && (0);\n    const isStudio =  false && 0;\n    const isReadOnlyStudio =  false && 0;\n    return {\n        isStudio,\n        isRendering,\n        isPlayer,\n        isReadOnlyStudio,\n        isClientSideRendering: false\n    };\n};\nvar RemotionEnvironmentContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n// src/enable-sequence-stack-traces.ts\nvar originalCreateElement = react__WEBPACK_IMPORTED_MODULE_0__.createElement;\nvar componentsToAddStacksTo = [];\nvar enableSequenceStackTraces = ()=>{\n    if (!getRemotionEnvironment().isStudio) {\n        return;\n    }\n    const proxy = new Proxy(originalCreateElement, {\n        apply (target, thisArg, argArray) {\n            if (componentsToAddStacksTo.includes(argArray[0])) {\n                const [first, props, ...rest] = argArray;\n                const newProps = {\n                    ...props ?? {},\n                    stack: new Error().stack\n                };\n                return Reflect.apply(target, thisArg, [\n                    first,\n                    newProps,\n                    ...rest\n                ]);\n            }\n            return Reflect.apply(target, thisArg, argArray);\n        }\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.createElement = proxy;\n};\nvar addSequenceStackTraces = (component)=>{\n    componentsToAddStacksTo.push(component);\n    enableSequenceStackTraces();\n};\n// src/is-player.tsx\n\n\nvar IsPlayerContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nvar IsPlayerContextProvider = ({ children })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsPlayerContext.Provider, {\n        value: true,\n        children\n    });\n};\nvar useIsPlayer = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(IsPlayerContext);\n};\n// src/truthy.ts\nfunction truthy(value) {\n    return Boolean(value);\n}\n// src/version.ts\nvar VERSION = \"4.0.347\";\n// src/multiple-versions-warning.ts\nvar checkMultipleRemotionVersions = ()=>{\n    if (typeof globalThis === \"undefined\") {\n        return;\n    }\n    const set = ()=>{\n        globalThis.remotion_imported = VERSION;\n        if (false) {}\n    };\n    const alreadyImported = globalThis.remotion_imported ||  false && 0;\n    if (alreadyImported) {\n        if (alreadyImported === VERSION) {\n            return;\n        }\n        if (typeof alreadyImported === \"string\" && alreadyImported.includes(\"webcodecs\")) {\n            set();\n            return;\n        }\n        throw new TypeError(`\\uD83D\\uDEA8 Multiple versions of Remotion detected: ${[\n            VERSION,\n            typeof alreadyImported === \"string\" ? alreadyImported : \"an older version\"\n        ].filter(truthy).join(\" and \")}. This will cause things to break in an unexpected way.\nCheck that all your Remotion packages are on the same version. If your dependencies depend on Remotion, make them peer dependencies. You can also run \\`npx remotion versions\\` from your terminal to see which versions are mismatching.`);\n    }\n    set();\n};\n// src/Null.tsx\nvar Null = ()=>{\n    throw new Error(\"<Null> has been removed as of Remotion v4.0.228. The native clipping APIs were experimental and subject to removal at any time. We removed them because they were sparingly used and made rendering often slower rather than faster.\");\n};\n// src/Sequence.tsx\n\n// src/AbsoluteFill.tsx\n\n\nvar hasTailwindClassName = ({ className, classPrefix, type })=>{\n    if (!className) {\n        return false;\n    }\n    if (type === \"exact\") {\n        const split = className.split(\" \");\n        return classPrefix.some((token)=>{\n            return split.some((part)=>{\n                return part.trim() === token || part.trim().endsWith(`:${token}`) || part.trim().endsWith(`!${token}`);\n            });\n        });\n    }\n    return classPrefix.some((prefix)=>{\n        return className.startsWith(prefix) || className.includes(` ${prefix}`) || className.includes(`!${prefix}`) || className.includes(`:${prefix}`);\n    });\n};\nvar AbsoluteFillRefForwarding = (props, ref)=>{\n    const { style, ...other } = props;\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"AbsoluteFillRefForwarding.useMemo[actualStyle]\": ()=>{\n            return {\n                position: \"absolute\",\n                top: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"top-\",\n                        \"inset-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : 0,\n                left: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"left-\",\n                        \"inset-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : 0,\n                right: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"right-\",\n                        \"inset-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : 0,\n                bottom: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"bottom-\",\n                        \"inset-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : 0,\n                width: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"w-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : \"100%\",\n                height: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"h-\"\n                    ],\n                    type: \"prefix\"\n                }) ? undefined : \"100%\",\n                display: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"block\",\n                        \"inline-block\",\n                        \"inline\",\n                        \"flex\",\n                        \"inline-flex\",\n                        \"flow-root\",\n                        \"grid\",\n                        \"inline-grid\",\n                        \"contents\",\n                        \"list-item\",\n                        \"hidden\"\n                    ],\n                    type: \"exact\"\n                }) ? undefined : \"flex\",\n                flexDirection: hasTailwindClassName({\n                    className: other.className,\n                    classPrefix: [\n                        \"flex-row\",\n                        \"flex-col\",\n                        \"flex-row-reverse\",\n                        \"flex-col-reverse\"\n                    ],\n                    type: \"exact\"\n                }) ? undefined : \"column\",\n                ...style\n            };\n        }\n    }[\"AbsoluteFillRefForwarding.useMemo[actualStyle]\"], [\n        other.className,\n        style\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ref,\n        style: actualStyle,\n        ...other\n    });\n};\nvar AbsoluteFill = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AbsoluteFillRefForwarding);\n// src/SequenceContext.tsx\n\nvar SequenceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\n// src/SequenceManager.tsx\n\n\nvar SequenceManager = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    registerSequence: ()=>{\n        throw new Error(\"SequenceManagerContext not initialized\");\n    },\n    unregisterSequence: ()=>{\n        throw new Error(\"SequenceManagerContext not initialized\");\n    },\n    sequences: []\n});\nvar SequenceVisibilityToggleContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({\n    hidden: {},\n    setHidden: ()=>{\n        throw new Error(\"SequenceVisibilityToggle not initialized\");\n    }\n});\nvar SequenceManagerProvider = ({ children })=>{\n    const [sequences, setSequences] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [hidden, setHidden] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const registerSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SequenceManagerProvider.useCallback[registerSequence]\": (seq)=>{\n            setSequences({\n                \"SequenceManagerProvider.useCallback[registerSequence]\": (seqs)=>{\n                    return [\n                        ...seqs,\n                        seq\n                    ];\n                }\n            }[\"SequenceManagerProvider.useCallback[registerSequence]\"]);\n        }\n    }[\"SequenceManagerProvider.useCallback[registerSequence]\"], []);\n    const unregisterSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SequenceManagerProvider.useCallback[unregisterSequence]\": (seq)=>{\n            setSequences({\n                \"SequenceManagerProvider.useCallback[unregisterSequence]\": (seqs)=>seqs.filter({\n                        \"SequenceManagerProvider.useCallback[unregisterSequence]\": (s)=>s.id !== seq\n                    }[\"SequenceManagerProvider.useCallback[unregisterSequence]\"])\n            }[\"SequenceManagerProvider.useCallback[unregisterSequence]\"]);\n        }\n    }[\"SequenceManagerProvider.useCallback[unregisterSequence]\"], []);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SequenceManagerProvider.useMemo2[sequenceContext]\": ()=>{\n            return {\n                registerSequence,\n                sequences,\n                unregisterSequence\n            };\n        }\n    }[\"SequenceManagerProvider.useMemo2[sequenceContext]\"], [\n        registerSequence,\n        sequences,\n        unregisterSequence\n    ]);\n    const hiddenContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SequenceManagerProvider.useMemo2[hiddenContext]\": ()=>{\n            return {\n                hidden,\n                setHidden\n            };\n        }\n    }[\"SequenceManagerProvider.useMemo2[hiddenContext]\"], [\n        hidden\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, {\n        value: sequenceContext,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceVisibilityToggleContext.Provider, {\n            value: hiddenContext,\n            children\n        })\n    });\n};\n// src/nonce.ts\n\nvar NonceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    getNonce: ()=>0,\n    fastRefreshes: 0,\n    manualRefreshes: 0\n});\nvar SetNonceContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    increaseManualRefreshes: ()=>{}\n});\nvar useNonce = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NonceContext);\n    const [nonce, setNonce] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useNonce.useState2\": ()=>context.getNonce()\n    }[\"useNonce.useState2\"]);\n    const lastContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(context);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useNonce.useEffect\": ()=>{\n            if (lastContext.current === context) {\n                return;\n            }\n            lastContext.current = context;\n            setNonce(context.getNonce);\n        }\n    }[\"useNonce.useEffect\"], [\n        context\n    ]);\n    return nonce;\n};\n// src/timeline-position-state.ts\nvar exports_timeline_position_state = {};\n__export(exports_timeline_position_state, {\n    useTimelineSetFrame: ()=>useTimelineSetFrame,\n    useTimelinePosition: ()=>useTimelinePosition,\n    usePlayingState: ()=>usePlayingState,\n    persistCurrentFrame: ()=>persistCurrentFrame,\n    getInitialFrameState: ()=>getInitialFrameState,\n    getFrameForComposition: ()=>getFrameForComposition,\n    TimelineContext: ()=>TimelineContext,\n    SetTimelineContext: ()=>SetTimelineContext\n});\n\n// src/use-remotion-environment.ts\n\nvar useRemotionEnvironment = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RemotionEnvironmentContext);\n    const [env] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useRemotionEnvironment.useState3\": ()=>getRemotionEnvironment()\n    }[\"useRemotionEnvironment.useState3\"]);\n    return context ?? env;\n};\n// src/use-video.ts\n\n// src/CompositionManagerContext.tsx\n\nvar CompositionManager = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    compositions: [],\n    folders: [],\n    currentCompositionMetadata: null,\n    canvasContent: null\n});\nvar CompositionSetters = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    registerComposition: ()=>{\n        return;\n    },\n    unregisterComposition: ()=>{\n        return;\n    },\n    registerFolder: ()=>{\n        return;\n    },\n    unregisterFolder: ()=>{\n        return;\n    },\n    setCanvasContent: ()=>{\n        return;\n    },\n    updateCompositionDefaultProps: ()=>{\n        return;\n    },\n    onlyRenderComposition: null\n});\n// src/ResolveCompositionConfig.tsx\n\n// src/EditorProps.tsx\n\n\nvar EditorPropsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    props: {},\n    updateProps: ()=>{\n        throw new Error(\"Not implemented\");\n    },\n    resetUnsaved: ()=>{\n        throw new Error(\"Not implemented\");\n    }\n});\nvar editorPropsProviderRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\nvar timeValueRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\nvar EditorPropsProvider = ({ children })=>{\n    const [props, setProps] = react__WEBPACK_IMPORTED_MODULE_0__.useState({});\n    const updateProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"EditorPropsProvider.useCallback2[updateProps]\": ({ defaultProps, id, newProps })=>{\n            setProps({\n                \"EditorPropsProvider.useCallback2[updateProps]\": (prev)=>{\n                    return {\n                        ...prev,\n                        [id]: typeof newProps === \"function\" ? newProps(prev[id] ?? defaultProps) : newProps\n                    };\n                }\n            }[\"EditorPropsProvider.useCallback2[updateProps]\"]);\n        }\n    }[\"EditorPropsProvider.useCallback2[updateProps]\"], []);\n    const resetUnsaved = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"EditorPropsProvider.useCallback2[resetUnsaved]\": (compositionId)=>{\n            setProps({\n                \"EditorPropsProvider.useCallback2[resetUnsaved]\": (prev)=>{\n                    if (prev[compositionId]) {\n                        const newProps = {\n                            ...prev\n                        };\n                        delete newProps[compositionId];\n                        return newProps;\n                    }\n                    return prev;\n                }\n            }[\"EditorPropsProvider.useCallback2[resetUnsaved]\"]);\n        }\n    }[\"EditorPropsProvider.useCallback2[resetUnsaved]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(editorPropsProviderRef, {\n        \"EditorPropsProvider.useImperativeHandle\": ()=>{\n            return {\n                getProps: ({\n                    \"EditorPropsProvider.useImperativeHandle\": ()=>props\n                })[\"EditorPropsProvider.useImperativeHandle\"],\n                setProps\n            };\n        }\n    }[\"EditorPropsProvider.useImperativeHandle\"], [\n        props\n    ]);\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"EditorPropsProvider.useMemo3[ctx]\": ()=>{\n            return {\n                props,\n                updateProps,\n                resetUnsaved\n            };\n        }\n    }[\"EditorPropsProvider.useMemo3[ctx]\"], [\n        props,\n        resetUnsaved,\n        updateProps\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsContext.Provider, {\n        value: ctx,\n        children\n    });\n};\n// src/input-props-serialization.ts\nvar DATE_TOKEN = \"remotion-date:\";\nvar FILE_TOKEN = \"remotion-file:\";\nvar serializeJSONWithSpecialTypes = ({ data, indent, staticBase })=>{\n    let customDateUsed = false;\n    let customFileUsed = false;\n    let mapUsed = false;\n    let setUsed = false;\n    try {\n        const serializedString = JSON.stringify(data, function(key, value) {\n            const item = this[key];\n            if (item instanceof Date) {\n                customDateUsed = true;\n                return `${DATE_TOKEN}${item.toISOString()}`;\n            }\n            if (item instanceof Map) {\n                mapUsed = true;\n                return value;\n            }\n            if (item instanceof Set) {\n                setUsed = true;\n                return value;\n            }\n            if (typeof item === \"string\" && staticBase !== null && item.startsWith(staticBase)) {\n                customFileUsed = true;\n                return `${FILE_TOKEN}${item.replace(staticBase + \"/\", \"\")}`;\n            }\n            return value;\n        }, indent);\n        return {\n            serializedString,\n            customDateUsed,\n            customFileUsed,\n            mapUsed,\n            setUsed\n        };\n    } catch (err) {\n        throw new Error(\"Could not serialize the passed input props to JSON: \" + err.message);\n    }\n};\nvar deserializeJSONWithSpecialTypes = (data)=>{\n    return JSON.parse(data, (_, value)=>{\n        if (typeof value === \"string\" && value.startsWith(DATE_TOKEN)) {\n            return new Date(value.replace(DATE_TOKEN, \"\"));\n        }\n        if (typeof value === \"string\" && value.startsWith(FILE_TOKEN)) {\n            return `${window.remotion_staticBase}/${value.replace(FILE_TOKEN, \"\")}`;\n        }\n        return value;\n    });\n};\nvar serializeThenDeserialize = (props)=>{\n    return deserializeJSONWithSpecialTypes(serializeJSONWithSpecialTypes({\n        data: props,\n        indent: 2,\n        staticBase: window.remotion_staticBase\n    }).serializedString);\n};\nvar serializeThenDeserializeInStudio = (props)=>{\n    if (getRemotionEnvironment().isStudio) {\n        return serializeThenDeserialize(props);\n    }\n    return props;\n};\n// src/config/input-props.ts\nvar didWarnSSRImport = false;\nvar warnOnceSSRImport = ()=>{\n    if (didWarnSSRImport) {\n        return;\n    }\n    didWarnSSRImport = true;\n    console.warn(\"Called `getInputProps()` on the server. This function is not available server-side and has returned an empty object.\");\n    console.warn(\"To hide this warning, don't call this function on the server:\");\n    console.warn(\"  typeof window === 'undefined' ? {} : getInputProps()\");\n};\nvar getInputProps = ()=>{\n    if (true) {\n        warnOnceSSRImport();\n        return {};\n    }\n    if (getRemotionEnvironment().isPlayer) {\n        throw new Error(\"You cannot call `getInputProps()` from a <Player>. Instead, the props are available as React props from component that you passed as `component` prop.\");\n    }\n    const param = window.remotion_inputProps;\n    if (!param) {\n        return {};\n    }\n    const parsed = deserializeJSONWithSpecialTypes(param);\n    return parsed;\n};\n// src/codec.ts\nvar validCodecs = [\n    \"h264\",\n    \"h265\",\n    \"vp8\",\n    \"vp9\",\n    \"mp3\",\n    \"aac\",\n    \"wav\",\n    \"prores\",\n    \"h264-mkv\",\n    \"h264-ts\",\n    \"gif\"\n];\n// src/validation/validate-default-codec.ts\nfunction validateCodec(defaultCodec, location, name) {\n    if (typeof defaultCodec === \"undefined\") {\n        return;\n    }\n    if (typeof defaultCodec !== \"string\") {\n        throw new TypeError(`The \"${name}\" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);\n    }\n    if (!validCodecs.includes(defaultCodec)) {\n        throw new Error(`The \"${name}\" prop ${location} must be one of ${validCodecs.join(\", \")}, but you passed ${defaultCodec}.`);\n    }\n}\n// src/validation/validate-dimensions.ts\nfunction validateDimension(amount, nameOfProp, location) {\n    if (typeof amount !== \"number\") {\n        throw new Error(`The \"${nameOfProp}\" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);\n    }\n    if (isNaN(amount)) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must not be NaN, but is NaN.`);\n    }\n    if (!Number.isFinite(amount)) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be finite, but is ${amount}.`);\n    }\n    if (amount % 1 !== 0) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be an integer, but is ${amount}.`);\n    }\n    if (amount <= 0) {\n        throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be positive, but got ${amount}.`);\n    }\n}\n// src/validation/validate-duration-in-frames.ts\nfunction validateDurationInFrames(durationInFrames, options) {\n    const { allowFloats, component } = options;\n    if (typeof durationInFrames === \"undefined\") {\n        throw new Error(`The \"durationInFrames\" prop ${component} is missing.`);\n    }\n    if (typeof durationInFrames !== \"number\") {\n        throw new Error(`The \"durationInFrames\" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);\n    }\n    if (durationInFrames <= 0) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be positive, but got ${durationInFrames}.`);\n    }\n    if (!allowFloats && durationInFrames % 1 !== 0) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be an integer, but got ${durationInFrames}.`);\n    }\n    if (!Number.isFinite(durationInFrames)) {\n        throw new TypeError(`The \"durationInFrames\" prop ${component} must be finite, but got ${durationInFrames}.`);\n    }\n}\n// src/validation/validate-fps.ts\nfunction validateFps(fps, location, isGif) {\n    if (typeof fps !== \"number\") {\n        throw new Error(`\"fps\" must be a number, but you passed a value of type ${typeof fps} ${location}`);\n    }\n    if (!Number.isFinite(fps)) {\n        throw new Error(`\"fps\" must be a finite, but you passed ${fps} ${location}`);\n    }\n    if (isNaN(fps)) {\n        throw new Error(`\"fps\" must not be NaN, but got ${fps} ${location}`);\n    }\n    if (fps <= 0) {\n        throw new TypeError(`\"fps\" must be positive, but got ${fps} ${location}`);\n    }\n    if (isGif && fps > 50) {\n        throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);\n    }\n}\n// src/resolve-video-config.ts\nvar validateCalculated = ({ calculated, compositionId, compositionFps, compositionHeight, compositionWidth, compositionDurationInFrames })=>{\n    const calculateMetadataErrorLocation = `calculated by calculateMetadata() for the composition \"${compositionId}\"`;\n    const defaultErrorLocation = `of the \"<Composition />\" component with the id \"${compositionId}\"`;\n    const width = calculated?.width ?? compositionWidth ?? undefined;\n    validateDimension(width, \"width\", calculated?.width ? calculateMetadataErrorLocation : defaultErrorLocation);\n    const height = calculated?.height ?? compositionHeight ?? undefined;\n    validateDimension(height, \"height\", calculated?.height ? calculateMetadataErrorLocation : defaultErrorLocation);\n    const fps = calculated?.fps ?? compositionFps ?? null;\n    validateFps(fps, calculated?.fps ? calculateMetadataErrorLocation : defaultErrorLocation, false);\n    const durationInFrames = calculated?.durationInFrames ?? compositionDurationInFrames ?? null;\n    validateDurationInFrames(durationInFrames, {\n        allowFloats: false,\n        component: `of the \"<Composition />\" component with the id \"${compositionId}\"`\n    });\n    const defaultCodec = calculated?.defaultCodec;\n    validateCodec(defaultCodec, calculateMetadataErrorLocation, \"defaultCodec\");\n    const defaultOutName = calculated?.defaultOutName;\n    const defaultVideoImageFormat = calculated?.defaultVideoImageFormat;\n    const defaultPixelFormat = calculated?.defaultPixelFormat;\n    return {\n        width,\n        height,\n        fps,\n        durationInFrames,\n        defaultCodec,\n        defaultOutName,\n        defaultVideoImageFormat,\n        defaultPixelFormat\n    };\n};\nvar resolveVideoConfig = ({ calculateMetadata, signal, defaultProps, originalProps, compositionId, compositionDurationInFrames, compositionFps, compositionHeight, compositionWidth })=>{\n    const calculatedProm = calculateMetadata ? calculateMetadata({\n        defaultProps,\n        props: originalProps,\n        abortSignal: signal,\n        compositionId,\n        isRendering: getRemotionEnvironment().isRendering\n    }) : null;\n    if (calculatedProm !== null && typeof calculatedProm === \"object\" && \"then\" in calculatedProm) {\n        return calculatedProm.then((c)=>{\n            const { height, width, durationInFrames, fps, defaultCodec, defaultOutName, defaultVideoImageFormat, defaultPixelFormat } = validateCalculated({\n                calculated: c,\n                compositionDurationInFrames,\n                compositionFps,\n                compositionHeight,\n                compositionWidth,\n                compositionId\n            });\n            return {\n                width,\n                height,\n                fps,\n                durationInFrames,\n                id: compositionId,\n                defaultProps: serializeThenDeserializeInStudio(defaultProps),\n                props: serializeThenDeserializeInStudio(c.props ?? originalProps),\n                defaultCodec: defaultCodec ?? null,\n                defaultOutName: defaultOutName ?? null,\n                defaultVideoImageFormat: defaultVideoImageFormat ?? null,\n                defaultPixelFormat: defaultPixelFormat ?? null\n            };\n        });\n    }\n    const data = validateCalculated({\n        calculated: calculatedProm,\n        compositionDurationInFrames,\n        compositionFps,\n        compositionHeight,\n        compositionWidth,\n        compositionId\n    });\n    if (calculatedProm === null) {\n        return {\n            ...data,\n            id: compositionId,\n            defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),\n            props: serializeThenDeserializeInStudio(originalProps),\n            defaultCodec: null,\n            defaultOutName: null,\n            defaultVideoImageFormat: null,\n            defaultPixelFormat: null\n        };\n    }\n    return {\n        ...data,\n        id: compositionId,\n        defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),\n        props: serializeThenDeserializeInStudio(calculatedProm.props ?? originalProps),\n        defaultCodec: calculatedProm.defaultCodec ?? null,\n        defaultOutName: calculatedProm.defaultOutName ?? null,\n        defaultVideoImageFormat: calculatedProm.defaultVideoImageFormat ?? null,\n        defaultPixelFormat: calculatedProm.defaultPixelFormat ?? null\n    };\n};\nvar resolveVideoConfigOrCatch = (params)=>{\n    try {\n        const promiseOrReturnValue = resolveVideoConfig(params);\n        return {\n            type: \"success\",\n            result: promiseOrReturnValue\n        };\n    } catch (err) {\n        return {\n            type: \"error\",\n            error: err\n        };\n    }\n};\n// src/ResolveCompositionConfig.tsx\n\nvar ResolveCompositionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar resolveCompositionsRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\nvar needsResolution = (composition)=>{\n    return Boolean(composition.calculateMetadata);\n};\nvar PROPS_UPDATED_EXTERNALLY = \"remotion.propsUpdatedExternally\";\nvar ResolveCompositionConfig = ({ children })=>{\n    const [currentRenderModalComposition, setCurrentRenderModalComposition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const { fastRefreshes, manualRefreshes } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(NonceContext);\n    if (manualRefreshes) {}\n    const selectedComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[selectedComposition]\": ()=>{\n            return compositions.find({\n                \"ResolveCompositionConfig.useMemo4[selectedComposition]\": (c)=>canvasContent && canvasContent.type === \"composition\" && canvasContent.compositionId === c.id\n            }[\"ResolveCompositionConfig.useMemo4[selectedComposition]\"]);\n        }\n    }[\"ResolveCompositionConfig.useMemo4[selectedComposition]\"], [\n        canvasContent,\n        compositions\n    ]);\n    const renderModalComposition = compositions.find((c)=>c.id === currentRenderModalComposition);\n    const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);\n    const env = useRemotionEnvironment();\n    const inputProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[inputProps]\": ()=>{\n            return  true ? {} : 0;\n        }\n    }[\"ResolveCompositionConfig.useMemo4[inputProps]\"], [\n        env.isPlayer\n    ]);\n    const [resolvedConfigs, setResolvedConfigs] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[selectedEditorProps]\": ()=>{\n            return selectedComposition ? allEditorProps[selectedComposition.id] ?? {} : {};\n        }\n    }[\"ResolveCompositionConfig.useMemo4[selectedEditorProps]\"], [\n        allEditorProps,\n        selectedComposition\n    ]);\n    const renderModalProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[renderModalProps]\": ()=>{\n            return renderModalComposition ? allEditorProps[renderModalComposition.id] ?? {} : {};\n        }\n    }[\"ResolveCompositionConfig.useMemo4[renderModalProps]\"], [\n        allEditorProps,\n        renderModalComposition\n    ]);\n    const hasResolution = Boolean(currentCompositionMetadata);\n    const doResolution = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"ResolveCompositionConfig.useCallback3[doResolution]\": ({ calculateMetadata, combinedProps, compositionDurationInFrames, compositionFps, compositionHeight, compositionId, compositionWidth, defaultProps })=>{\n            const controller = new AbortController;\n            if (hasResolution) {\n                return controller;\n            }\n            const { signal } = controller;\n            const result = resolveVideoConfigOrCatch({\n                compositionId,\n                calculateMetadata,\n                originalProps: combinedProps,\n                signal,\n                defaultProps,\n                compositionDurationInFrames,\n                compositionFps,\n                compositionHeight,\n                compositionWidth\n            });\n            if (result.type === \"error\") {\n                setResolvedConfigs({\n                    \"ResolveCompositionConfig.useCallback3[doResolution]\": (r)=>({\n                            ...r,\n                            [compositionId]: {\n                                type: \"error\",\n                                error: result.error\n                            }\n                        })\n                }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n                return controller;\n            }\n            const promOrNot = result.result;\n            if (typeof promOrNot === \"object\" && \"then\" in promOrNot) {\n                setResolvedConfigs({\n                    \"ResolveCompositionConfig.useCallback3[doResolution]\": (r)=>{\n                        const prev = r[compositionId];\n                        if (prev?.type === \"success\" || prev?.type === \"success-and-refreshing\") {\n                            return {\n                                ...r,\n                                [compositionId]: {\n                                    type: \"success-and-refreshing\",\n                                    result: prev.result\n                                }\n                            };\n                        }\n                        return {\n                            ...r,\n                            [compositionId]: {\n                                type: \"loading\"\n                            }\n                        };\n                    }\n                }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n                promOrNot.then({\n                    \"ResolveCompositionConfig.useCallback3[doResolution]\": (c)=>{\n                        if (controller.signal.aborted) {\n                            return;\n                        }\n                        setResolvedConfigs({\n                            \"ResolveCompositionConfig.useCallback3[doResolution]\": (r)=>({\n                                    ...r,\n                                    [compositionId]: {\n                                        type: \"success\",\n                                        result: c\n                                    }\n                                })\n                        }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n                    }\n                }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]).catch({\n                    \"ResolveCompositionConfig.useCallback3[doResolution]\": (err)=>{\n                        if (controller.signal.aborted) {\n                            return;\n                        }\n                        setResolvedConfigs({\n                            \"ResolveCompositionConfig.useCallback3[doResolution]\": (r)=>({\n                                    ...r,\n                                    [compositionId]: {\n                                        type: \"error\",\n                                        error: err\n                                    }\n                                })\n                        }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n                    }\n                }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n            } else {\n                setResolvedConfigs({\n                    \"ResolveCompositionConfig.useCallback3[doResolution]\": (r)=>({\n                            ...r,\n                            [compositionId]: {\n                                type: \"success\",\n                                result: promOrNot\n                            }\n                        })\n                }[\"ResolveCompositionConfig.useCallback3[doResolution]\"]);\n            }\n            return controller;\n        }\n    }[\"ResolveCompositionConfig.useCallback3[doResolution]\"], [\n        hasResolution\n    ]);\n    const currentComposition = canvasContent?.type === \"composition\" ? canvasContent.compositionId : null;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(resolveCompositionsRef, {\n        \"ResolveCompositionConfig.useImperativeHandle2\": ()=>{\n            return {\n                setCurrentRenderModalComposition: ({\n                    \"ResolveCompositionConfig.useImperativeHandle2\": (id)=>{\n                        setCurrentRenderModalComposition(id);\n                    }\n                })[\"ResolveCompositionConfig.useImperativeHandle2\"],\n                reloadCurrentlySelectedComposition: ({\n                    \"ResolveCompositionConfig.useImperativeHandle2\": ()=>{\n                        if (!currentComposition) {\n                            return;\n                        }\n                        const composition = compositions.find({\n                            \"ResolveCompositionConfig.useImperativeHandle2.composition\": (c)=>c.id === currentComposition\n                        }[\"ResolveCompositionConfig.useImperativeHandle2.composition\"]);\n                        if (!composition) {\n                            throw new Error(`Could not find composition with id ${currentComposition}`);\n                        }\n                        const editorProps = allEditorProps[currentComposition] ?? {};\n                        const defaultProps = {\n                            ...composition.defaultProps ?? {},\n                            ...editorProps ?? {}\n                        };\n                        const props = {\n                            ...defaultProps,\n                            ...inputProps ?? {}\n                        };\n                        doResolution({\n                            defaultProps,\n                            calculateMetadata: composition.calculateMetadata,\n                            combinedProps: props,\n                            compositionDurationInFrames: composition.durationInFrames ?? null,\n                            compositionFps: composition.fps ?? null,\n                            compositionHeight: composition.height ?? null,\n                            compositionWidth: composition.width ?? null,\n                            compositionId: composition.id\n                        });\n                    }\n                })[\"ResolveCompositionConfig.useImperativeHandle2\"]\n            };\n        }\n    }[\"ResolveCompositionConfig.useImperativeHandle2\"], [\n        allEditorProps,\n        compositions,\n        currentComposition,\n        doResolution,\n        inputProps\n    ]);\n    const isTheSame = selectedComposition?.id === renderModalComposition?.id;\n    const currentDefaultProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[currentDefaultProps]\": ()=>{\n            return {\n                ...selectedComposition?.defaultProps ?? {},\n                ...selectedEditorProps ?? {}\n            };\n        }\n    }[\"ResolveCompositionConfig.useMemo4[currentDefaultProps]\"], [\n        selectedComposition?.defaultProps,\n        selectedEditorProps\n    ]);\n    const originalProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[originalProps]\": ()=>{\n            return {\n                ...currentDefaultProps,\n                ...inputProps ?? {}\n            };\n        }\n    }[\"ResolveCompositionConfig.useMemo4[originalProps]\"], [\n        currentDefaultProps,\n        inputProps\n    ]);\n    const canResolve = selectedComposition && needsResolution(selectedComposition);\n    const shouldIgnoreUpdate =  false && 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"ResolveCompositionConfig.useEffect2\": ()=>{\n            if (shouldIgnoreUpdate) {\n                return;\n            }\n            if (canResolve) {\n                const controller = doResolution({\n                    calculateMetadata: selectedComposition.calculateMetadata,\n                    combinedProps: originalProps,\n                    compositionDurationInFrames: selectedComposition.durationInFrames ?? null,\n                    compositionFps: selectedComposition.fps ?? null,\n                    compositionHeight: selectedComposition.height ?? null,\n                    compositionWidth: selectedComposition.width ?? null,\n                    defaultProps: currentDefaultProps,\n                    compositionId: selectedComposition.id\n                });\n                return ({\n                    \"ResolveCompositionConfig.useEffect2\": ()=>{\n                        controller.abort();\n                    }\n                })[\"ResolveCompositionConfig.useEffect2\"];\n            }\n        }\n    }[\"ResolveCompositionConfig.useEffect2\"], [\n        canResolve,\n        currentDefaultProps,\n        doResolution,\n        originalProps,\n        selectedComposition?.calculateMetadata,\n        selectedComposition?.durationInFrames,\n        selectedComposition?.fps,\n        selectedComposition?.height,\n        selectedComposition?.id,\n        selectedComposition?.width,\n        shouldIgnoreUpdate\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"ResolveCompositionConfig.useEffect2\": ()=>{\n            if (renderModalComposition && !isTheSame) {\n                const combinedProps = {\n                    ...renderModalComposition.defaultProps ?? {},\n                    ...renderModalProps ?? {},\n                    ...inputProps ?? {}\n                };\n                const controller = doResolution({\n                    calculateMetadata: renderModalComposition.calculateMetadata,\n                    compositionDurationInFrames: renderModalComposition.durationInFrames ?? null,\n                    compositionFps: renderModalComposition.fps ?? null,\n                    compositionHeight: renderModalComposition.height ?? null,\n                    compositionId: renderModalComposition.id,\n                    compositionWidth: renderModalComposition.width ?? null,\n                    defaultProps: currentDefaultProps,\n                    combinedProps\n                });\n                return ({\n                    \"ResolveCompositionConfig.useEffect2\": ()=>{\n                        controller.abort();\n                    }\n                })[\"ResolveCompositionConfig.useEffect2\"];\n            }\n        }\n    }[\"ResolveCompositionConfig.useEffect2\"], [\n        currentDefaultProps,\n        doResolution,\n        inputProps,\n        isTheSame,\n        renderModalComposition,\n        renderModalProps\n    ]);\n    const resolvedConfigsIncludingStaticOnes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes]\": ()=>{\n            const staticComps = compositions.filter({\n                \"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes].staticComps\": (c)=>{\n                    return c.calculateMetadata === null;\n                }\n            }[\"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes].staticComps\"]);\n            return {\n                ...resolvedConfigs,\n                ...staticComps.reduce({\n                    \"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes]\": (acc, curr)=>{\n                        return {\n                            ...acc,\n                            [curr.id]: {\n                                type: \"success\",\n                                result: {\n                                    ...curr,\n                                    defaultProps: curr.defaultProps ?? {}\n                                }\n                            }\n                        };\n                    }\n                }[\"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes]\"], {})\n            };\n        }\n    }[\"ResolveCompositionConfig.useMemo4[resolvedConfigsIncludingStaticOnes]\"], [\n        compositions,\n        resolvedConfigs\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, {\n        value: resolvedConfigsIncludingStaticOnes,\n        children\n    });\n};\nvar useResolvedVideoConfig = (preferredCompositionId)=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ResolveCompositionContext);\n    const { props: allEditorProps } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorPropsContext);\n    const { compositions, canvasContent, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const currentComposition = canvasContent?.type === \"composition\" ? canvasContent.compositionId : null;\n    const compositionId = preferredCompositionId ?? currentComposition;\n    const composition = compositions.find((c)=>c.id === compositionId);\n    const selectedEditorProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useResolvedVideoConfig.useMemo4[selectedEditorProps]\": ()=>{\n            return composition ? allEditorProps[composition.id] ?? {} : {};\n        }\n    }[\"useResolvedVideoConfig.useMemo4[selectedEditorProps]\"], [\n        allEditorProps,\n        composition\n    ]);\n    const env = useRemotionEnvironment();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useResolvedVideoConfig.useMemo4\": ()=>{\n            if (!composition) {\n                return null;\n            }\n            if (currentCompositionMetadata) {\n                return {\n                    type: \"success\",\n                    result: {\n                        ...currentCompositionMetadata,\n                        id: composition.id,\n                        defaultProps: composition.defaultProps ?? {}\n                    }\n                };\n            }\n            if (!needsResolution(composition)) {\n                validateDurationInFrames(composition.durationInFrames, {\n                    allowFloats: false,\n                    component: `in <Composition id=\"${composition.id}\">`\n                });\n                validateFps(composition.fps, `in <Composition id=\"${composition.id}\">`, false);\n                validateDimension(composition.width, \"width\", `in <Composition id=\"${composition.id}\">`);\n                validateDimension(composition.height, \"height\", `in <Composition id=\"${composition.id}\">`);\n                return {\n                    type: \"success\",\n                    result: {\n                        width: composition.width,\n                        height: composition.height,\n                        fps: composition.fps,\n                        id: composition.id,\n                        durationInFrames: composition.durationInFrames,\n                        defaultProps: composition.defaultProps ?? {},\n                        props: {\n                            ...composition.defaultProps ?? {},\n                            ...selectedEditorProps ?? {},\n                            ... true ? {} : 0\n                        },\n                        defaultCodec: null,\n                        defaultOutName: null,\n                        defaultVideoImageFormat: null,\n                        defaultPixelFormat: null\n                    }\n                };\n            }\n            if (!context[composition.id]) {\n                return null;\n            }\n            return context[composition.id];\n        }\n    }[\"useResolvedVideoConfig.useMemo4\"], [\n        composition,\n        context,\n        currentCompositionMetadata,\n        selectedEditorProps,\n        env.isPlayer\n    ]);\n};\n// src/use-video.ts\nvar useVideo = ()=>{\n    const { canvasContent, compositions, currentCompositionMetadata } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionManager);\n    const selected = compositions.find((c)=>{\n        return canvasContent?.type === \"composition\" && c.id === canvasContent.compositionId;\n    });\n    const resolved = useResolvedVideoConfig(selected?.id ?? null);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useVideo.useMemo5\": ()=>{\n            if (!resolved) {\n                return null;\n            }\n            if (resolved.type === \"error\") {\n                return null;\n            }\n            if (resolved.type === \"loading\") {\n                return null;\n            }\n            if (!selected) {\n                return null;\n            }\n            return {\n                ...resolved.result,\n                defaultProps: selected.defaultProps ?? {},\n                id: selected.id,\n                ...currentCompositionMetadata ?? {},\n                component: selected.component\n            };\n        }\n    }[\"useVideo.useMemo5\"], [\n        currentCompositionMetadata,\n        resolved,\n        selected\n    ]);\n};\n// src/timeline-position-state.ts\nvar TimelineContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    frame: {},\n    playing: false,\n    playbackRate: 1,\n    rootId: \"\",\n    imperativePlaying: {\n        current: false\n    },\n    setPlaybackRate: ()=>{\n        throw new Error(\"default\");\n    },\n    audioAndVideoTags: {\n        current: []\n    }\n});\nvar SetTimelineContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setFrame: ()=>{\n        throw new Error(\"default\");\n    },\n    setPlaying: ()=>{\n        throw new Error(\"default\");\n    }\n});\nvar makeKey = ()=>{\n    return `remotion.time-all`;\n};\nvar persistCurrentFrame = (time)=>{\n    localStorage.setItem(makeKey(), JSON.stringify(time));\n};\nvar getInitialFrameState = ()=>{\n    const item = localStorage.getItem(makeKey()) ?? \"{}\";\n    const obj = JSON.parse(item);\n    return obj;\n};\nvar getFrameForComposition = (composition)=>{\n    const item = localStorage.getItem(makeKey()) ?? \"{}\";\n    const obj = JSON.parse(item);\n    if (obj[composition] !== undefined) {\n        return Number(obj[composition]);\n    }\n    if (true) {\n        return 0;\n    }\n    return window.remotion_initialFrame ?? 0;\n};\nvar useTimelinePosition = ()=>{\n    const videoConfig = useVideo();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const env = useRemotionEnvironment();\n    if (!videoConfig) {\n        return  true ? 0 : 0;\n    }\n    const unclamped = state.frame[videoConfig.id] ?? (env.isPlayer ? 0 : getFrameForComposition(videoConfig.id));\n    return Math.min(videoConfig.durationInFrames - 1, unclamped);\n};\nvar useTimelineSetFrame = ()=>{\n    const { setFrame } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);\n    return setFrame;\n};\nvar usePlayingState = ()=>{\n    const { playing, imperativePlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const { setPlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetTimelineContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"usePlayingState.useMemo6\": ()=>[\n                playing,\n                setPlaying,\n                imperativePlaying\n            ]\n    }[\"usePlayingState.useMemo6\"], [\n        imperativePlaying,\n        playing,\n        setPlaying\n    ]);\n};\n// src/use-video-config.ts\n\n// src/CanUseRemotionHooks.tsx\n\n\nvar CanUseRemotionHooks = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nvar CanUseRemotionHooksProvider = ({ children })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, {\n        value: true,\n        children\n    });\n};\n// src/use-unsafe-video-config.ts\n\nvar useUnsafeVideoConfig = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const ctxWidth = context?.width ?? null;\n    const ctxHeight = context?.height ?? null;\n    const ctxDuration = context?.durationInFrames ?? null;\n    const video = useVideo();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useUnsafeVideoConfig.useMemo7\": ()=>{\n            if (!video) {\n                return null;\n            }\n            const { id, durationInFrames, fps, height, width, defaultProps, props, defaultCodec, defaultOutName, defaultVideoImageFormat, defaultPixelFormat } = video;\n            return {\n                id,\n                width: ctxWidth ?? width,\n                height: ctxHeight ?? height,\n                fps,\n                durationInFrames: ctxDuration ?? durationInFrames,\n                defaultProps,\n                props,\n                defaultCodec,\n                defaultOutName,\n                defaultVideoImageFormat,\n                defaultPixelFormat\n            };\n        }\n    }[\"useUnsafeVideoConfig.useMemo7\"], [\n        ctxDuration,\n        ctxHeight,\n        ctxWidth,\n        video\n    ]);\n};\n// src/use-video-config.ts\nvar useVideoConfig = ()=>{\n    const videoConfig = useUnsafeVideoConfig();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    const isPlayer = useIsPlayer();\n    if (!videoConfig) {\n        if ( false || isPlayer) {\n            throw new Error([\n                \"No video config found. Likely reasons:\",\n                \"- You are probably calling useVideoConfig() from outside the component passed to <Player />. See https://www.remotion.dev/docs/player/examples for how to set up the Player correctly.\",\n                \"- You have multiple versions of Remotion installed which causes the React context to get lost.\"\n            ].join(\"-\"));\n        }\n        throw new Error(\"No video config found. You are probably calling useVideoConfig() from a component which has not been registered as a <Composition />. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions for more information.\");\n    }\n    if (!context) {\n        throw new Error(\"Called useVideoConfig() outside a Remotion composition.\");\n    }\n    return videoConfig;\n};\n// src/freeze.tsx\n\n// src/use-current-frame.ts\n\nvar useCurrentFrame = ()=>{\n    const canUseRemotionHooks = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    const env = useRemotionEnvironment();\n    if (!canUseRemotionHooks) {\n        if (env.isPlayer) {\n            throw new Error(`useCurrentFrame can only be called inside a component that was passed to <Player>. See: https://www.remotion.dev/docs/player/examples`);\n        }\n        throw new Error(`useCurrentFrame() can only be called inside a component that was registered as a composition. See https://www.remotion.dev/docs/the-fundamentals#defining-compositions`);\n    }\n    const frame = useTimelinePosition();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const contextOffset = context ? context.cumulatedFrom + context.relativeFrom : 0;\n    return frame - contextOffset;\n};\n// src/freeze.tsx\n\nvar Freeze = ({ frame: frameToFreeze, children, active = true })=>{\n    const frame = useCurrentFrame();\n    const videoConfig = useVideoConfig();\n    if (typeof frameToFreeze === \"undefined\") {\n        throw new Error(`The <Freeze /> component requires a 'frame' prop, but none was passed.`);\n    }\n    if (typeof frameToFreeze !== \"number\") {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a number, but is of type ${typeof frameToFreeze}`);\n    }\n    if (Number.isNaN(frameToFreeze)) {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a real number, but it is NaN.`);\n    }\n    if (!Number.isFinite(frameToFreeze)) {\n        throw new Error(`The 'frame' prop of <Freeze /> must be a finite number, but it is ${frameToFreeze}.`);\n    }\n    const isActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Freeze.useMemo8[isActive]\": ()=>{\n            if (typeof active === \"boolean\") {\n                return active;\n            }\n            if (typeof active === \"function\") {\n                return active(frame);\n            }\n        }\n    }[\"Freeze.useMemo8[isActive]\"], [\n        active,\n        frame\n    ]);\n    const timelineContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const relativeFrom = sequenceContext?.relativeFrom ?? 0;\n    const timelineValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Freeze.useMemo8[timelineValue]\": ()=>{\n            if (!isActive) {\n                return timelineContext;\n            }\n            return {\n                ...timelineContext,\n                playing: false,\n                imperativePlaying: {\n                    current: false\n                },\n                frame: {\n                    [videoConfig.id]: frameToFreeze + relativeFrom\n                }\n            };\n        }\n    }[\"Freeze.useMemo8[timelineValue]\"], [\n        isActive,\n        timelineContext,\n        videoConfig.id,\n        frameToFreeze,\n        relativeFrom\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {\n        value: timelineValue,\n        children\n    });\n};\n// src/Sequence.tsx\n\nvar RegularSequenceRefForwardingFunction = ({ from = 0, durationInFrames = Infinity, children, name, height, width, showInTimeline = true, _remotionInternalLoopDisplay: loopDisplay, _remotionInternalStack: stack, _remotionInternalPremountDisplay: premountDisplay, _remotionInternalPostmountDisplay: postmountDisplay, ...other }, ref)=>{\n    const { layout = \"absolute-fill\" } = other;\n    const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"RegularSequenceRefForwardingFunction.useState5\": ()=>String(Math.random())\n    }[\"RegularSequenceRefForwardingFunction.useState5\"]);\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { rootId } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const cumulatedFrom = parentSequence ? parentSequence.cumulatedFrom + parentSequence.relativeFrom : 0;\n    const nonce = useNonce();\n    if (layout !== \"absolute-fill\" && layout !== \"none\") {\n        throw new TypeError(`The layout prop of <Sequence /> expects either \"absolute-fill\" or \"none\", but you passed: ${layout}`);\n    }\n    if (layout === \"none\" && typeof other.style !== \"undefined\") {\n        throw new TypeError('If layout=\"none\", you may not pass a style.');\n    }\n    if (typeof durationInFrames !== \"number\") {\n        throw new TypeError(`You passed to durationInFrames an argument of type ${typeof durationInFrames}, but it must be a number.`);\n    }\n    if (durationInFrames <= 0) {\n        throw new TypeError(`durationInFrames must be positive, but got ${durationInFrames}`);\n    }\n    if (typeof from !== \"number\") {\n        throw new TypeError(`You passed to the \"from\" props of your <Sequence> an argument of type ${typeof from}, but it must be a number.`);\n    }\n    if (!Number.isFinite(from)) {\n        throw new TypeError(`The \"from\" prop of a sequence must be finite, but got ${from}.`);\n    }\n    const absoluteFrame = useTimelinePosition();\n    const videoConfig = useVideoConfig();\n    const parentSequenceDuration = parentSequence ? Math.min(parentSequence.durationInFrames - from, durationInFrames) : durationInFrames;\n    const actualDurationInFrames = Math.max(0, Math.min(videoConfig.durationInFrames - from, parentSequenceDuration));\n    const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);\n    const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);\n    const premounting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RegularSequenceRefForwardingFunction.useMemo9[premounting]\": ()=>{\n            return parentSequence?.premounting || Boolean(other._remotionInternalIsPremounting);\n        }\n    }[\"RegularSequenceRefForwardingFunction.useMemo9[premounting]\"], [\n        other._remotionInternalIsPremounting,\n        parentSequence?.premounting\n    ]);\n    const postmounting = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RegularSequenceRefForwardingFunction.useMemo9[postmounting]\": ()=>{\n            return parentSequence?.postmounting || Boolean(other._remotionInternalIsPostmounting);\n        }\n    }[\"RegularSequenceRefForwardingFunction.useMemo9[postmounting]\"], [\n        other._remotionInternalIsPostmounting,\n        parentSequence?.postmounting\n    ]);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RegularSequenceRefForwardingFunction.useMemo9[contextValue]\": ()=>{\n            return {\n                cumulatedFrom,\n                relativeFrom: from,\n                durationInFrames: actualDurationInFrames,\n                parentFrom: parentSequence?.relativeFrom ?? 0,\n                id,\n                height: height ?? parentSequence?.height ?? null,\n                width: width ?? parentSequence?.width ?? null,\n                premounting,\n                postmounting\n            };\n        }\n    }[\"RegularSequenceRefForwardingFunction.useMemo9[contextValue]\"], [\n        cumulatedFrom,\n        from,\n        actualDurationInFrames,\n        parentSequence,\n        id,\n        height,\n        width,\n        premounting,\n        postmounting\n    ]);\n    const timelineClipName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RegularSequenceRefForwardingFunction.useMemo9[timelineClipName]\": ()=>{\n            return name ?? \"\";\n        }\n    }[\"RegularSequenceRefForwardingFunction.useMemo9[timelineClipName]\"], [\n        name\n    ]);\n    const env = useRemotionEnvironment();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"RegularSequenceRefForwardingFunction.useEffect3\": ()=>{\n            if (!env.isStudio) {\n                return;\n            }\n            registerSequence({\n                from,\n                duration: actualDurationInFrames,\n                id,\n                displayName: timelineClipName,\n                parent: parentSequence?.id ?? null,\n                type: \"sequence\",\n                rootId,\n                showInTimeline,\n                nonce,\n                loopDisplay,\n                stack: stack ?? null,\n                premountDisplay: premountDisplay ?? null,\n                postmountDisplay: postmountDisplay ?? null\n            });\n            return ({\n                \"RegularSequenceRefForwardingFunction.useEffect3\": ()=>{\n                    unregisterSequence(id);\n                }\n            })[\"RegularSequenceRefForwardingFunction.useEffect3\"];\n        }\n    }[\"RegularSequenceRefForwardingFunction.useEffect3\"], [\n        durationInFrames,\n        id,\n        name,\n        registerSequence,\n        timelineClipName,\n        unregisterSequence,\n        parentSequence?.id,\n        actualDurationInFrames,\n        rootId,\n        from,\n        showInTimeline,\n        nonce,\n        loopDisplay,\n        stack,\n        premountDisplay,\n        postmountDisplay,\n        env.isStudio\n    ]);\n    const endThreshold = Math.ceil(cumulatedFrom + from + durationInFrames - 1);\n    const content = absoluteFrame < cumulatedFrom + from ? null : absoluteFrame > endThreshold ? null : children;\n    const styleIfThere = other.layout === \"none\" ? undefined : other.style;\n    const defaultStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RegularSequenceRefForwardingFunction.useMemo9[defaultStyle]\": ()=>{\n            return {\n                flexDirection: undefined,\n                ...width ? {\n                    width\n                } : {},\n                ...height ? {\n                    height\n                } : {},\n                ...styleIfThere ?? {}\n            };\n        }\n    }[\"RegularSequenceRefForwardingFunction.useMemo9[defaultStyle]\"], [\n        height,\n        styleIfThere,\n        width\n    ]);\n    if (ref !== null && layout === \"none\") {\n        throw new TypeError('It is not supported to pass both a `ref` and `layout=\"none\"` to <Sequence />.');\n    }\n    const isSequenceHidden = hidden[id] ?? false;\n    if (isSequenceHidden) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, {\n        value: contextValue,\n        children: content === null ? null : other.layout === \"none\" ? content : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AbsoluteFill, {\n            ref,\n            style: defaultStyle,\n            className: other.className,\n            children: content\n        })\n    });\n};\nvar RegularSequence = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(RegularSequenceRefForwardingFunction);\nvar PremountedPostmountedSequenceRefForwardingFunction = (props, ref)=>{\n    const frame = useCurrentFrame();\n    if (props.layout === \"none\") {\n        throw new Error('`<Sequence>` with `premountFor` and `postmountFor` props does not support layout=\"none\"');\n    }\n    const { style: passedStyle, from = 0, durationInFrames = Infinity, premountFor = 0, postmountFor = 0, styleWhilePremounted, styleWhilePostmounted, ...otherProps } = props;\n    const endThreshold = Math.ceil(from + durationInFrames - 1);\n    const premountingActive = frame < from && frame >= from - premountFor;\n    const postmountingActive = frame > endThreshold && frame <= endThreshold + postmountFor;\n    const freezeFrame = premountingActive ? from : postmountingActive ? from + durationInFrames - 1 : 0;\n    const isFreezingActive = premountingActive || postmountingActive;\n    const style = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"PremountedPostmountedSequenceRefForwardingFunction.useMemo9[style]\": ()=>{\n            return {\n                ...passedStyle,\n                opacity: premountingActive || postmountingActive ? 0 : 1,\n                pointerEvents: premountingActive || postmountingActive ? \"none\" : passedStyle?.pointerEvents ?? undefined,\n                ...premountingActive ? styleWhilePremounted : {},\n                ...postmountingActive ? styleWhilePostmounted : {}\n            };\n        }\n    }[\"PremountedPostmountedSequenceRefForwardingFunction.useMemo9[style]\"], [\n        passedStyle,\n        premountingActive,\n        postmountingActive,\n        styleWhilePremounted,\n        styleWhilePostmounted\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Freeze, {\n        frame: freezeFrame,\n        active: isFreezingActive,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n            ref,\n            from,\n            durationInFrames,\n            style,\n            _remotionInternalPremountDisplay: premountFor,\n            _remotionInternalPostmountDisplay: postmountFor,\n            _remotionInternalIsPremounting: premountingActive,\n            _remotionInternalIsPostmounting: postmountingActive,\n            ...otherProps\n        })\n    });\n};\nvar PremountedPostmountedSequence = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(PremountedPostmountedSequenceRefForwardingFunction);\nvar SequenceRefForwardingFunction = (props, ref)=>{\n    const env = useRemotionEnvironment();\n    if (props.layout !== \"none\" && !env.isRendering) {\n        if (props.premountFor || props.postmountFor) {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PremountedPostmountedSequence, {\n                ...props,\n                ref\n            });\n        }\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RegularSequence, {\n        ...props,\n        ref\n    });\n};\nvar Sequence = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SequenceRefForwardingFunction);\n// src/animated-image/AnimatedImage.tsx\n\n// src/cancel-render.ts\nvar isErrorLike = (err)=>{\n    if (err instanceof Error) {\n        return true;\n    }\n    if (err === null) {\n        return false;\n    }\n    if (typeof err !== \"object\") {\n        return false;\n    }\n    if (!(\"stack\" in err)) {\n        return false;\n    }\n    if (typeof err.stack !== \"string\") {\n        return false;\n    }\n    if (!(\"message\" in err)) {\n        return false;\n    }\n    if (typeof err.message !== \"string\") {\n        return false;\n    }\n    return true;\n};\nfunction cancelRender(err) {\n    let error;\n    if (isErrorLike(err)) {\n        error = err;\n        if (!error.stack) {\n            error.stack = new Error(error.message).stack;\n        }\n    } else if (typeof err === \"string\") {\n        error = Error(err);\n    } else {\n        error = Error(\"Rendering was cancelled\");\n    }\n    window.remotion_cancelledError = error.stack;\n    throw error;\n}\n// src/use-delay-render.ts\n\n// src/log.ts\nvar logLevels = [\n    \"trace\",\n    \"verbose\",\n    \"info\",\n    \"warn\",\n    \"error\"\n];\nvar getNumberForLogLevel = (level)=>{\n    return logLevels.indexOf(level);\n};\nvar isEqualOrBelowLogLevel = (currentLevel, level)=>{\n    return getNumberForLogLevel(currentLevel) <= getNumberForLogLevel(level);\n};\nvar Log = {\n    trace: (logLevel, ...args)=>{\n        if (isEqualOrBelowLogLevel(logLevel, \"trace\")) {\n            return console.log(...args);\n        }\n    },\n    verbose: (logLevel, ...args)=>{\n        if (isEqualOrBelowLogLevel(logLevel, \"verbose\")) {\n            return console.log(...args);\n        }\n    },\n    info: (logLevel, ...args)=>{\n        if (isEqualOrBelowLogLevel(logLevel, \"info\")) {\n            return console.log(...args);\n        }\n    },\n    warn: (logLevel, ...args)=>{\n        if (isEqualOrBelowLogLevel(logLevel, \"warn\")) {\n            return console.warn(...args);\n        }\n    },\n    error: (...args)=>{\n        return console.error(...args);\n    }\n};\n// src/delay-render.ts\nif (false) {}\nvar handles = [];\nif (false) {}\nvar DELAY_RENDER_CALLSTACK_TOKEN = \"The delayRender was called:\";\nvar DELAY_RENDER_RETRIES_LEFT = \"Retries left: \";\nvar DELAY_RENDER_RETRY_TOKEN = \"- Rendering the frame will be retried.\";\nvar DELAY_RENDER_CLEAR_TOKEN = \"handle was cleared after\";\nvar defaultTimeout = 30000;\nvar delayRenderInternal = (environment, label, options)=>{\n    if (typeof label !== \"string\" && typeof label !== \"undefined\") {\n        throw new Error(\"The label parameter of delayRender() must be a string or undefined, got: \" + JSON.stringify(label));\n    }\n    const handle = Math.random();\n    handles.push(handle);\n    const called = Error().stack?.replace(/^Error/g, \"\") ?? \"\";\n    if (environment.isRendering) {\n        const timeoutToUse = (options?.timeoutInMilliseconds ?? ( true ? defaultTimeout : 0)) - 2000;\n        if (false) {}\n    }\n    if (false) {}\n    return handle;\n};\nvar delayRender = (label, options)=>{\n    return delayRenderInternal(getRemotionEnvironment(), label, options);\n};\nvar continueRenderInternal = (handle, environment)=>{\n    if (typeof handle === \"undefined\") {\n        throw new TypeError(\"The continueRender() method must be called with a parameter that is the return value of delayRender(). No value was passed.\");\n    }\n    if (typeof handle !== \"number\") {\n        throw new TypeError(\"The parameter passed into continueRender() must be the return value of delayRender() which is a number. Got: \" + JSON.stringify(handle));\n    }\n    handles = handles.filter((h)=>{\n        if (h === handle) {\n            if (environment.isRendering) {\n                if (!window.remotion_delayRenderTimeouts[handle]) {\n                    return false;\n                }\n                const { label, startTime, timeout } = window.remotion_delayRenderTimeouts[handle];\n                clearTimeout(timeout);\n                const message = [\n                    label ? `delayRender() \"${label}\"` : \"A delayRender()\",\n                    DELAY_RENDER_CLEAR_TOKEN,\n                    `${Date.now() - startTime}ms`\n                ].filter(truthy).join(\" \");\n                Log.verbose(window.remotion_logLevel, message);\n                delete window.remotion_delayRenderTimeouts[handle];\n            }\n            return false;\n        }\n        return true;\n    });\n    if (handles.length === 0 && \"undefined\" !== \"undefined\") {}\n};\nvar continueRender = (handle)=>{\n    continueRenderInternal(handle, getRemotionEnvironment());\n};\n// src/use-delay-render.ts\nvar useDelayRender = ()=>{\n    const environment = useRemotionEnvironment();\n    const delayRender2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDelayRender.useCallback4[delayRender2]\": (label, options)=>{\n            return delayRenderInternal(environment, label, options);\n        }\n    }[\"useDelayRender.useCallback4[delayRender2]\"], [\n        environment\n    ]);\n    const continueRender2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useDelayRender.useCallback4[continueRender2]\": (handle)=>{\n            continueRenderInternal(handle, environment);\n        }\n    }[\"useDelayRender.useCallback4[continueRender2]\"], [\n        environment\n    ]);\n    return {\n        delayRender: delayRender2,\n        continueRender: continueRender2\n    };\n};\n// src/animated-image/canvas.tsx\n\n\nvar calcArgs = (fit, frameSize, canvasSize)=>{\n    switch(fit){\n        case \"fill\":\n            {\n                return [\n                    0,\n                    0,\n                    frameSize.width,\n                    frameSize.height,\n                    0,\n                    0,\n                    canvasSize.width,\n                    canvasSize.height\n                ];\n            }\n        case \"contain\":\n            {\n                const ratio = Math.min(canvasSize.width / frameSize.width, canvasSize.height / frameSize.height);\n                const centerX = (canvasSize.width - frameSize.width * ratio) / 2;\n                const centerY = (canvasSize.height - frameSize.height * ratio) / 2;\n                return [\n                    0,\n                    0,\n                    frameSize.width,\n                    frameSize.height,\n                    centerX,\n                    centerY,\n                    frameSize.width * ratio,\n                    frameSize.height * ratio\n                ];\n            }\n        case \"cover\":\n            {\n                const ratio = Math.max(canvasSize.width / frameSize.width, canvasSize.height / frameSize.height);\n                const centerX = (canvasSize.width - frameSize.width * ratio) / 2;\n                const centerY = (canvasSize.height - frameSize.height * ratio) / 2;\n                return [\n                    0,\n                    0,\n                    frameSize.width,\n                    frameSize.height,\n                    centerX,\n                    centerY,\n                    frameSize.width * ratio,\n                    frameSize.height * ratio\n                ];\n            }\n        default:\n            throw new Error(\"Unknown fit: \" + fit);\n    }\n};\nvar CanvasRefForwardingFunction = ({ width, height, fit, className, style }, ref)=>{\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const draw = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CanvasRefForwardingFunction.useCallback5[draw]\": (imageData)=>{\n            const canvas = canvasRef.current;\n            const canvasWidth = width ?? imageData.displayWidth;\n            const canvasHeight = height ?? imageData.displayHeight;\n            if (!canvas) {\n                throw new Error(\"Canvas ref is not set\");\n            }\n            const ctx = canvasRef.current?.getContext(\"2d\");\n            if (!ctx) {\n                throw new Error(\"Could not get 2d context\");\n            }\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n            ctx.drawImage(imageData, ...calcArgs(fit, {\n                height: imageData.displayHeight,\n                width: imageData.displayWidth\n            }, {\n                width: canvasWidth,\n                height: canvasHeight\n            }));\n        }\n    }[\"CanvasRefForwardingFunction.useCallback5[draw]\"], [\n        fit,\n        height,\n        width\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"CanvasRefForwardingFunction.useImperativeHandle3\": ()=>{\n            return {\n                draw,\n                getCanvas: ({\n                    \"CanvasRefForwardingFunction.useImperativeHandle3\": ()=>{\n                        if (!canvasRef.current) {\n                            throw new Error(\"Canvas ref is not set\");\n                        }\n                        return canvasRef.current;\n                    }\n                })[\"CanvasRefForwardingFunction.useImperativeHandle3\"],\n                clear: ({\n                    \"CanvasRefForwardingFunction.useImperativeHandle3\": ()=>{\n                        const ctx = canvasRef.current?.getContext(\"2d\");\n                        if (!ctx) {\n                            throw new Error(\"Could not get 2d context\");\n                        }\n                        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n                    }\n                })[\"CanvasRefForwardingFunction.useImperativeHandle3\"]\n            };\n        }\n    }[\"CanvasRefForwardingFunction.useImperativeHandle3\"], [\n        draw\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"canvas\", {\n        ref: canvasRef,\n        className,\n        style\n    });\n};\nvar Canvas = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(CanvasRefForwardingFunction);\n// src/animated-image/decode-image.ts\nvar CACHE_SIZE = 5;\nvar getActualTime = ({ loopBehavior, durationFound, timeInSec })=>{\n    return loopBehavior === \"loop\" ? durationFound ? timeInSec % durationFound : timeInSec : Math.min(timeInSec, durationFound || Infinity);\n};\nvar decodeImage = async ({ resolvedSrc, signal, currentTime, initialLoopBehavior })=>{\n    if (typeof ImageDecoder === \"undefined\") {\n        throw new Error(\"Your browser does not support the WebCodecs ImageDecoder API.\");\n    }\n    const res = await fetch(resolvedSrc, {\n        signal\n    });\n    const { body } = res;\n    if (!body) {\n        throw new Error(\"Got no body\");\n    }\n    const decoder = new ImageDecoder({\n        data: body,\n        type: res.headers.get(\"Content-Type\") || \"image/gif\"\n    });\n    await decoder.completed;\n    const { selectedTrack } = decoder.tracks;\n    if (!selectedTrack) {\n        throw new Error(\"No selected track\");\n    }\n    const cache = [];\n    let durationFound = null;\n    const getFrameByIndex = async (frameIndex)=>{\n        const foundInCache = cache.find((c)=>c.frameIndex === frameIndex);\n        if (foundInCache && foundInCache.frame) {\n            return foundInCache;\n        }\n        const frame = await decoder.decode({\n            frameIndex,\n            completeFramesOnly: true\n        });\n        if (foundInCache) {\n            foundInCache.frame = frame.image;\n        } else {\n            cache.push({\n                frame: frame.image,\n                frameIndex,\n                timeInSeconds: frame.image.timestamp / 1e6\n            });\n        }\n        return {\n            frame: frame.image,\n            frameIndex,\n            timeInSeconds: frame.image.timestamp / 1e6\n        };\n    };\n    const clearCache = (closeToTimeInSec)=>{\n        const itemsInCache = cache.filter((c)=>c.frame);\n        const sortByClosestToCurrentTime = itemsInCache.sort((a, b)=>{\n            const aDiff = Math.abs(a.timeInSeconds - closeToTimeInSec);\n            const bDiff = Math.abs(b.timeInSeconds - closeToTimeInSec);\n            return aDiff - bDiff;\n        });\n        for(let i = 0; i < sortByClosestToCurrentTime.length; i++){\n            if (i < CACHE_SIZE) {\n                continue;\n            }\n            const item = sortByClosestToCurrentTime[i];\n            item.frame = null;\n        }\n    };\n    const ensureFrameBeforeAndAfter = async ({ timeInSec, loopBehavior })=>{\n        const actualTimeInSec = getActualTime({\n            durationFound,\n            loopBehavior,\n            timeInSec\n        });\n        const framesBefore = cache.filter((c)=>c.timeInSeconds <= actualTimeInSec);\n        const biggestIndex = framesBefore.map((c)=>c.frameIndex).reduce((a, b)=>Math.max(a, b), 0);\n        let i = biggestIndex;\n        while(true){\n            const f = await getFrameByIndex(i);\n            i++;\n            if (!f.frame) {\n                throw new Error(\"No frame found\");\n            }\n            if (!f.frame.duration) {\n                break;\n            }\n            if (i === selectedTrack.frameCount && durationFound === null) {\n                const duration = (f.frame.timestamp + f.frame.duration) / 1e6;\n                durationFound = duration;\n            }\n            if (f.timeInSeconds > actualTimeInSec || i === selectedTrack.frameCount) {\n                break;\n            }\n        }\n        if (selectedTrack.frameCount - biggestIndex < 3 && loopBehavior === \"loop\") {\n            await getFrameByIndex(0);\n        }\n        clearCache(actualTimeInSec);\n    };\n    await ensureFrameBeforeAndAfter({\n        timeInSec: currentTime,\n        loopBehavior: initialLoopBehavior\n    });\n    await ensureFrameBeforeAndAfter({\n        timeInSec: currentTime,\n        loopBehavior: initialLoopBehavior\n    });\n    const getFrame = async (timeInSec, loopBehavior)=>{\n        if (durationFound !== null && timeInSec > durationFound && loopBehavior === \"clear-after-finish\") {\n            return null;\n        }\n        const actualTimeInSec = getActualTime({\n            loopBehavior,\n            durationFound,\n            timeInSec\n        });\n        await ensureFrameBeforeAndAfter({\n            timeInSec: actualTimeInSec,\n            loopBehavior\n        });\n        const itemsInCache = cache.filter((c)=>c.frame);\n        const closest = itemsInCache.reduce((a, b)=>{\n            const aDiff = Math.abs(a.timeInSeconds - actualTimeInSec);\n            const bDiff = Math.abs(b.timeInSeconds - actualTimeInSec);\n            return aDiff < bDiff ? a : b;\n        });\n        if (!closest.frame) {\n            throw new Error(\"No frame found\");\n        }\n        return closest;\n    };\n    return {\n        getFrame,\n        frameCount: selectedTrack.frameCount\n    };\n};\n// src/animated-image/resolve-image-source.tsx\nvar resolveAnimatedImageSource = (src)=>{\n    if (true) {\n        return src;\n    }\n    return new URL(src, window.origin).href;\n};\n// src/animated-image/AnimatedImage.tsx\n\nvar AnimatedImage = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ src, width, height, onError, loopBehavior = \"loop\", playbackRate = 1, fit = \"fill\", ...props }, canvasRef)=>{\n    const mountState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        isMounted: true\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"AnimatedImage.useEffect4\": ()=>{\n            const { current } = mountState;\n            current.isMounted = true;\n            return ({\n                \"AnimatedImage.useEffect4\": ()=>{\n                    current.isMounted = false;\n                }\n            })[\"AnimatedImage.useEffect4\"];\n        }\n    }[\"AnimatedImage.useEffect4\"], []);\n    const resolvedSrc = resolveAnimatedImageSource(src);\n    const [imageDecoder, setImageDecoder] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    const [decodeHandle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"AnimatedImage.useState6\": ()=>delayRender2(`Rendering <AnimatedImage/> with src=\"${resolvedSrc}\"`)\n    }[\"AnimatedImage.useState6\"]);\n    const frame = useCurrentFrame();\n    const { fps } = useVideoConfig();\n    const currentTime = frame / playbackRate / fps;\n    const currentTimeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(currentTime);\n    currentTimeRef.current = currentTime;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(canvasRef, {\n        \"AnimatedImage.useImperativeHandle4\": ()=>{\n            const c = ref.current?.getCanvas();\n            if (!c) {\n                throw new Error(\"Canvas ref is not set\");\n            }\n            return c;\n        }\n    }[\"AnimatedImage.useImperativeHandle4\"], []);\n    const [initialLoopBehavior] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"AnimatedImage.useState6\": ()=>loopBehavior\n    }[\"AnimatedImage.useState6\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"AnimatedImage.useEffect4\": ()=>{\n            const controller = new AbortController;\n            decodeImage({\n                resolvedSrc,\n                signal: controller.signal,\n                currentTime: currentTimeRef.current,\n                initialLoopBehavior\n            }).then({\n                \"AnimatedImage.useEffect4\": (d)=>{\n                    setImageDecoder(d);\n                    continueRender2(decodeHandle);\n                }\n            }[\"AnimatedImage.useEffect4\"]).catch({\n                \"AnimatedImage.useEffect4\": (err)=>{\n                    if (err.name === \"AbortError\") {\n                        continueRender2(decodeHandle);\n                        return;\n                    }\n                    if (onError) {\n                        onError?.(err);\n                        continueRender2(decodeHandle);\n                    } else {\n                        cancelRender(err);\n                    }\n                }\n            }[\"AnimatedImage.useEffect4\"]);\n            return ({\n                \"AnimatedImage.useEffect4\": ()=>{\n                    controller.abort();\n                }\n            })[\"AnimatedImage.useEffect4\"];\n        }\n    }[\"AnimatedImage.useEffect4\"], [\n        resolvedSrc,\n        decodeHandle,\n        onError,\n        initialLoopBehavior,\n        continueRender2\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n        \"AnimatedImage.useLayoutEffect\": ()=>{\n            if (!imageDecoder) {\n                return;\n            }\n            const delay = delayRender2(`Rendering frame at ${currentTime} of <AnimatedImage src=\"${src}\"/>`);\n            imageDecoder.getFrame(currentTime, loopBehavior).then({\n                \"AnimatedImage.useLayoutEffect\": (videoFrame)=>{\n                    if (mountState.current.isMounted) {\n                        if (videoFrame === null) {\n                            ref.current?.clear();\n                        } else {\n                            ref.current?.draw(videoFrame.frame);\n                        }\n                    }\n                    continueRender2(delay);\n                }\n            }[\"AnimatedImage.useLayoutEffect\"]).catch({\n                \"AnimatedImage.useLayoutEffect\": (err)=>{\n                    if (onError) {\n                        onError(err);\n                        continueRender2(delay);\n                    } else {\n                        cancelRender(err);\n                    }\n                }\n            }[\"AnimatedImage.useLayoutEffect\"]);\n        }\n    }[\"AnimatedImage.useLayoutEffect\"], [\n        currentTime,\n        imageDecoder,\n        loopBehavior,\n        onError,\n        src,\n        continueRender2,\n        delayRender2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Canvas, {\n        ref,\n        width,\n        height,\n        fit,\n        ...props\n    });\n});\n// src/Artifact.tsx\n\n// src/RenderAssetManager.tsx\n\n// src/validation/validate-artifact.ts\nvar validateArtifactFilename = (filename)=>{\n    if (typeof filename !== \"string\") {\n        throw new TypeError(`The \"filename\" must be a string, but you passed a value of type ${typeof filename}`);\n    }\n    if (filename.trim() === \"\") {\n        throw new Error(\"The `filename` must not be empty\");\n    }\n    if (!filename.match(/^([0-9a-zA-Z-!_.*'()/:&$@=;+,?]+)/g)) {\n        throw new Error('The `filename` must match \"/^([0-9a-zA-Z-!_.*\\'()/:&$@=;+,?]+)/g\". Use forward slashes only, even on Windows.');\n    }\n};\nvar validateContent = (content)=>{\n    if (typeof content !== \"string\" && !(content instanceof Uint8Array)) {\n        throw new TypeError(`The \"content\" must be a string or Uint8Array, but you passed a value of type ${typeof content}`);\n    }\n    if (typeof content === \"string\" && content.trim() === \"\") {\n        throw new Error(\"The `content` must not be empty\");\n    }\n};\nvar validateRenderAsset = (artifact)=>{\n    if (artifact.type !== \"artifact\") {\n        return;\n    }\n    validateArtifactFilename(artifact.filename);\n    if (artifact.contentType === \"thumbnail\") {\n        return;\n    }\n    validateContent(artifact.content);\n};\n// src/RenderAssetManager.tsx\n\nvar RenderAssetManager = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    registerRenderAsset: ()=>{\n        return;\n    },\n    unregisterRenderAsset: ()=>{\n        return;\n    },\n    renderAssets: []\n});\nvar RenderAssetManagerProvider = ({ children })=>{\n    const [renderAssets, setRenderAssets] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const registerRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"RenderAssetManagerProvider.useCallback6[registerRenderAsset]\": (renderAsset)=>{\n            validateRenderAsset(renderAsset);\n            setRenderAssets({\n                \"RenderAssetManagerProvider.useCallback6[registerRenderAsset]\": (assets)=>{\n                    return [\n                        ...assets,\n                        renderAsset\n                    ];\n                }\n            }[\"RenderAssetManagerProvider.useCallback6[registerRenderAsset]\"]);\n        }\n    }[\"RenderAssetManagerProvider.useCallback6[registerRenderAsset]\"], []);\n    const unregisterRenderAsset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\": (id)=>{\n            setRenderAssets({\n                \"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\": (assts)=>{\n                    return assts.filter({\n                        \"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\": (a)=>a.id !== id\n                    }[\"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\"]);\n                }\n            }[\"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\"]);\n        }\n    }[\"RenderAssetManagerProvider.useCallback6[unregisterRenderAsset]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n        \"RenderAssetManagerProvider.useLayoutEffect2\": ()=>{\n            if (false) {}\n        }\n    }[\"RenderAssetManagerProvider.useLayoutEffect2\"], [\n        renderAssets\n    ]);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RenderAssetManagerProvider.useMemo10[contextValue]\": ()=>{\n            return {\n                registerRenderAsset,\n                unregisterRenderAsset,\n                renderAssets\n            };\n        }\n    }[\"RenderAssetManagerProvider.useMemo10[contextValue]\"], [\n        renderAssets,\n        registerRenderAsset,\n        unregisterRenderAsset\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, {\n        value: contextValue,\n        children\n    });\n};\n// src/Artifact.tsx\nvar ArtifactThumbnail = Symbol(\"Thumbnail\");\nvar Artifact = ({ filename, content, downloadBehavior })=>{\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    const env = useRemotionEnvironment();\n    const frame = useCurrentFrame();\n    const [id] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"Artifact.useState8\": ()=>{\n            return String(Math.random());\n        }\n    }[\"Artifact.useState8\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Artifact.useEffect5\": ()=>{\n            if (!env.isRendering) {\n                return;\n            }\n            if (content instanceof Uint8Array) {\n                registerRenderAsset({\n                    type: \"artifact\",\n                    id,\n                    content: btoa(new TextDecoder(\"utf8\").decode(content)),\n                    filename,\n                    frame,\n                    contentType: \"binary\",\n                    downloadBehavior: downloadBehavior ?? null\n                });\n            } else if (content === ArtifactThumbnail) {\n                registerRenderAsset({\n                    type: \"artifact\",\n                    id,\n                    filename,\n                    frame,\n                    contentType: \"thumbnail\",\n                    downloadBehavior: downloadBehavior ?? null\n                });\n            } else {\n                registerRenderAsset({\n                    type: \"artifact\",\n                    id,\n                    content,\n                    filename,\n                    frame,\n                    contentType: \"text\",\n                    downloadBehavior: downloadBehavior ?? null\n                });\n            }\n            return ({\n                \"Artifact.useEffect5\": ()=>{\n                    return unregisterRenderAsset(id);\n                }\n            })[\"Artifact.useEffect5\"];\n        }\n    }[\"Artifact.useEffect5\"], [\n        content,\n        env.isRendering,\n        filename,\n        frame,\n        id,\n        registerRenderAsset,\n        unregisterRenderAsset,\n        downloadBehavior\n    ]);\n    return null;\n};\nArtifact.Thumbnail = ArtifactThumbnail;\n// src/audio/Audio.tsx\n\n// src/absolute-src.ts\nvar getAbsoluteSrc = (relativeSrc)=>{\n    if (true) {\n        return relativeSrc;\n    }\n    if (relativeSrc.startsWith(\"http://\") || relativeSrc.startsWith(\"https://\") || relativeSrc.startsWith(\"file://\") || relativeSrc.startsWith(\"blob:\") || relativeSrc.startsWith(\"data:\")) {\n        return relativeSrc;\n    }\n    return new URL(relativeSrc, window.origin).href;\n};\n// src/calculate-loop.ts\nvar calculateLoopDuration = ({ endAt, mediaDuration, playbackRate, startFrom })=>{\n    let duration = mediaDuration;\n    if (typeof endAt !== \"undefined\") {\n        duration = endAt;\n    }\n    if (typeof startFrom !== \"undefined\") {\n        duration -= startFrom;\n    }\n    const actualDuration = duration / playbackRate;\n    return Math.floor(actualDuration);\n};\n// src/loop/index.tsx\n\n\nvar LoopContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar useLoop = ()=>{\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LoopContext);\n};\nvar Loop = ({ durationInFrames, times = Infinity, children, name, ...props })=>{\n    const currentFrame = useCurrentFrame();\n    const { durationInFrames: compDuration } = useVideoConfig();\n    validateDurationInFrames(durationInFrames, {\n        component: \"of the <Loop /> component\",\n        allowFloats: true\n    });\n    if (typeof times !== \"number\") {\n        throw new TypeError(`You passed to \"times\" an argument of type ${typeof times}, but it must be a number.`);\n    }\n    if (times !== Infinity && times % 1 !== 0) {\n        throw new TypeError(`The \"times\" prop of a loop must be an integer, but got ${times}.`);\n    }\n    if (times < 0) {\n        throw new TypeError(`The \"times\" prop of a loop must be at least 0, but got ${times}`);\n    }\n    const maxTimes = Math.ceil(compDuration / durationInFrames);\n    const actualTimes = Math.min(maxTimes, times);\n    const style = props.layout === \"none\" ? undefined : props.style;\n    const maxFrame = durationInFrames * (actualTimes - 1);\n    const iteration = Math.floor(currentFrame / durationInFrames);\n    const start = iteration * durationInFrames;\n    const from = Math.min(start, maxFrame);\n    const loopDisplay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Loop.useMemo11[loopDisplay]\": ()=>{\n            return {\n                numberOfTimes: actualTimes,\n                startOffset: -from,\n                durationInFrames\n            };\n        }\n    }[\"Loop.useMemo11[loopDisplay]\"], [\n        actualTimes,\n        durationInFrames,\n        from\n    ]);\n    const loopContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Loop.useMemo11[loopContext]\": ()=>{\n            return {\n                iteration: Math.floor(currentFrame / durationInFrames),\n                durationInFrames\n            };\n        }\n    }[\"Loop.useMemo11[loopContext]\"], [\n        currentFrame,\n        durationInFrames\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LoopContext.Provider, {\n        value: loopContext,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n            durationInFrames,\n            from,\n            name: name ?? \"<Loop>\",\n            _remotionInternalLoopDisplay: loopDisplay,\n            layout: props.layout,\n            style,\n            children\n        })\n    });\n};\nLoop.useLoop = useLoop;\n// src/prefetch.ts\n\n// src/playback-logging.ts\nvar playbackLogging = ({ logLevel, tag, message, mountTime })=>{\n    const tags = [\n        mountTime ? Date.now() - mountTime + \"ms \" : null,\n        tag\n    ].filter(Boolean).join(\" \");\n    Log.trace(logLevel, `[${tags}]`, message);\n};\n// src/prefetch-state.tsx\n\n\nvar PreloadContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar preloads = {};\nvar updaters = [];\nvar setPreloads = (updater)=>{\n    preloads = updater(preloads);\n    updaters.forEach((u)=>u());\n};\nvar PrefetchProvider = ({ children })=>{\n    const [_preloads, _setPreloads] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"PrefetchProvider.useState9\": ()=>preloads\n    }[\"PrefetchProvider.useState9\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"PrefetchProvider.useEffect6\": ()=>{\n            const updaterFunction = {\n                \"PrefetchProvider.useEffect6.updaterFunction\": ()=>{\n                    _setPreloads(preloads);\n                }\n            }[\"PrefetchProvider.useEffect6.updaterFunction\"];\n            updaters.push(updaterFunction);\n            return ({\n                \"PrefetchProvider.useEffect6\": ()=>{\n                    updaters = updaters.filter({\n                        \"PrefetchProvider.useEffect6\": (u)=>u !== updaterFunction\n                    }[\"PrefetchProvider.useEffect6\"]);\n                }\n            })[\"PrefetchProvider.useEffect6\"];\n        }\n    }[\"PrefetchProvider.useEffect6\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, {\n        value: _preloads,\n        children\n    });\n};\n// src/prefetch.ts\nvar removeAndGetHashFragment = (src)=>{\n    const hashIndex = src.indexOf(\"#\");\n    if (hashIndex === -1) {\n        return null;\n    }\n    return hashIndex;\n};\nvar getSrcWithoutHash = (src)=>{\n    const hashIndex = removeAndGetHashFragment(src);\n    if (hashIndex === null) {\n        return src;\n    }\n    return src.slice(0, hashIndex);\n};\nvar usePreload = (src)=>{\n    const preloads2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PreloadContext);\n    const hashFragmentIndex = removeAndGetHashFragment(src);\n    const withoutHashFragment = getSrcWithoutHash(src);\n    if (!preloads2[withoutHashFragment]) {\n        return src;\n    }\n    if (hashFragmentIndex !== null) {\n        return preloads2[withoutHashFragment] + src.slice(hashFragmentIndex);\n    }\n    return preloads2[withoutHashFragment];\n};\nvar blobToBase64 = function(blob) {\n    const reader = new FileReader;\n    return new Promise((resolve, reject)=>{\n        reader.onload = function() {\n            const dataUrl = reader.result;\n            resolve(dataUrl);\n        };\n        reader.onerror = (err)=>{\n            return reject(err);\n        };\n        reader.readAsDataURL(blob);\n    });\n};\nvar getBlobFromReader = async ({ reader, contentType, contentLength, onProgress })=>{\n    let receivedLength = 0;\n    const chunks = [];\n    while(true){\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        chunks.push(value);\n        receivedLength += value.length;\n        if (onProgress) {\n            onProgress({\n                loadedBytes: receivedLength,\n                totalBytes: contentLength\n            });\n        }\n    }\n    const chunksAll = new Uint8Array(receivedLength);\n    let position = 0;\n    for (const chunk of chunks){\n        chunksAll.set(chunk, position);\n        position += chunk.length;\n    }\n    return new Blob([\n        chunksAll\n    ], {\n        type: contentType ?? undefined\n    });\n};\nvar prefetch = (src, options)=>{\n    const method = options?.method ?? \"blob-url\";\n    const logLevel = options?.logLevel ?? \"info\";\n    const srcWithoutHash = getSrcWithoutHash(src);\n    if (getRemotionEnvironment().isRendering) {\n        return {\n            free: ()=>{\n                return;\n            },\n            waitUntilDone: ()=>Promise.resolve(srcWithoutHash)\n        };\n    }\n    Log.verbose(logLevel, `[prefetch] Starting prefetch ${srcWithoutHash}`);\n    let canceled = false;\n    let objectUrl = null;\n    let resolve = ()=>{\n        return;\n    };\n    let reject = ()=>{\n        return;\n    };\n    const waitUntilDone = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    const controller = new AbortController;\n    let canBeAborted = true;\n    fetch(srcWithoutHash, {\n        signal: controller.signal,\n        credentials: options?.credentials ?? undefined\n    }).then((res)=>{\n        canBeAborted = false;\n        if (canceled) {\n            return null;\n        }\n        if (!res.ok) {\n            throw new Error(`HTTP error, status = ${res.status}`);\n        }\n        const headerContentType = res.headers.get(\"Content-Type\");\n        const contentType = options?.contentType ?? headerContentType;\n        const hasProperContentType = contentType && (contentType.startsWith(\"video/\") || contentType.startsWith(\"audio/\") || contentType.startsWith(\"image/\"));\n        if (!hasProperContentType) {\n            console.warn(`Called prefetch() on ${srcWithoutHash} which returned a \"Content-Type\" of ${headerContentType}. Prefetched content should have a proper content type (video/... or audio/...) or a contentType passed the options of prefetch(). Otherwise, prefetching will not work properly in all browsers.`);\n        }\n        if (!res.body) {\n            throw new Error(`HTTP response of ${srcWithoutHash} has no body`);\n        }\n        const reader = res.body.getReader();\n        return getBlobFromReader({\n            reader,\n            contentType: options?.contentType ?? headerContentType ?? null,\n            contentLength: res.headers.get(\"Content-Length\") ? parseInt(res.headers.get(\"Content-Length\"), 10) : null,\n            onProgress: options?.onProgress\n        });\n    }).then((buf)=>{\n        if (!buf) {\n            return;\n        }\n        const actualBlob = options?.contentType ? new Blob([\n            buf\n        ], {\n            type: options.contentType\n        }) : buf;\n        if (method === \"base64\") {\n            return blobToBase64(actualBlob);\n        }\n        return URL.createObjectURL(actualBlob);\n    }).then((url)=>{\n        if (canceled) {\n            return;\n        }\n        playbackLogging({\n            logLevel,\n            tag: \"prefetch\",\n            message: `Finished prefetch ${srcWithoutHash} with method ${method}`,\n            mountTime: null\n        });\n        objectUrl = url;\n        setPreloads((p)=>({\n                ...p,\n                [srcWithoutHash]: objectUrl\n            }));\n        resolve(objectUrl);\n    }).catch((err)=>{\n        if (err?.message.includes(\"free() called\")) {\n            return;\n        }\n        reject(err);\n    });\n    return {\n        free: ()=>{\n            playbackLogging({\n                logLevel,\n                tag: \"prefetch\",\n                message: `Freeing ${srcWithoutHash}`,\n                mountTime: null\n            });\n            if (objectUrl) {\n                if (method === \"blob-url\") {\n                    URL.revokeObjectURL(objectUrl);\n                }\n                setPreloads((p)=>{\n                    const copy = {\n                        ...p\n                    };\n                    delete copy[srcWithoutHash];\n                    return copy;\n                });\n            } else {\n                canceled = true;\n                if (canBeAborted) {\n                    try {\n                        controller.abort(new Error(\"free() called\"));\n                    } catch  {}\n                }\n            }\n        },\n        waitUntilDone: ()=>{\n            return waitUntilDone;\n        }\n    };\n};\n// src/validate-media-props.ts\nvar validateMediaProps = (props, component)=>{\n    if (typeof props.volume !== \"number\" && typeof props.volume !== \"function\" && typeof props.volume !== \"undefined\") {\n        throw new TypeError(`You have passed a volume of type ${typeof props.volume} to your <${component} /> component. Volume must be a number or a function with the signature '(frame: number) => number' undefined.`);\n    }\n    if (typeof props.volume === \"number\" && props.volume < 0) {\n        throw new TypeError(`You have passed a volume below 0 to your <${component} /> component. Volume must be between 0 and 1`);\n    }\n    if (typeof props.playbackRate !== \"number\" && typeof props.playbackRate !== \"undefined\") {\n        throw new TypeError(`You have passed a playbackRate of type ${typeof props.playbackRate} to your <${component} /> component. Playback rate must a real number or undefined.`);\n    }\n    if (typeof props.playbackRate === \"number\" && (isNaN(props.playbackRate) || !Number.isFinite(props.playbackRate) || props.playbackRate <= 0)) {\n        throw new TypeError(`You have passed a playbackRate of ${props.playbackRate} to your <${component} /> component. Playback rate must be a real number above 0.`);\n    }\n};\n// src/validate-start-from-props.ts\nvar validateStartFromProps = (startFrom, endAt)=>{\n    if (typeof startFrom !== \"undefined\") {\n        if (typeof startFrom !== \"number\") {\n            throw new TypeError(`type of startFrom prop must be a number, instead got type ${typeof startFrom}.`);\n        }\n        if (isNaN(startFrom) || startFrom === Infinity) {\n            throw new TypeError(\"startFrom prop can not be NaN or Infinity.\");\n        }\n        if (startFrom < 0) {\n            throw new TypeError(`startFrom must be greater than equal to 0 instead got ${startFrom}.`);\n        }\n    }\n    if (typeof endAt !== \"undefined\") {\n        if (typeof endAt !== \"number\") {\n            throw new TypeError(`type of endAt prop must be a number, instead got type ${typeof endAt}.`);\n        }\n        if (isNaN(endAt)) {\n            throw new TypeError(\"endAt prop can not be NaN.\");\n        }\n        if (endAt <= 0) {\n            throw new TypeError(`endAt must be a positive number, instead got ${endAt}.`);\n        }\n    }\n    if (endAt < startFrom) {\n        throw new TypeError(\"endAt prop must be greater than startFrom prop.\");\n    }\n};\nvar validateTrimProps = (trimBefore, trimAfter)=>{\n    if (typeof trimBefore !== \"undefined\") {\n        if (typeof trimBefore !== \"number\") {\n            throw new TypeError(`type of trimBefore prop must be a number, instead got type ${typeof trimBefore}.`);\n        }\n        if (isNaN(trimBefore) || trimBefore === Infinity) {\n            throw new TypeError(\"trimBefore prop can not be NaN or Infinity.\");\n        }\n        if (trimBefore < 0) {\n            throw new TypeError(`trimBefore must be greater than equal to 0 instead got ${trimBefore}.`);\n        }\n    }\n    if (typeof trimAfter !== \"undefined\") {\n        if (typeof trimAfter !== \"number\") {\n            throw new TypeError(`type of trimAfter prop must be a number, instead got type ${typeof trimAfter}.`);\n        }\n        if (isNaN(trimAfter)) {\n            throw new TypeError(\"trimAfter prop can not be NaN.\");\n        }\n        if (trimAfter <= 0) {\n            throw new TypeError(`trimAfter must be a positive number, instead got ${trimAfter}.`);\n        }\n    }\n    if (trimAfter < trimBefore) {\n        throw new TypeError(\"trimAfter prop must be greater than trimBefore prop.\");\n    }\n};\nvar validateMediaTrimProps = ({ startFrom, endAt, trimBefore, trimAfter })=>{\n    if (typeof startFrom !== \"undefined\" && typeof trimBefore !== \"undefined\") {\n        throw new TypeError(\"Cannot use both startFrom and trimBefore props. Use trimBefore instead as startFrom is deprecated.\");\n    }\n    if (typeof endAt !== \"undefined\" && typeof trimAfter !== \"undefined\") {\n        throw new TypeError(\"Cannot use both endAt and trimAfter props. Use trimAfter instead as endAt is deprecated.\");\n    }\n    const hasNewProps = typeof trimBefore !== \"undefined\" || typeof trimAfter !== \"undefined\";\n    const hasOldProps = typeof startFrom !== \"undefined\" || typeof endAt !== \"undefined\";\n    if (hasNewProps) {\n        validateTrimProps(trimBefore, trimAfter);\n    } else if (hasOldProps) {\n        validateStartFromProps(startFrom, endAt);\n    }\n};\nvar resolveTrimProps = ({ startFrom, endAt, trimBefore, trimAfter })=>{\n    const trimBeforeValue = trimBefore ?? startFrom ?? undefined;\n    const trimAfterValue = trimAfter ?? endAt ?? undefined;\n    return {\n        trimBeforeValue,\n        trimAfterValue\n    };\n};\n// src/video/duration-state.tsx\n\n\nvar durationReducer = (state, action)=>{\n    switch(action.type){\n        case \"got-duration\":\n            {\n                const absoluteSrc = getAbsoluteSrc(action.src);\n                if (state[absoluteSrc] === action.durationInSeconds) {\n                    return state;\n                }\n                return {\n                    ...state,\n                    [absoluteSrc]: action.durationInSeconds\n                };\n            }\n        default:\n            return state;\n    }\n};\nvar DurationsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    durations: {},\n    setDurations: ()=>{\n        throw new Error(\"context missing\");\n    }\n});\nvar DurationsContextProvider = ({ children })=>{\n    const [durations, setDurations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useReducer)(durationReducer, {});\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"DurationsContextProvider.useMemo12[value]\": ()=>{\n            return {\n                durations,\n                setDurations\n            };\n        }\n    }[\"DurationsContextProvider.useMemo12[value]\"], [\n        durations\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContext.Provider, {\n        value,\n        children\n    });\n};\n// src/audio/AudioForPreview.tsx\n\n// src/get-cross-origin-value.ts\nvar getCrossOriginValue = ({ crossOrigin, requestsVideoFrame })=>{\n    if (crossOrigin !== undefined && crossOrigin !== null) {\n        return crossOrigin;\n    }\n    if (requestsVideoFrame) {\n        return \"anonymous\";\n    }\n    return;\n};\n// src/log-level-context.tsx\n\n\nvar LogLevelContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    logLevel: \"info\",\n    mountTime: 0\n});\nvar useLogLevel = ()=>{\n    const { logLevel } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);\n    if (logLevel === null) {\n        throw new Error(\"useLogLevel must be used within a LogLevelProvider\");\n    }\n    return logLevel;\n};\nvar useMountTime = ()=>{\n    const { mountTime } = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);\n    if (mountTime === null) {\n        throw new Error(\"useMountTime must be used within a LogLevelProvider\");\n    }\n    return mountTime;\n};\n// src/random.ts\nfunction mulberry32(a) {\n    let t = a + 1831565813;\n    t = Math.imul(t ^ t >>> 15, t | 1);\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\n}\nfunction hashCode(str) {\n    let i = 0;\n    let chr = 0;\n    let hash = 0;\n    for(i = 0; i < str.length; i++){\n        chr = str.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0;\n    }\n    return hash;\n}\nvar random = (seed, dummy)=>{\n    if (dummy !== undefined) {\n        throw new TypeError(\"random() takes only one argument\");\n    }\n    if (seed === null) {\n        return Math.random();\n    }\n    if (typeof seed === \"string\") {\n        return mulberry32(hashCode(seed));\n    }\n    if (typeof seed === \"number\") {\n        return mulberry32(seed * 10000000000);\n    }\n    throw new Error(\"random() argument must be a number or a string\");\n};\n// src/use-amplification.ts\n\n// src/audio/shared-audio-tags.tsx\n\n// src/play-and-handle-not-allowed-error.ts\nvar playAndHandleNotAllowedError = ({ mediaRef, mediaType, onAutoPlayError, logLevel, mountTime, reason, isPlayer })=>{\n    const { current } = mediaRef;\n    if (!current) {\n        return;\n    }\n    playbackLogging({\n        logLevel,\n        tag: \"play\",\n        message: `Attempting to play ${current.src}. Reason: ${reason}`,\n        mountTime\n    });\n    const prom = current.play();\n    if (!prom.catch) {\n        return;\n    }\n    prom.catch((err)=>{\n        if (!current) {\n            return;\n        }\n        if (err.message.includes(\"request was interrupted by a call to pause\")) {\n            return;\n        }\n        if (err.message.includes(\"The operation was aborted.\")) {\n            return;\n        }\n        if (err.message.includes(\"The fetching process for the media resource was aborted by the user agent\")) {\n            return;\n        }\n        if (err.message.includes(\"request was interrupted by a new load request\")) {\n            return;\n        }\n        if (err.message.includes(\"because the media was removed from the document\")) {\n            return;\n        }\n        if (err.message.includes(\"user didn't interact with the document\") && current.muted) {\n            return;\n        }\n        console.log(`Could not play ${mediaType} due to following error: `, err);\n        if (!current.muted) {\n            if (onAutoPlayError) {\n                onAutoPlayError();\n                return;\n            }\n            console.log(`The video will be muted and we'll retry playing it.`);\n            if (mediaType === \"video\" && isPlayer) {\n                console.log(\"Use onAutoPlayError() to handle this error yourself.\");\n            }\n            current.muted = true;\n            current.play();\n        }\n    });\n};\n// src/audio/shared-element-source-node.ts\nvar makeSharedElementSourceNode = ({ audioContext, ref })=>{\n    let connected = null;\n    return {\n        attemptToConnect: ()=>{\n            if (!connected && ref.current) {\n                const mediaElementSourceNode = audioContext.createMediaElementSource(ref.current);\n                connected = mediaElementSourceNode;\n            }\n        },\n        get: ()=>{\n            if (!connected) {\n                throw new Error(\"Audio element not connected\");\n            }\n            return connected;\n        }\n    };\n};\n// src/audio/use-audio-context.ts\n\nvar warned = false;\nvar warnOnce = (logLevel)=>{\n    if (warned) {\n        return;\n    }\n    warned = true;\n    if (false) {}\n};\nvar useSingletonAudioContext = (logLevel, latencyHint)=>{\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useSingletonAudioContext.useMemo13[audioContext]\": ()=>{\n            if (typeof AudioContext === \"undefined\") {\n                warnOnce(logLevel);\n                return null;\n            }\n            return new AudioContext({\n                latencyHint\n            });\n        }\n    }[\"useSingletonAudioContext.useMemo13[audioContext]\"], [\n        logLevel,\n        latencyHint\n    ]);\n    return audioContext;\n};\n// src/audio/shared-audio-tags.tsx\n\nvar EMPTY_AUDIO = \"data:audio/mp3;base64,/+MYxAAJcAV8AAgAABn//////+/gQ5BAMA+D4Pg+BAQBAEAwD4Pg+D4EBAEAQDAPg++hYBH///hUFQVBUFREDQNHmf///////+MYxBUGkAGIMAAAAP/29Xt6lUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV/+MYxDUAAANIAAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\";\nvar compareProps = (obj1, obj2)=>{\n    const keysA = Object.keys(obj1).sort();\n    const keysB = Object.keys(obj2).sort();\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    for(let i = 0; i < keysA.length; i++){\n        if (keysA[i] !== keysB[i]) {\n            return false;\n        }\n        if (obj1[keysA[i]] !== obj2[keysB[i]]) {\n            return false;\n        }\n    }\n    return true;\n};\nvar didPropChange = (key, newProp, prevProp)=>{\n    if (key === \"src\" && !prevProp.startsWith(\"data:\") && !newProp.startsWith(\"data:\")) {\n        return new URL(prevProp, window.origin).toString() !== new URL(newProp, window.origin).toString();\n    }\n    if (prevProp === newProp) {\n        return false;\n    }\n    return true;\n};\nvar SharedAudioContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nvar SharedAudioContextProvider = ({ children, numberOfAudioTags, component, audioLatencyHint })=>{\n    const audios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const [initialNumberOfAudioTags] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(numberOfAudioTags);\n    if (numberOfAudioTags !== initialNumberOfAudioTags) {\n        throw new Error(\"The number of shared audio tags has changed dynamically. Once you have set this property, you cannot change it afterwards.\");\n    }\n    const logLevel = useLogLevel();\n    const audioContext = useSingletonAudioContext(logLevel, audioLatencyHint);\n    const refs = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SharedAudioContextProvider.useMemo14[refs]\": ()=>{\n            return new Array(numberOfAudioTags).fill(true).map({\n                \"SharedAudioContextProvider.useMemo14[refs]\": ()=>{\n                    const ref = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n                    return {\n                        id: Math.random(),\n                        ref,\n                        mediaElementSourceNode: audioContext ? makeSharedElementSourceNode({\n                            audioContext,\n                            ref\n                        }) : null\n                    };\n                }\n            }[\"SharedAudioContextProvider.useMemo14[refs]\"]);\n        }\n    }[\"SharedAudioContextProvider.useMemo14[refs]\"], [\n        audioContext,\n        numberOfAudioTags\n    ]);\n    const takenAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Array(numberOfAudioTags).fill(false));\n    const rerenderAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[rerenderAudios]\": ()=>{\n            refs.forEach({\n                \"SharedAudioContextProvider.useCallback7[rerenderAudios]\": ({ ref, id })=>{\n                    const data = audios.current?.find({\n                        \"SharedAudioContextProvider.useCallback7[rerenderAudios]\": (a)=>a.id === id\n                    }[\"SharedAudioContextProvider.useCallback7[rerenderAudios]\"]);\n                    const { current } = ref;\n                    if (!current) {\n                        return;\n                    }\n                    if (data === undefined) {\n                        current.src = EMPTY_AUDIO;\n                        return;\n                    }\n                    if (!data) {\n                        throw new TypeError(\"Expected audio data to be there\");\n                    }\n                    Object.keys(data.props).forEach({\n                        \"SharedAudioContextProvider.useCallback7[rerenderAudios]\": (key)=>{\n                            if (didPropChange(key, data.props[key], current[key])) {\n                                current[key] = data.props[key];\n                            }\n                        }\n                    }[\"SharedAudioContextProvider.useCallback7[rerenderAudios]\"]);\n                }\n            }[\"SharedAudioContextProvider.useCallback7[rerenderAudios]\"]);\n        }\n    }[\"SharedAudioContextProvider.useCallback7[rerenderAudios]\"], [\n        refs\n    ]);\n    const registerAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[registerAudio]\": (options)=>{\n            const { aud, audioId, premounting } = options;\n            const found = audios.current?.find({\n                \"SharedAudioContextProvider.useCallback7[registerAudio]\": (a)=>a.audioId === audioId\n            }[\"SharedAudioContextProvider.useCallback7[registerAudio]\"]);\n            if (found) {\n                return found;\n            }\n            const firstFreeAudio = takenAudios.current.findIndex({\n                \"SharedAudioContextProvider.useCallback7[registerAudio].firstFreeAudio\": (a)=>a === false\n            }[\"SharedAudioContextProvider.useCallback7[registerAudio].firstFreeAudio\"]);\n            if (firstFreeAudio === -1) {\n                throw new Error(`Tried to simultaneously mount ${numberOfAudioTags + 1} <Audio /> tags at the same time. With the current settings, the maximum amount of <Audio /> tags is limited to ${numberOfAudioTags} at the same time. Remotion pre-mounts silent audio tags to help avoid browser autoplay restrictions. See https://remotion.dev/docs/player/autoplay#using-the-numberofsharedaudiotags-prop for more information on how to increase this limit.`);\n            }\n            const { id, ref, mediaElementSourceNode } = refs[firstFreeAudio];\n            const cloned = [\n                ...takenAudios.current\n            ];\n            cloned[firstFreeAudio] = id;\n            takenAudios.current = cloned;\n            const newElem = {\n                props: aud,\n                id,\n                el: ref,\n                audioId,\n                mediaElementSourceNode,\n                premounting\n            };\n            audios.current?.push(newElem);\n            rerenderAudios();\n            return newElem;\n        }\n    }[\"SharedAudioContextProvider.useCallback7[registerAudio]\"], [\n        numberOfAudioTags,\n        refs,\n        rerenderAudios\n    ]);\n    const unregisterAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[unregisterAudio]\": (id)=>{\n            const cloned = [\n                ...takenAudios.current\n            ];\n            const index = refs.findIndex({\n                \"SharedAudioContextProvider.useCallback7[unregisterAudio].index\": (r)=>r.id === id\n            }[\"SharedAudioContextProvider.useCallback7[unregisterAudio].index\"]);\n            if (index === -1) {\n                throw new TypeError(\"Error occured in \");\n            }\n            cloned[index] = false;\n            takenAudios.current = cloned;\n            audios.current = audios.current?.filter({\n                \"SharedAudioContextProvider.useCallback7[unregisterAudio]\": (a)=>a.id !== id\n            }[\"SharedAudioContextProvider.useCallback7[unregisterAudio]\"]);\n            rerenderAudios();\n        }\n    }[\"SharedAudioContextProvider.useCallback7[unregisterAudio]\"], [\n        refs,\n        rerenderAudios\n    ]);\n    const updateAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[updateAudio]\": ({ aud, audioId, id, premounting })=>{\n            let changed = false;\n            audios.current = audios.current?.map({\n                \"SharedAudioContextProvider.useCallback7[updateAudio]\": (prevA)=>{\n                    if (prevA.id === id) {\n                        const isTheSame = compareProps(aud, prevA.props) && prevA.premounting === premounting;\n                        if (isTheSame) {\n                            return prevA;\n                        }\n                        changed = true;\n                        return {\n                            ...prevA,\n                            props: aud,\n                            premounting,\n                            audioId\n                        };\n                    }\n                    return prevA;\n                }\n            }[\"SharedAudioContextProvider.useCallback7[updateAudio]\"]);\n            if (changed) {\n                rerenderAudios();\n            }\n        }\n    }[\"SharedAudioContextProvider.useCallback7[updateAudio]\"], [\n        rerenderAudios\n    ]);\n    const mountTime = useMountTime();\n    const env = useRemotionEnvironment();\n    const playAllAudios = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[playAllAudios]\": ()=>{\n            refs.forEach({\n                \"SharedAudioContextProvider.useCallback7[playAllAudios]\": (ref)=>{\n                    const audio = audios.current.find({\n                        \"SharedAudioContextProvider.useCallback7[playAllAudios].audio\": (a)=>a.el === ref.ref\n                    }[\"SharedAudioContextProvider.useCallback7[playAllAudios].audio\"]);\n                    if (audio?.premounting) {\n                        return;\n                    }\n                    playAndHandleNotAllowedError({\n                        mediaRef: ref.ref,\n                        mediaType: \"audio\",\n                        onAutoPlayError: null,\n                        logLevel,\n                        mountTime,\n                        reason: \"playing all audios\",\n                        isPlayer: env.isPlayer\n                    });\n                }\n            }[\"SharedAudioContextProvider.useCallback7[playAllAudios]\"]);\n            audioContext?.resume();\n        }\n    }[\"SharedAudioContextProvider.useCallback7[playAllAudios]\"], [\n        audioContext,\n        logLevel,\n        mountTime,\n        refs,\n        env.isPlayer\n    ]);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"SharedAudioContextProvider.useMemo14[value]\": ()=>{\n            return {\n                registerAudio,\n                unregisterAudio,\n                updateAudio,\n                playAllAudios,\n                numberOfAudioTags,\n                audioContext\n            };\n        }\n    }[\"SharedAudioContextProvider.useMemo14[value]\"], [\n        numberOfAudioTags,\n        playAllAudios,\n        registerAudio,\n        unregisterAudio,\n        updateAudio,\n        audioContext\n    ]);\n    const resetAudio = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"SharedAudioContextProvider.useCallback7[resetAudio]\": ()=>{\n            takenAudios.current = new Array(numberOfAudioTags).fill(false);\n            audios.current = [];\n            rerenderAudios();\n        }\n    }[\"SharedAudioContextProvider.useCallback7[resetAudio]\"], [\n        numberOfAudioTags,\n        rerenderAudios\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"SharedAudioContextProvider.useEffect7\": ()=>{\n            return ({\n                \"SharedAudioContextProvider.useEffect7\": ()=>{\n                    resetAudio();\n                }\n            })[\"SharedAudioContextProvider.useEffect7\"];\n        }\n    }[\"SharedAudioContextProvider.useEffect7\"], [\n        component,\n        resetAudio\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(SharedAudioContext.Provider, {\n        value,\n        children: [\n            refs.map(({ id, ref })=>{\n                return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", {\n                    ref,\n                    preload: \"metadata\",\n                    src: EMPTY_AUDIO\n                }, id);\n            }),\n            children\n        ]\n    });\n};\nvar useSharedAudio = ({ aud, audioId, premounting })=>{\n    const ctx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    const [elem] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useSharedAudio.useState10\": ()=>{\n            if (ctx && ctx.numberOfAudioTags > 0) {\n                return ctx.registerAudio({\n                    aud,\n                    audioId,\n                    premounting\n                });\n            }\n            const el = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n            const mediaElementSourceNode = ctx?.audioContext ? makeSharedElementSourceNode({\n                audioContext: ctx.audioContext,\n                ref: el\n            }) : null;\n            return {\n                el,\n                id: Math.random(),\n                props: aud,\n                audioId,\n                mediaElementSourceNode,\n                premounting\n            };\n        }\n    }[\"useSharedAudio.useState10\"]);\n    const effectToUse = react__WEBPACK_IMPORTED_MODULE_0__.useInsertionEffect ?? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n    if (typeof document !== \"undefined\") {\n        effectToUse(()=>{\n            if (ctx && ctx.numberOfAudioTags > 0) {\n                ctx.updateAudio({\n                    id: elem.id,\n                    aud,\n                    audioId,\n                    premounting\n                });\n            }\n        }, [\n            aud,\n            ctx,\n            elem.id,\n            audioId,\n            premounting\n        ]);\n        effectToUse(()=>{\n            return ()=>{\n                if (ctx && ctx.numberOfAudioTags > 0) {\n                    ctx.unregisterAudio(elem.id);\n                }\n            };\n        }, [\n            ctx,\n            elem.id\n        ]);\n    }\n    return elem;\n};\n// src/is-approximately-the-same.ts\nvar FLOATING_POINT_ERROR_THRESHOLD = 0.00001;\nvar isApproximatelyTheSame = (num1, num2)=>{\n    return Math.abs(num1 - num2) < FLOATING_POINT_ERROR_THRESHOLD;\n};\n// src/video/video-fragment.ts\n\nvar toSeconds = (time, fps)=>{\n    return Math.round(time / fps * 100) / 100;\n};\nvar isSafari = ()=>{\n    if (true) {\n        return false;\n    }\n    const isAppleWebKit = /AppleWebKit/.test(window.navigator.userAgent);\n    if (!isAppleWebKit) {\n        return false;\n    }\n    const isNotChrome = !window.navigator.userAgent.includes(\"Chrome/\");\n    return isNotChrome;\n};\nvar isIosSafari = ()=>{\n    if (true) {\n        return false;\n    }\n    const isIpadIPodIPhone = /iP(ad|od|hone)/i.test(window.navigator.userAgent);\n    return isIpadIPodIPhone && isSafari();\n};\nvar isIOSSafariAndBlob = (actualSrc)=>{\n    return isIosSafari() && actualSrc.startsWith(\"blob:\");\n};\nvar getVideoFragmentStart = ({ actualFrom, fps })=>{\n    return toSeconds(Math.max(0, -actualFrom), fps);\n};\nvar getVideoFragmentEnd = ({ duration, fps })=>{\n    return toSeconds(duration, fps);\n};\nvar appendVideoFragment = ({ actualSrc, actualFrom, duration, fps })=>{\n    if (isIOSSafariAndBlob(actualSrc)) {\n        return actualSrc;\n    }\n    if (actualSrc.startsWith(\"data:\")) {\n        return actualSrc;\n    }\n    const existingHash = Boolean(new URL(actualSrc, ( null) ?? \"http://localhost:3000\").hash);\n    if (existingHash) {\n        return actualSrc;\n    }\n    if (!Number.isFinite(actualFrom)) {\n        return actualSrc;\n    }\n    const withStartHash = `${actualSrc}#t=${getVideoFragmentStart({\n        actualFrom,\n        fps\n    })}`;\n    if (!Number.isFinite(duration)) {\n        return withStartHash;\n    }\n    return `${withStartHash},${getVideoFragmentEnd({\n        duration,\n        fps\n    })}`;\n};\nvar isSubsetOfDuration = ({ prevStartFrom, newStartFrom, prevDuration, newDuration, fps })=>{\n    const previousFrom = getVideoFragmentStart({\n        actualFrom: prevStartFrom,\n        fps\n    });\n    const newFrom = getVideoFragmentStart({\n        actualFrom: newStartFrom,\n        fps\n    });\n    const previousEnd = getVideoFragmentEnd({\n        duration: prevDuration,\n        fps\n    });\n    const newEnd = getVideoFragmentEnd({\n        duration: newDuration,\n        fps\n    });\n    if (newFrom < previousFrom) {\n        return false;\n    }\n    if (newEnd > previousEnd) {\n        return false;\n    }\n    return true;\n};\nvar useAppendVideoFragment = ({ actualSrc: initialActualSrc, actualFrom: initialActualFrom, duration: initialDuration, fps })=>{\n    const actualFromRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualFrom);\n    const actualDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialDuration);\n    const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialActualSrc);\n    if (!isSubsetOfDuration({\n        prevStartFrom: actualFromRef.current,\n        newStartFrom: initialActualFrom,\n        prevDuration: actualDuration.current,\n        newDuration: initialDuration,\n        fps\n    }) || initialActualSrc !== actualSrc.current) {\n        actualFromRef.current = initialActualFrom;\n        actualDuration.current = initialDuration;\n        actualSrc.current = initialActualSrc;\n    }\n    const appended = appendVideoFragment({\n        actualSrc: actualSrc.current,\n        actualFrom: actualFromRef.current,\n        duration: actualDuration.current,\n        fps\n    });\n    return appended;\n};\n// src/use-amplification.ts\nvar warned2 = false;\nvar warnSafariOnce = (logLevel)=>{\n    if (warned2) {\n        return;\n    }\n    warned2 = true;\n    Log.warn(logLevel, \"In Safari, setting a volume and a playback rate at the same time is buggy.\");\n    Log.warn(logLevel, \"In Desktop Safari, only volumes <= 1 will be applied.\");\n    Log.warn(logLevel, \"In Mobile Safari, the volume will be ignored and set to 1 if a playbackRate is set.\");\n};\nvar useVolume = ({ mediaRef, volume, logLevel, source, shouldUseWebAudioApi })=>{\n    const audioStuffRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const currentVolumeRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(volume);\n    currentVolumeRef.current = volume;\n    const sharedAudioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    if (!sharedAudioContext) {\n        throw new Error(\"useAmplification must be used within a SharedAudioContext\");\n    }\n    const { audioContext } = sharedAudioContext;\n    if (false) {}\n    if (audioStuffRef.current) {\n        const valueToSet = volume;\n        if (!isApproximatelyTheSame(audioStuffRef.current.gainNode.gain.value, valueToSet)) {\n            audioStuffRef.current.gainNode.gain.value = valueToSet;\n            Log.trace(logLevel, `Setting gain to ${valueToSet} for ${mediaRef.current?.src}`);\n        }\n    }\n    const safariCase = isSafari() && mediaRef.current && mediaRef.current?.playbackRate !== 1;\n    const shouldUseTraditionalVolume = safariCase || !shouldUseWebAudioApi;\n    if (shouldUseTraditionalVolume && mediaRef.current && !isApproximatelyTheSame(volume, mediaRef.current?.volume)) {\n        mediaRef.current.volume = Math.min(volume, 1);\n    }\n    return audioStuffRef;\n};\n// src/use-media-in-timeline.ts\n\n// src/audio/use-audio-frame.ts\n\nvar useMediaStartsAt = ()=>{\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const startsAt = Math.min(0, parentSequence?.relativeFrom ?? 0);\n    return startsAt;\n};\nvar useFrameForVolumeProp = (behavior)=>{\n    const loop = Loop.useLoop();\n    const frame = useCurrentFrame();\n    const startsAt = useMediaStartsAt();\n    if (behavior === \"repeat\" || loop === null) {\n        return frame + startsAt;\n    }\n    return frame + startsAt + loop.durationInFrames * loop.iteration;\n};\n// src/get-asset-file-name.ts\nvar getAssetDisplayName = (filename)=>{\n    if (/data:|blob:/.test(filename.substring(0, 5))) {\n        return \"Data URL\";\n    }\n    const splitted = filename.split(\"/\").map((s)=>s.split(\"\\\\\")).flat(1);\n    return splitted[splitted.length - 1];\n};\n// src/volume-prop.ts\nvar evaluateVolume = ({ frame, volume, mediaVolume = 1 })=>{\n    if (typeof volume === \"number\") {\n        return volume * mediaVolume;\n    }\n    if (typeof volume === \"undefined\") {\n        return Number(mediaVolume);\n    }\n    const evaluated = volume(frame) * mediaVolume;\n    if (typeof evaluated !== \"number\") {\n        throw new TypeError(`You passed in a a function to the volume prop but it did not return a number but a value of type ${typeof evaluated} for frame ${frame}`);\n    }\n    if (Number.isNaN(evaluated)) {\n        throw new TypeError(`You passed in a function to the volume prop but it returned NaN for frame ${frame}.`);\n    }\n    if (!Number.isFinite(evaluated)) {\n        throw new TypeError(`You passed in a function to the volume prop but it returned a non-finite number for frame ${frame}.`);\n    }\n    return Math.max(0, evaluated);\n};\n// src/use-media-in-timeline.ts\nvar didWarn = {};\nvar warnOnce2 = (message)=>{\n    if (didWarn[message]) {\n        return;\n    }\n    console.warn(message);\n    didWarn[message] = true;\n};\nvar useMediaInTimeline = ({ volume, mediaVolume, mediaRef, src, mediaType, playbackRate, displayName, id, stack, showInTimeline, premountDisplay, postmountDisplay, onAutoPlayError, isPremounting, isPostmounting })=>{\n    const videoConfig = useVideoConfig();\n    const { rootId, audioAndVideoTags } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const actualFrom = parentSequence ? parentSequence.relativeFrom + parentSequence.cumulatedFrom : 0;\n    const { imperativePlaying } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const startsAt = useMediaStartsAt();\n    const { registerSequence, unregisterSequence } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceManager);\n    const [initialVolume] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useMediaInTimeline.useState11\": ()=>volume\n    }[\"useMediaInTimeline.useState11\"]);\n    const logLevel = useLogLevel();\n    const mountTime = useMountTime();\n    const nonce = useNonce();\n    const duration = parentSequence ? Math.min(parentSequence.durationInFrames, videoConfig.durationInFrames) : videoConfig.durationInFrames;\n    const doesVolumeChange = typeof volume === \"function\";\n    const volumes = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useMediaInTimeline.useMemo15[volumes]\": ()=>{\n            if (typeof volume === \"number\") {\n                return volume;\n            }\n            return new Array(Math.floor(Math.max(0, duration + startsAt))).fill(true).map({\n                \"useMediaInTimeline.useMemo15[volumes]\": (_, i)=>{\n                    return evaluateVolume({\n                        frame: i + startsAt,\n                        volume,\n                        mediaVolume\n                    });\n                }\n            }[\"useMediaInTimeline.useMemo15[volumes]\"]).join(\",\");\n        }\n    }[\"useMediaInTimeline.useMemo15[volumes]\"], [\n        duration,\n        startsAt,\n        volume,\n        mediaVolume\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaInTimeline.useEffect8\": ()=>{\n            if (typeof volume === \"number\" && volume !== initialVolume) {\n                warnOnce2(`Remotion: The ${mediaType} with src ${src} has changed it's volume. Prefer the callback syntax for setting volume to get better timeline display: https://www.remotion.dev/docs/audio/volume`);\n            }\n        }\n    }[\"useMediaInTimeline.useEffect8\"], [\n        initialVolume,\n        mediaType,\n        src,\n        volume\n    ]);\n    const env = useRemotionEnvironment();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaInTimeline.useEffect8\": ()=>{\n            if (!mediaRef.current) {\n                return;\n            }\n            if (!src) {\n                throw new Error(\"No src passed\");\n            }\n            if (!env.isStudio && window.process?.env?.NODE_ENV !== \"test\") {\n                return;\n            }\n            if (!showInTimeline) {\n                return;\n            }\n            registerSequence({\n                type: mediaType,\n                src,\n                id,\n                duration,\n                from: 0,\n                parent: parentSequence?.id ?? null,\n                displayName: displayName ?? getAssetDisplayName(src),\n                rootId,\n                volume: volumes,\n                showInTimeline: true,\n                nonce,\n                startMediaFrom: 0 - startsAt,\n                doesVolumeChange,\n                loopDisplay: undefined,\n                playbackRate,\n                stack,\n                premountDisplay,\n                postmountDisplay\n            });\n            return ({\n                \"useMediaInTimeline.useEffect8\": ()=>{\n                    unregisterSequence(id);\n                }\n            })[\"useMediaInTimeline.useEffect8\"];\n        }\n    }[\"useMediaInTimeline.useEffect8\"], [\n        actualFrom,\n        duration,\n        id,\n        parentSequence,\n        src,\n        registerSequence,\n        rootId,\n        unregisterSequence,\n        videoConfig,\n        volumes,\n        doesVolumeChange,\n        nonce,\n        mediaRef,\n        mediaType,\n        startsAt,\n        playbackRate,\n        displayName,\n        stack,\n        showInTimeline,\n        premountDisplay,\n        postmountDisplay,\n        env.isStudio\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaInTimeline.useEffect8\": ()=>{\n            const tag = {\n                id,\n                play: {\n                    \"useMediaInTimeline.useEffect8\": (reason)=>{\n                        if (!imperativePlaying.current) {\n                            return;\n                        }\n                        if (isPremounting || isPostmounting) {\n                            return;\n                        }\n                        return playAndHandleNotAllowedError({\n                            mediaRef,\n                            mediaType,\n                            onAutoPlayError,\n                            logLevel,\n                            mountTime,\n                            reason,\n                            isPlayer: env.isPlayer\n                        });\n                    }\n                }[\"useMediaInTimeline.useEffect8\"]\n            };\n            audioAndVideoTags.current.push(tag);\n            return ({\n                \"useMediaInTimeline.useEffect8\": ()=>{\n                    audioAndVideoTags.current = audioAndVideoTags.current.filter({\n                        \"useMediaInTimeline.useEffect8\": (a)=>a.id !== id\n                    }[\"useMediaInTimeline.useEffect8\"]);\n                }\n            })[\"useMediaInTimeline.useEffect8\"];\n        }\n    }[\"useMediaInTimeline.useEffect8\"], [\n        audioAndVideoTags,\n        id,\n        mediaRef,\n        mediaType,\n        onAutoPlayError,\n        imperativePlaying,\n        isPremounting,\n        isPostmounting,\n        logLevel,\n        mountTime,\n        env.isPlayer\n    ]);\n};\n// src/use-media-playback.ts\n\n// src/buffer-until-first-frame.ts\n\n// src/use-buffer-state.ts\n\n// src/buffering.tsx\n\n\nvar useBufferManager = (logLevel, mountTime)=>{\n    const [blocks, setBlocks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [onBufferingCallbacks, setOnBufferingCallbacks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [onResumeCallbacks, setOnResumeCallbacks] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const buffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const addBlock = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBufferManager.useCallback8[addBlock]\": (block)=>{\n            setBlocks({\n                \"useBufferManager.useCallback8[addBlock]\": (b)=>[\n                        ...b,\n                        block\n                    ]\n            }[\"useBufferManager.useCallback8[addBlock]\"]);\n            return {\n                unblock: ({\n                    \"useBufferManager.useCallback8[addBlock]\": ()=>{\n                        setBlocks({\n                            \"useBufferManager.useCallback8[addBlock]\": (b)=>{\n                                const newArr = b.filter({\n                                    \"useBufferManager.useCallback8[addBlock].newArr\": (bx)=>bx !== block\n                                }[\"useBufferManager.useCallback8[addBlock].newArr\"]);\n                                if (newArr.length === b.length) {\n                                    return b;\n                                }\n                                return newArr;\n                            }\n                        }[\"useBufferManager.useCallback8[addBlock]\"]);\n                    }\n                })[\"useBufferManager.useCallback8[addBlock]\"]\n            };\n        }\n    }[\"useBufferManager.useCallback8[addBlock]\"], []);\n    const listenForBuffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBufferManager.useCallback8[listenForBuffering]\": (callback)=>{\n            setOnBufferingCallbacks({\n                \"useBufferManager.useCallback8[listenForBuffering]\": (c)=>[\n                        ...c,\n                        callback\n                    ]\n            }[\"useBufferManager.useCallback8[listenForBuffering]\"]);\n            return {\n                remove: ({\n                    \"useBufferManager.useCallback8[listenForBuffering]\": ()=>{\n                        setOnBufferingCallbacks({\n                            \"useBufferManager.useCallback8[listenForBuffering]\": (c)=>c.filter({\n                                    \"useBufferManager.useCallback8[listenForBuffering]\": (cb)=>cb !== callback\n                                }[\"useBufferManager.useCallback8[listenForBuffering]\"])\n                        }[\"useBufferManager.useCallback8[listenForBuffering]\"]);\n                    }\n                })[\"useBufferManager.useCallback8[listenForBuffering]\"]\n            };\n        }\n    }[\"useBufferManager.useCallback8[listenForBuffering]\"], []);\n    const listenForResume = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBufferManager.useCallback8[listenForResume]\": (callback)=>{\n            setOnResumeCallbacks({\n                \"useBufferManager.useCallback8[listenForResume]\": (c)=>[\n                        ...c,\n                        callback\n                    ]\n            }[\"useBufferManager.useCallback8[listenForResume]\"]);\n            return {\n                remove: ({\n                    \"useBufferManager.useCallback8[listenForResume]\": ()=>{\n                        setOnResumeCallbacks({\n                            \"useBufferManager.useCallback8[listenForResume]\": (c)=>c.filter({\n                                    \"useBufferManager.useCallback8[listenForResume]\": (cb)=>cb !== callback\n                                }[\"useBufferManager.useCallback8[listenForResume]\"])\n                        }[\"useBufferManager.useCallback8[listenForResume]\"]);\n                    }\n                })[\"useBufferManager.useCallback8[listenForResume]\"]\n            };\n        }\n    }[\"useBufferManager.useCallback8[listenForResume]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useBufferManager.useEffect9\": ()=>{\n            if (blocks.length > 0) {\n                onBufferingCallbacks.forEach({\n                    \"useBufferManager.useEffect9\": (c)=>c()\n                }[\"useBufferManager.useEffect9\"]);\n                playbackLogging({\n                    logLevel,\n                    message: \"Player is entering buffer state\",\n                    mountTime,\n                    tag: \"player\"\n                });\n            }\n        }\n    }[\"useBufferManager.useEffect9\"], [\n        blocks\n    ]);\n    if (false) {}\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useBufferManager.useMemo16\": ()=>{\n            return {\n                addBlock,\n                listenForBuffering,\n                listenForResume,\n                buffering\n            };\n        }\n    }[\"useBufferManager.useMemo16\"], [\n        addBlock,\n        buffering,\n        listenForBuffering,\n        listenForResume\n    ]);\n};\nvar BufferingContextReact = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nvar BufferingProvider = ({ children })=>{\n    const { logLevel, mountTime } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(LogLevelContext);\n    const bufferManager = useBufferManager(logLevel ?? \"info\", mountTime);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingContextReact.Provider, {\n        value: bufferManager,\n        children\n    });\n};\nvar useIsPlayerBuffering = (bufferManager)=>{\n    const [isBuffering, setIsBuffering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(bufferManager.buffering.current);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useIsPlayerBuffering.useEffect9\": ()=>{\n            const onBuffer = {\n                \"useIsPlayerBuffering.useEffect9.onBuffer\": ()=>{\n                    setIsBuffering(true);\n                }\n            }[\"useIsPlayerBuffering.useEffect9.onBuffer\"];\n            const onResume = {\n                \"useIsPlayerBuffering.useEffect9.onResume\": ()=>{\n                    setIsBuffering(false);\n                }\n            }[\"useIsPlayerBuffering.useEffect9.onResume\"];\n            bufferManager.listenForBuffering(onBuffer);\n            bufferManager.listenForResume(onResume);\n            return ({\n                \"useIsPlayerBuffering.useEffect9\": ()=>{\n                    bufferManager.listenForBuffering({\n                        \"useIsPlayerBuffering.useEffect9\": ()=>{\n                            return;\n                        }\n                    }[\"useIsPlayerBuffering.useEffect9\"]);\n                    bufferManager.listenForResume({\n                        \"useIsPlayerBuffering.useEffect9\": ()=>{\n                            return;\n                        }\n                    }[\"useIsPlayerBuffering.useEffect9\"]);\n                }\n            })[\"useIsPlayerBuffering.useEffect9\"];\n        }\n    }[\"useIsPlayerBuffering.useEffect9\"], [\n        bufferManager\n    ]);\n    return isBuffering;\n};\n// src/use-buffer-state.ts\nvar useBufferState = ()=>{\n    const buffer = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BufferingContextReact);\n    const addBlock = buffer ? buffer.addBlock : null;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useBufferState.useMemo17\": ()=>({\n                delayPlayback: ({\n                    \"useBufferState.useMemo17\": ()=>{\n                        if (!addBlock) {\n                            throw new Error(\"Tried to enable the buffering state, but a Remotion context was not found. This API can only be called in a component that was passed to the Remotion Player or a <Composition>. Or you might have experienced a version mismatch - run `npx remotion versions` and ensure all packages have the same version. This error is thrown by the buffer state https://remotion.dev/docs/player/buffer-state\");\n                        }\n                        const { unblock } = addBlock({\n                            id: String(Math.random())\n                        });\n                        return {\n                            unblock\n                        };\n                    }\n                })[\"useBufferState.useMemo17\"]\n            })\n    }[\"useBufferState.useMemo17\"], [\n        addBlock\n    ]);\n};\n// src/buffer-until-first-frame.ts\nvar isSafariWebkit = ()=>{\n    const isSafari2 = /^((?!chrome|android).)*safari/i.test(window.navigator.userAgent);\n    return isSafari2;\n};\nvar useBufferUntilFirstFrame = ({ mediaRef, mediaType, onVariableFpsVideoDetected, pauseWhenBuffering, logLevel, mountTime })=>{\n    const bufferingRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const { delayPlayback } = useBufferState();\n    const bufferUntilFirstFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame]\": (requestedTime)=>{\n            if (mediaType !== \"video\") {\n                return;\n            }\n            if (!pauseWhenBuffering) {\n                return;\n            }\n            const current = mediaRef.current;\n            if (!current) {\n                return;\n            }\n            if (current.readyState >= current.HAVE_FUTURE_DATA && !isSafariWebkit()) {\n                playbackLogging({\n                    logLevel,\n                    message: `Not using buffer until first frame, because readyState is ${current.readyState} and is not Safari or Desktop Chrome`,\n                    mountTime,\n                    tag: \"buffer\"\n                });\n                return;\n            }\n            if (!current.requestVideoFrameCallback) {\n                playbackLogging({\n                    logLevel,\n                    message: `Not using buffer until first frame, because requestVideoFrameCallback is not supported`,\n                    mountTime,\n                    tag: \"buffer\"\n                });\n                return;\n            }\n            bufferingRef.current = true;\n            playbackLogging({\n                logLevel,\n                message: `Buffering ${mediaRef.current?.src} until the first frame is received`,\n                mountTime,\n                tag: \"buffer\"\n            });\n            const playback = delayPlayback();\n            const unblock = {\n                \"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame].unblock\": ()=>{\n                    playback.unblock();\n                    current.removeEventListener(\"ended\", unblock, {\n                        once: true\n                    });\n                    current.removeEventListener(\"pause\", unblock, {\n                        once: true\n                    });\n                    bufferingRef.current = false;\n                }\n            }[\"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame].unblock\"];\n            const onEndedOrPauseOrCanPlay = {\n                \"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame].onEndedOrPauseOrCanPlay\": ()=>{\n                    unblock();\n                }\n            }[\"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame].onEndedOrPauseOrCanPlay\"];\n            current.requestVideoFrameCallback({\n                \"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame]\": (_, info)=>{\n                    const differenceFromRequested = Math.abs(info.mediaTime - requestedTime);\n                    if (differenceFromRequested > 0.5) {\n                        onVariableFpsVideoDetected();\n                    }\n                    unblock();\n                }\n            }[\"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame]\"]);\n            current.addEventListener(\"ended\", onEndedOrPauseOrCanPlay, {\n                once: true\n            });\n            current.addEventListener(\"pause\", onEndedOrPauseOrCanPlay, {\n                once: true\n            });\n            current.addEventListener(\"canplay\", onEndedOrPauseOrCanPlay, {\n                once: true\n            });\n        }\n    }[\"useBufferUntilFirstFrame.useCallback9[bufferUntilFirstFrame]\"], [\n        delayPlayback,\n        logLevel,\n        mediaRef,\n        mediaType,\n        mountTime,\n        onVariableFpsVideoDetected,\n        pauseWhenBuffering\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useBufferUntilFirstFrame.useMemo18\": ()=>{\n            return {\n                isBuffering: ({\n                    \"useBufferUntilFirstFrame.useMemo18\": ()=>bufferingRef.current\n                })[\"useBufferUntilFirstFrame.useMemo18\"],\n                bufferUntilFirstFrame\n            };\n        }\n    }[\"useBufferUntilFirstFrame.useMemo18\"], [\n        bufferUntilFirstFrame\n    ]);\n};\n// src/media-tag-current-time-timestamp.ts\n\nvar useCurrentTimeOfMediaTagWithUpdateTimeStamp = (mediaRef)=>{\n    const lastUpdate = react__WEBPACK_IMPORTED_MODULE_0__.useRef({\n        time: mediaRef.current?.currentTime ?? 0,\n        lastUpdate: performance.now()\n    });\n    const nowCurrentTime = mediaRef.current?.currentTime ?? null;\n    if (nowCurrentTime !== null) {\n        if (lastUpdate.current.time !== nowCurrentTime) {\n            lastUpdate.current.time = nowCurrentTime;\n            lastUpdate.current.lastUpdate = performance.now();\n        }\n    }\n    return lastUpdate;\n};\n// src/seek.ts\nvar seek = ({ mediaRef, time, logLevel, why, mountTime })=>{\n    const timeToSet = isIosSafari() ? Number(time.toFixed(1)) : time;\n    playbackLogging({\n        logLevel,\n        tag: \"seek\",\n        message: `Seeking from ${mediaRef.currentTime} to ${timeToSet}. src= ${mediaRef.src} Reason: ${why}`,\n        mountTime\n    });\n    mediaRef.currentTime = timeToSet;\n    return timeToSet;\n};\n// src/use-media-buffering.ts\n\nvar useMediaBuffering = ({ element, shouldBuffer, isPremounting, isPostmounting, logLevel, mountTime, src })=>{\n    const buffer = useBufferState();\n    const [isBuffering, setIsBuffering] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaBuffering.useEffect10\": ()=>{\n            let cleanupFns = [];\n            const { current } = element;\n            if (!current) {\n                return;\n            }\n            if (!shouldBuffer) {\n                return;\n            }\n            if (isPremounting || isPostmounting) {\n                if ((isPremounting || isPostmounting) && current.readyState < current.HAVE_FUTURE_DATA) {\n                    if (!navigator.userAgent.includes(\"Firefox/\")) {\n                        playbackLogging({\n                            logLevel,\n                            message: `Calling .load() on ${current.src} because readyState is ${current.readyState} and it is not Firefox. Element is premounted ${current.playbackRate}`,\n                            tag: \"load\",\n                            mountTime\n                        });\n                        const previousPlaybackRate = current.playbackRate;\n                        current.load();\n                        current.playbackRate = previousPlaybackRate;\n                    }\n                }\n                return;\n            }\n            const cleanup = {\n                \"useMediaBuffering.useEffect10.cleanup\": (reason)=>{\n                    let didDoSomething = false;\n                    cleanupFns.forEach({\n                        \"useMediaBuffering.useEffect10.cleanup\": (fn)=>{\n                            fn(reason);\n                            didDoSomething = true;\n                        }\n                    }[\"useMediaBuffering.useEffect10.cleanup\"]);\n                    cleanupFns = [];\n                    setIsBuffering({\n                        \"useMediaBuffering.useEffect10.cleanup\": (previous)=>{\n                            if (previous) {\n                                didDoSomething = true;\n                            }\n                            return false;\n                        }\n                    }[\"useMediaBuffering.useEffect10.cleanup\"]);\n                    if (didDoSomething) {\n                        playbackLogging({\n                            logLevel,\n                            message: `Unmarking as buffering: ${current.src}. Reason: ${reason}`,\n                            tag: \"buffer\",\n                            mountTime\n                        });\n                    }\n                }\n            }[\"useMediaBuffering.useEffect10.cleanup\"];\n            const blockMedia = {\n                \"useMediaBuffering.useEffect10.blockMedia\": (reason)=>{\n                    setIsBuffering(true);\n                    playbackLogging({\n                        logLevel,\n                        message: `Marking as buffering: ${current.src}. Reason: ${reason}`,\n                        tag: \"buffer\",\n                        mountTime\n                    });\n                    const { unblock } = buffer.delayPlayback();\n                    const onCanPlay = {\n                        \"useMediaBuffering.useEffect10.blockMedia.onCanPlay\": ()=>{\n                            cleanup('\"canplay\" was fired');\n                            init();\n                        }\n                    }[\"useMediaBuffering.useEffect10.blockMedia.onCanPlay\"];\n                    const onError = {\n                        \"useMediaBuffering.useEffect10.blockMedia.onError\": ()=>{\n                            cleanup('\"error\" event was occurred');\n                            init();\n                        }\n                    }[\"useMediaBuffering.useEffect10.blockMedia.onError\"];\n                    current.addEventListener(\"canplay\", onCanPlay, {\n                        once: true\n                    });\n                    cleanupFns.push({\n                        \"useMediaBuffering.useEffect10.blockMedia\": ()=>{\n                            current.removeEventListener(\"canplay\", onCanPlay);\n                        }\n                    }[\"useMediaBuffering.useEffect10.blockMedia\"]);\n                    current.addEventListener(\"error\", onError, {\n                        once: true\n                    });\n                    cleanupFns.push({\n                        \"useMediaBuffering.useEffect10.blockMedia\": ()=>{\n                            current.removeEventListener(\"error\", onError);\n                        }\n                    }[\"useMediaBuffering.useEffect10.blockMedia\"]);\n                    cleanupFns.push({\n                        \"useMediaBuffering.useEffect10.blockMedia\": (cleanupReason)=>{\n                            playbackLogging({\n                                logLevel,\n                                message: `Unblocking ${current.src} from buffer. Reason: ${cleanupReason}`,\n                                tag: \"buffer\",\n                                mountTime\n                            });\n                            unblock();\n                        }\n                    }[\"useMediaBuffering.useEffect10.blockMedia\"]);\n                }\n            }[\"useMediaBuffering.useEffect10.blockMedia\"];\n            const init = {\n                \"useMediaBuffering.useEffect10.init\": ()=>{\n                    if (current.readyState < current.HAVE_FUTURE_DATA) {\n                        blockMedia(`readyState is ${current.readyState}, which is less than HAVE_FUTURE_DATA`);\n                        if (!navigator.userAgent.includes(\"Firefox/\")) {\n                            playbackLogging({\n                                logLevel,\n                                message: `Calling .load() on ${src} because readyState is ${current.readyState} and it is not Firefox. ${current.playbackRate}`,\n                                tag: \"load\",\n                                mountTime\n                            });\n                            const previousPlaybackRate = current.playbackRate;\n                            current.load();\n                            current.playbackRate = previousPlaybackRate;\n                        }\n                    } else {\n                        const onWaiting = {\n                            \"useMediaBuffering.useEffect10.init.onWaiting\": ()=>{\n                                blockMedia('\"waiting\" event was fired');\n                            }\n                        }[\"useMediaBuffering.useEffect10.init.onWaiting\"];\n                        current.addEventListener(\"waiting\", onWaiting);\n                        cleanupFns.push({\n                            \"useMediaBuffering.useEffect10.init\": ()=>{\n                                current.removeEventListener(\"waiting\", onWaiting);\n                            }\n                        }[\"useMediaBuffering.useEffect10.init\"]);\n                    }\n                }\n            }[\"useMediaBuffering.useEffect10.init\"];\n            init();\n            return ({\n                \"useMediaBuffering.useEffect10\": ()=>{\n                    cleanup(\"element was unmounted or prop changed\");\n                }\n            })[\"useMediaBuffering.useEffect10\"];\n        }\n    }[\"useMediaBuffering.useEffect10\"], [\n        buffer,\n        src,\n        element,\n        isPremounting,\n        isPostmounting,\n        logLevel,\n        shouldBuffer,\n        mountTime\n    ]);\n    return isBuffering;\n};\n// src/use-request-video-callback-time.ts\n\nvar useRequestVideoCallbackTime = ({ mediaRef, mediaType, lastSeek, onVariableFpsVideoDetected })=>{\n    const currentTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useRequestVideoCallbackTime.useEffect11\": ()=>{\n            const { current } = mediaRef;\n            if (current) {\n                currentTime.current = {\n                    time: current.currentTime,\n                    lastUpdate: performance.now()\n                };\n            } else {\n                currentTime.current = null;\n                return;\n            }\n            if (mediaType !== \"video\") {\n                currentTime.current = null;\n                return;\n            }\n            const videoTag = current;\n            if (!videoTag.requestVideoFrameCallback) {\n                return;\n            }\n            let cancel = {\n                \"useRequestVideoCallbackTime.useEffect11.cancel\": ()=>{\n                    return;\n                }\n            }[\"useRequestVideoCallbackTime.useEffect11.cancel\"];\n            const request = {\n                \"useRequestVideoCallbackTime.useEffect11.request\": ()=>{\n                    if (!videoTag) {\n                        return;\n                    }\n                    const cb = videoTag.requestVideoFrameCallback({\n                        \"useRequestVideoCallbackTime.useEffect11.request.cb\": (_, info)=>{\n                            if (currentTime.current !== null) {\n                                const difference = Math.abs(currentTime.current.time - info.mediaTime);\n                                const differenceToLastSeek = Math.abs(lastSeek.current === null ? Infinity : info.mediaTime - lastSeek.current);\n                                if (difference > 0.5 && differenceToLastSeek > 0.5 && info.mediaTime > currentTime.current.time) {\n                                    onVariableFpsVideoDetected();\n                                }\n                            }\n                            currentTime.current = {\n                                time: info.mediaTime,\n                                lastUpdate: performance.now()\n                            };\n                            request();\n                        }\n                    }[\"useRequestVideoCallbackTime.useEffect11.request.cb\"]);\n                    cancel = ({\n                        \"useRequestVideoCallbackTime.useEffect11.request\": ()=>{\n                            videoTag.cancelVideoFrameCallback(cb);\n                            cancel = ({\n                                \"useRequestVideoCallbackTime.useEffect11.request\": ()=>{\n                                    return;\n                                }\n                            })[\"useRequestVideoCallbackTime.useEffect11.request\"];\n                        }\n                    })[\"useRequestVideoCallbackTime.useEffect11.request\"];\n                }\n            }[\"useRequestVideoCallbackTime.useEffect11.request\"];\n            request();\n            return ({\n                \"useRequestVideoCallbackTime.useEffect11\": ()=>{\n                    cancel();\n                }\n            })[\"useRequestVideoCallbackTime.useEffect11\"];\n        }\n    }[\"useRequestVideoCallbackTime.useEffect11\"], [\n        lastSeek,\n        mediaRef,\n        mediaType,\n        onVariableFpsVideoDetected\n    ]);\n    return currentTime;\n};\n// src/interpolate.ts\nfunction interpolateFunction(input, inputRange, outputRange, options) {\n    const { extrapolateLeft, extrapolateRight, easing } = options;\n    let result = input;\n    const [inputMin, inputMax] = inputRange;\n    const [outputMin, outputMax] = outputRange;\n    if (result < inputMin) {\n        if (extrapolateLeft === \"identity\") {\n            return result;\n        }\n        if (extrapolateLeft === \"clamp\") {\n            result = inputMin;\n        } else if (extrapolateLeft === \"wrap\") {\n            const range = inputMax - inputMin;\n            result = ((result - inputMin) % range + range) % range + inputMin;\n        } else if (extrapolateLeft === \"extend\") {}\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === \"identity\") {\n            return result;\n        }\n        if (extrapolateRight === \"clamp\") {\n            result = inputMax;\n        } else if (extrapolateRight === \"wrap\") {\n            const range = inputMax - inputMin;\n            result = ((result - inputMin) % range + range) % range + inputMin;\n        } else if (extrapolateRight === \"extend\") {}\n    }\n    if (outputMin === outputMax) {\n        return outputMin;\n    }\n    result = (result - inputMin) / (inputMax - inputMin);\n    result = easing(result);\n    result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    let i;\n    for(i = 1; i < inputRange.length - 1; ++i){\n        if (inputRange[i] >= input) {\n            break;\n        }\n    }\n    return i - 1;\n}\nfunction checkValidInputRange(arr) {\n    for(let i = 1; i < arr.length; ++i){\n        if (!(arr[i] > arr[i - 1])) {\n            throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(\",\")}]`);\n        }\n    }\n}\nfunction checkInfiniteRange(name, arr) {\n    if (arr.length < 2) {\n        throw new Error(name + \" must have at least 2 elements\");\n    }\n    for (const element of arr){\n        if (typeof element !== \"number\") {\n            throw new Error(`${name} must contain only numbers`);\n        }\n        if (!Number.isFinite(element)) {\n            throw new Error(`${name} must contain only finite numbers, but got [${arr.join(\",\")}]`);\n        }\n    }\n}\nfunction interpolate(input, inputRange, outputRange, options) {\n    if (typeof input === \"undefined\") {\n        throw new Error(\"input can not be undefined\");\n    }\n    if (typeof inputRange === \"undefined\") {\n        throw new Error(\"inputRange can not be undefined\");\n    }\n    if (typeof outputRange === \"undefined\") {\n        throw new Error(\"outputRange can not be undefined\");\n    }\n    if (inputRange.length !== outputRange.length) {\n        throw new Error(\"inputRange (\" + inputRange.length + \") and outputRange (\" + outputRange.length + \") must have the same length\");\n    }\n    checkInfiniteRange(\"inputRange\", inputRange);\n    checkInfiniteRange(\"outputRange\", outputRange);\n    checkValidInputRange(inputRange);\n    const easing = options?.easing ?? ((num)=>num);\n    let extrapolateLeft = \"extend\";\n    if (options?.extrapolateLeft !== undefined) {\n        extrapolateLeft = options.extrapolateLeft;\n    }\n    let extrapolateRight = \"extend\";\n    if (options?.extrapolateRight !== undefined) {\n        extrapolateRight = options.extrapolateRight;\n    }\n    if (typeof input !== \"number\") {\n        throw new TypeError(\"Cannot interpolate an input which is not a number\");\n    }\n    const range = findRange(input, inputRange);\n    return interpolateFunction(input, [\n        inputRange[range],\n        inputRange[range + 1]\n    ], [\n        outputRange[range],\n        outputRange[range + 1]\n    ], {\n        easing,\n        extrapolateLeft,\n        extrapolateRight\n    });\n}\n// src/video/get-current-time.ts\nvar getExpectedMediaFrameUncorrected = ({ frame, playbackRate, startFrom })=>{\n    return interpolate(frame, [\n        -1,\n        startFrom,\n        startFrom + 1\n    ], [\n        -1,\n        startFrom,\n        startFrom + playbackRate\n    ]);\n};\nvar getMediaTime = ({ fps, frame, playbackRate, startFrom })=>{\n    const expectedFrame = getExpectedMediaFrameUncorrected({\n        frame,\n        playbackRate,\n        startFrom\n    });\n    const msPerFrame = 1000 / fps;\n    return expectedFrame * msPerFrame / 1000;\n};\n// src/warn-about-non-seekable-media.ts\nvar alreadyWarned = {};\nvar warnAboutNonSeekableMedia = (ref, type)=>{\n    if (ref === null) {\n        return;\n    }\n    if (ref.seekable.length === 0) {\n        return;\n    }\n    if (ref.seekable.length > 1) {\n        return;\n    }\n    if (alreadyWarned[ref.src]) {\n        return;\n    }\n    const range = {\n        start: ref.seekable.start(0),\n        end: ref.seekable.end(0)\n    };\n    if (range.start === 0 && range.end === 0) {\n        const msg = [\n            `The media ${ref.src} cannot be seeked. This could be one of few reasons:`,\n            \"1) The media resource was replaced while the video is playing but it was not loaded yet.\",\n            \"2) The media does not support seeking.\",\n            \"3) The media was loaded with security headers prventing it from being included.\",\n            \"Please see https://remotion.dev/docs/non-seekable-media for assistance.\"\n        ].join(`\n`);\n        if (type === \"console-error\") {\n            console.error(msg);\n        } else if (type === \"console-warning\") {\n            console.warn(`The media ${ref.src} does not support seeking. The video will render fine, but may not play correctly in the Remotion Studio and in the <Player>. See https://remotion.dev/docs/non-seekable-media for an explanation.`);\n        } else {\n            throw new Error(msg);\n        }\n        alreadyWarned[ref.src] = true;\n    }\n};\n// src/use-media-playback.ts\nvar useMediaPlayback = ({ mediaRef, src, mediaType, playbackRate: localPlaybackRate, onlyWarnForMediaSeekingError, acceptableTimeshift, pauseWhenBuffering, isPremounting, isPostmounting, onAutoPlayError })=>{\n    const { playbackRate: globalPlaybackRate } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TimelineContext);\n    const frame = useCurrentFrame();\n    const absoluteFrame = useTimelinePosition();\n    const [playing] = usePlayingState();\n    const buffering = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BufferingContextReact);\n    const { fps } = useVideoConfig();\n    const mediaStartsAt = useMediaStartsAt();\n    const lastSeekDueToShift = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const lastSeek = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const logLevel = useLogLevel();\n    const mountTime = useMountTime();\n    if (!buffering) {\n        throw new Error(\"useMediaPlayback must be used inside a <BufferingContext>\");\n    }\n    const isVariableFpsVideoMap = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const onVariableFpsVideoDetected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useMediaPlayback.useCallback10[onVariableFpsVideoDetected]\": ()=>{\n            if (!src) {\n                return;\n            }\n            if (isVariableFpsVideoMap.current[src]) {\n                return;\n            }\n            Log.verbose(logLevel, `Detected ${src} as a variable FPS video. Disabling buffering while seeking.`);\n            isVariableFpsVideoMap.current[src] = true;\n        }\n    }[\"useMediaPlayback.useCallback10[onVariableFpsVideoDetected]\"], [\n        logLevel,\n        src\n    ]);\n    const rvcCurrentTime = useRequestVideoCallbackTime({\n        mediaRef,\n        mediaType,\n        lastSeek,\n        onVariableFpsVideoDetected\n    });\n    const mediaTagCurrentTime = useCurrentTimeOfMediaTagWithUpdateTimeStamp(mediaRef);\n    const desiredUnclampedTime = getMediaTime({\n        frame,\n        playbackRate: localPlaybackRate,\n        startFrom: -mediaStartsAt,\n        fps\n    });\n    const isMediaTagBuffering = useMediaBuffering({\n        element: mediaRef,\n        shouldBuffer: pauseWhenBuffering,\n        isPremounting,\n        isPostmounting,\n        logLevel,\n        mountTime,\n        src: src ?? null\n    });\n    const { bufferUntilFirstFrame, isBuffering } = useBufferUntilFirstFrame({\n        mediaRef,\n        mediaType,\n        onVariableFpsVideoDetected,\n        pauseWhenBuffering,\n        logLevel,\n        mountTime\n    });\n    const playbackRate = localPlaybackRate * globalPlaybackRate;\n    const acceptableTimeShiftButLessThanDuration = (()=>{\n        const DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_NORMAL_PLAYBACK = 0.45;\n        const DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_AMPLIFICATION = DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_NORMAL_PLAYBACK + 0.2;\n        const defaultAcceptableTimeshift = DEFAULT_ACCEPTABLE_TIMESHIFT_WITH_AMPLIFICATION;\n        if (mediaRef.current?.duration) {\n            return Math.min(mediaRef.current.duration, acceptableTimeshift ?? defaultAcceptableTimeshift);\n        }\n        return acceptableTimeshift ?? defaultAcceptableTimeshift;\n    })();\n    const isPlayerBuffering = useIsPlayerBuffering(buffering);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaPlayback.useEffect12\": ()=>{\n            if (mediaRef.current?.paused) {\n                return;\n            }\n            if (!playing) {\n                playbackLogging({\n                    logLevel,\n                    tag: \"pause\",\n                    message: `Pausing ${mediaRef.current?.src} because ${isPremounting ? \"media is premounting\" : isPostmounting ? \"media is postmounting\" : \"Player is not playing\"}`,\n                    mountTime\n                });\n                mediaRef.current?.pause();\n                return;\n            }\n            const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();\n            const playerBufferingNotStateButLive = buffering.buffering.current;\n            if (playerBufferingNotStateButLive && !isMediaTagBufferingOrStalled) {\n                playbackLogging({\n                    logLevel,\n                    tag: \"pause\",\n                    message: `Pausing ${mediaRef.current?.src} because player is buffering but media tag is not`,\n                    mountTime\n                });\n                mediaRef.current?.pause();\n            }\n        }\n    }[\"useMediaPlayback.useEffect12\"], [\n        isBuffering,\n        isMediaTagBuffering,\n        buffering,\n        isPlayerBuffering,\n        isPremounting,\n        logLevel,\n        mediaRef,\n        mediaType,\n        mountTime,\n        playing,\n        isPostmounting\n    ]);\n    const env = useRemotionEnvironment();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n        \"useMediaPlayback.useLayoutEffect5\": ()=>{\n            const playbackRateToSet = Math.max(0, playbackRate);\n            if (mediaRef.current && mediaRef.current.playbackRate !== playbackRateToSet) {\n                mediaRef.current.playbackRate = playbackRateToSet;\n            }\n        }\n    }[\"useMediaPlayback.useLayoutEffect5\"], [\n        mediaRef,\n        playbackRate\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMediaPlayback.useEffect12\": ()=>{\n            const tagName = mediaType === \"audio\" ? \"<Audio>\" : \"<Video>\";\n            if (!mediaRef.current) {\n                throw new Error(`No ${mediaType} ref found`);\n            }\n            if (!src) {\n                throw new Error(`No 'src' attribute was passed to the ${tagName} element.`);\n            }\n            const { duration } = mediaRef.current;\n            const shouldBeTime = !Number.isNaN(duration) && Number.isFinite(duration) ? Math.min(duration, desiredUnclampedTime) : desiredUnclampedTime;\n            const mediaTagTime = mediaTagCurrentTime.current.time;\n            const rvcTime = rvcCurrentTime.current?.time ?? null;\n            const isVariableFpsVideo = isVariableFpsVideoMap.current[src];\n            const timeShiftMediaTag = Math.abs(shouldBeTime - mediaTagTime);\n            const timeShiftRvcTag = rvcTime ? Math.abs(shouldBeTime - rvcTime) : null;\n            const mostRecentTimeshift = rvcCurrentTime.current?.lastUpdate && rvcCurrentTime.current.time > mediaTagCurrentTime.current.lastUpdate ? timeShiftRvcTag : timeShiftMediaTag;\n            const timeShift = timeShiftRvcTag && !isVariableFpsVideo ? mostRecentTimeshift : timeShiftMediaTag;\n            if (timeShift > acceptableTimeShiftButLessThanDuration && lastSeekDueToShift.current !== shouldBeTime) {\n                lastSeek.current = seek({\n                    mediaRef: mediaRef.current,\n                    time: shouldBeTime,\n                    logLevel,\n                    why: `because time shift is too big. shouldBeTime = ${shouldBeTime}, isTime = ${mediaTagTime}, requestVideoCallbackTime = ${rvcTime}, timeShift = ${timeShift}${isVariableFpsVideo ? \", isVariableFpsVideo = true\" : \"\"}, isPremounting = ${isPremounting}, isPostmounting = ${isPostmounting}, pauseWhenBuffering = ${pauseWhenBuffering}`,\n                    mountTime\n                });\n                lastSeekDueToShift.current = lastSeek.current;\n                if (playing) {\n                    if (playbackRate > 0) {\n                        bufferUntilFirstFrame(shouldBeTime);\n                    }\n                    if (mediaRef.current.paused) {\n                        playAndHandleNotAllowedError({\n                            mediaRef,\n                            mediaType,\n                            onAutoPlayError,\n                            logLevel,\n                            mountTime,\n                            reason: \"player is playing but media tag is paused, and just seeked\",\n                            isPlayer: env.isPlayer\n                        });\n                    }\n                }\n                if (!onlyWarnForMediaSeekingError) {\n                    warnAboutNonSeekableMedia(mediaRef.current, onlyWarnForMediaSeekingError ? \"console-warning\" : \"console-error\");\n                }\n                return;\n            }\n            const seekThreshold = playing ? 0.15 : 0.01;\n            const makesSenseToSeek = Math.abs(mediaRef.current.currentTime - shouldBeTime) > seekThreshold;\n            const isMediaTagBufferingOrStalled = isMediaTagBuffering || isBuffering();\n            const isSomethingElseBuffering = buffering.buffering.current && !isMediaTagBufferingOrStalled;\n            if (!playing || isSomethingElseBuffering) {\n                if (makesSenseToSeek) {\n                    lastSeek.current = seek({\n                        mediaRef: mediaRef.current,\n                        time: shouldBeTime,\n                        logLevel,\n                        why: `not playing or something else is buffering. time offset is over seek threshold (${seekThreshold})`,\n                        mountTime\n                    });\n                }\n                return;\n            }\n            if (!playing || buffering.buffering.current) {\n                return;\n            }\n            const pausedCondition = mediaRef.current.paused && !mediaRef.current.ended;\n            const firstFrameCondition = absoluteFrame === 0;\n            if (pausedCondition || firstFrameCondition) {\n                const reason = pausedCondition ? \"media tag is paused\" : \"absolute frame is 0\";\n                if (makesSenseToSeek) {\n                    lastSeek.current = seek({\n                        mediaRef: mediaRef.current,\n                        time: shouldBeTime,\n                        logLevel,\n                        why: `is over timeshift threshold (threshold = ${seekThreshold}) and ${reason}`,\n                        mountTime\n                    });\n                }\n                playAndHandleNotAllowedError({\n                    mediaRef,\n                    mediaType,\n                    onAutoPlayError,\n                    logLevel,\n                    mountTime,\n                    reason: `player is playing and ${reason}`,\n                    isPlayer: env.isPlayer\n                });\n                if (!isVariableFpsVideo && playbackRate > 0) {\n                    bufferUntilFirstFrame(shouldBeTime);\n                }\n            }\n        }\n    }[\"useMediaPlayback.useEffect12\"], [\n        absoluteFrame,\n        acceptableTimeShiftButLessThanDuration,\n        bufferUntilFirstFrame,\n        buffering.buffering,\n        rvcCurrentTime,\n        logLevel,\n        desiredUnclampedTime,\n        isBuffering,\n        isMediaTagBuffering,\n        mediaRef,\n        mediaType,\n        onlyWarnForMediaSeekingError,\n        playbackRate,\n        playing,\n        src,\n        onAutoPlayError,\n        isPremounting,\n        isPostmounting,\n        pauseWhenBuffering,\n        mountTime,\n        mediaTagCurrentTime,\n        env.isPlayer\n    ]);\n};\n// src/volume-position-state.ts\n\nvar MediaVolumeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    mediaMuted: false,\n    mediaVolume: 1\n});\nvar SetMediaVolumeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setMediaMuted: ()=>{\n        throw new Error(\"default\");\n    },\n    setMediaVolume: ()=>{\n        throw new Error(\"default\");\n    }\n});\nvar useMediaVolumeState = ()=>{\n    const { mediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);\n    const { setMediaVolume } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useMediaVolumeState.useMemo19\": ()=>{\n            return [\n                mediaVolume,\n                setMediaVolume\n            ];\n        }\n    }[\"useMediaVolumeState.useMemo19\"], [\n        mediaVolume,\n        setMediaVolume\n    ]);\n};\nvar useMediaMutedState = ()=>{\n    const { mediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MediaVolumeContext);\n    const { setMediaMuted } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SetMediaVolumeContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useMediaMutedState.useMemo19\": ()=>{\n            return [\n                mediaMuted,\n                setMediaMuted\n            ];\n        }\n    }[\"useMediaMutedState.useMemo19\"], [\n        mediaMuted,\n        setMediaMuted\n    ]);\n};\n// src/audio/AudioForPreview.tsx\n\nvar AudioForDevelopmentForwardRefFunction = (props, ref)=>{\n    const [initialShouldPreMountAudioElements] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.shouldPreMountAudioTags);\n    if (props.shouldPreMountAudioTags !== initialShouldPreMountAudioElements) {\n        throw new Error(\"Cannot change the behavior for pre-mounting audio tags dynamically.\");\n    }\n    const logLevel = useLogLevel();\n    const { volume, muted, playbackRate, shouldPreMountAudioTags, src, onDuration, acceptableTimeShiftInSeconds, _remotionInternalNeedsDurationCalculation, _remotionInternalNativeLoopPassed, _remotionInternalStack, allowAmplificationDuringRender, name, pauseWhenBuffering, showInTimeline, loopVolumeCurveBehavior, stack, crossOrigin, delayRenderRetries, delayRenderTimeoutInMilliseconds, toneFrequency, useWebAudioApi, onError, onNativeError, audioStreamIndex, ...nativeProps } = props;\n    const _propsValid = true;\n    if (!_propsValid) {\n        throw new Error(\"typecheck error\");\n    }\n    const [mediaVolume] = useMediaVolumeState();\n    const [mediaMuted] = useMediaMutedState();\n    const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? \"repeat\");\n    const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);\n    if (!src) {\n        throw new TypeError(\"No 'src' was passed to <Audio>.\");\n    }\n    const preloadedSrc = usePreload(src);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const [timelineId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"AudioForDevelopmentForwardRefFunction.useState14\": ()=>String(Math.random())\n    }[\"AudioForDevelopmentForwardRefFunction.useState14\"]);\n    const isSequenceHidden = hidden[timelineId] ?? false;\n    const userPreferredVolume = evaluateVolume({\n        frame: volumePropFrame,\n        volume,\n        mediaVolume\n    });\n    const crossOriginValue = getCrossOriginValue({\n        crossOrigin,\n        requestsVideoFrame: false\n    });\n    const propsToPass = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"AudioForDevelopmentForwardRefFunction.useMemo20[propsToPass]\": ()=>{\n            return {\n                muted: muted || mediaMuted || isSequenceHidden || userPreferredVolume <= 0,\n                src: preloadedSrc,\n                loop: _remotionInternalNativeLoopPassed,\n                crossOrigin: crossOriginValue,\n                ...nativeProps\n            };\n        }\n    }[\"AudioForDevelopmentForwardRefFunction.useMemo20[propsToPass]\"], [\n        _remotionInternalNativeLoopPassed,\n        isSequenceHidden,\n        mediaMuted,\n        muted,\n        nativeProps,\n        preloadedSrc,\n        userPreferredVolume,\n        crossOriginValue\n    ]);\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"AudioForDevelopmentForwardRefFunction.useMemo20[id]\": ()=>`audio-${random(src ?? \"\")}-${sequenceContext?.relativeFrom}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.durationInFrames}-muted:${props.muted}-loop:${props.loop}`\n    }[\"AudioForDevelopmentForwardRefFunction.useMemo20[id]\"], [\n        src,\n        sequenceContext?.relativeFrom,\n        sequenceContext?.cumulatedFrom,\n        sequenceContext?.durationInFrames,\n        props.muted,\n        props.loop\n    ]);\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    if (!context) {\n        throw new Error(\"SharedAudioContext not found\");\n    }\n    const { el: audioRef, mediaElementSourceNode } = useSharedAudio({\n        aud: propsToPass,\n        audioId: id,\n        premounting: Boolean(sequenceContext?.premounting)\n    });\n    useMediaInTimeline({\n        volume,\n        mediaVolume,\n        mediaRef: audioRef,\n        src,\n        mediaType: \"audio\",\n        playbackRate: playbackRate ?? 1,\n        displayName: name ?? null,\n        id: timelineId,\n        stack: _remotionInternalStack,\n        showInTimeline,\n        premountDisplay: null,\n        postmountDisplay: null,\n        onAutoPlayError: null,\n        isPremounting: Boolean(sequenceContext?.premounting),\n        isPostmounting: Boolean(sequenceContext?.postmounting)\n    });\n    useMediaPlayback({\n        mediaRef: audioRef,\n        src,\n        mediaType: \"audio\",\n        playbackRate: playbackRate ?? 1,\n        onlyWarnForMediaSeekingError: false,\n        acceptableTimeshift: acceptableTimeShiftInSeconds ?? null,\n        isPremounting: Boolean(sequenceContext?.premounting),\n        isPostmounting: Boolean(sequenceContext?.postmounting),\n        pauseWhenBuffering,\n        onAutoPlayError: null\n    });\n    useVolume({\n        logLevel,\n        mediaRef: audioRef,\n        source: mediaElementSourceNode,\n        volume: userPreferredVolume,\n        shouldUseWebAudioApi: useWebAudioApi ?? false\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"AudioForDevelopmentForwardRefFunction.useImperativeHandle5\": ()=>{\n            return audioRef.current;\n        }\n    }[\"AudioForDevelopmentForwardRefFunction.useImperativeHandle5\"], [\n        audioRef\n    ]);\n    const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDuration);\n    currentOnDurationCallback.current = onDuration;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"AudioForDevelopmentForwardRefFunction.useEffect13\": ()=>{\n            const { current } = audioRef;\n            if (!current) {\n                return;\n            }\n            if (current.duration) {\n                currentOnDurationCallback.current?.(current.src, current.duration);\n                return;\n            }\n            const onLoadedMetadata = {\n                \"AudioForDevelopmentForwardRefFunction.useEffect13.onLoadedMetadata\": ()=>{\n                    currentOnDurationCallback.current?.(current.src, current.duration);\n                }\n            }[\"AudioForDevelopmentForwardRefFunction.useEffect13.onLoadedMetadata\"];\n            current.addEventListener(\"loadedmetadata\", onLoadedMetadata);\n            return ({\n                \"AudioForDevelopmentForwardRefFunction.useEffect13\": ()=>{\n                    current.removeEventListener(\"loadedmetadata\", onLoadedMetadata);\n                }\n            })[\"AudioForDevelopmentForwardRefFunction.useEffect13\"];\n        }\n    }[\"AudioForDevelopmentForwardRefFunction.useEffect13\"], [\n        audioRef,\n        src\n    ]);\n    if (initialShouldPreMountAudioElements) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", {\n        ref: audioRef,\n        preload: \"metadata\",\n        crossOrigin: crossOriginValue,\n        ...propsToPass\n    });\n};\nvar AudioForPreview = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForDevelopmentForwardRefFunction);\n// src/audio/AudioForRendering.tsx\n\n\nvar AudioForRenderingRefForwardingFunction = (props, ref)=>{\n    const audioRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { volume: volumeProp, playbackRate, allowAmplificationDuringRender, onDuration, toneFrequency, _remotionInternalNeedsDurationCalculation, _remotionInternalNativeLoopPassed, acceptableTimeShiftInSeconds, name, onNativeError, delayRenderRetries, delayRenderTimeoutInMilliseconds, loopVolumeCurveBehavior, pauseWhenBuffering, audioStreamIndex, ...nativeProps } = props;\n    const absoluteFrame = useTimelinePosition();\n    const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? \"repeat\");\n    const frame = useCurrentFrame();\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"AudioForRenderingRefForwardingFunction.useMemo21[id]\": ()=>`audio-${random(props.src ?? \"\")}-${sequenceContext?.relativeFrom}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.durationInFrames}`\n    }[\"AudioForRenderingRefForwardingFunction.useMemo21[id]\"], [\n        props.src,\n        sequenceContext?.relativeFrom,\n        sequenceContext?.cumulatedFrom,\n        sequenceContext?.durationInFrames\n    ]);\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropFrame,\n        mediaVolume: 1\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"AudioForRenderingRefForwardingFunction.useImperativeHandle6\": ()=>{\n            return audioRef.current;\n        }\n    }[\"AudioForRenderingRefForwardingFunction.useImperativeHandle6\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"AudioForRenderingRefForwardingFunction.useEffect14\": ()=>{\n            if (!props.src) {\n                throw new Error(\"No src passed\");\n            }\n            if (!window.remotion_audioEnabled) {\n                return;\n            }\n            if (props.muted) {\n                return;\n            }\n            if (volume <= 0) {\n                return;\n            }\n            registerRenderAsset({\n                type: \"audio\",\n                src: getAbsoluteSrc(props.src),\n                id,\n                frame: absoluteFrame,\n                volume,\n                mediaFrame: frame,\n                playbackRate: props.playbackRate ?? 1,\n                toneFrequency: toneFrequency ?? null,\n                audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),\n                audioStreamIndex: audioStreamIndex ?? 0\n            });\n            return ({\n                \"AudioForRenderingRefForwardingFunction.useEffect14\": ()=>unregisterRenderAsset(id)\n            })[\"AudioForRenderingRefForwardingFunction.useEffect14\"];\n        }\n    }[\"AudioForRenderingRefForwardingFunction.useEffect14\"], [\n        props.muted,\n        props.src,\n        registerRenderAsset,\n        absoluteFrame,\n        id,\n        unregisterRenderAsset,\n        volume,\n        volumePropFrame,\n        frame,\n        playbackRate,\n        props.playbackRate,\n        toneFrequency,\n        sequenceContext?.relativeFrom,\n        audioStreamIndex\n    ]);\n    const { src } = props;\n    const needsToRenderAudioTag = ref || _remotionInternalNeedsDurationCalculation;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n        \"AudioForRenderingRefForwardingFunction.useLayoutEffect6\": ()=>{\n            if (window.process?.env?.NODE_ENV === \"test\") {\n                return;\n            }\n            if (!needsToRenderAudioTag) {\n                return;\n            }\n            const newHandle = delayRender2(\"Loading <Audio> duration with src=\" + src, {\n                retries: delayRenderRetries ?? undefined,\n                timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined\n            });\n            const { current } = audioRef;\n            const didLoad = {\n                \"AudioForRenderingRefForwardingFunction.useLayoutEffect6.didLoad\": ()=>{\n                    if (current?.duration) {\n                        onDuration(current.src, current.duration);\n                    }\n                    continueRender2(newHandle);\n                }\n            }[\"AudioForRenderingRefForwardingFunction.useLayoutEffect6.didLoad\"];\n            if (current?.duration) {\n                onDuration(current.src, current.duration);\n                continueRender2(newHandle);\n            } else {\n                current?.addEventListener(\"loadedmetadata\", didLoad, {\n                    once: true\n                });\n            }\n            return ({\n                \"AudioForRenderingRefForwardingFunction.useLayoutEffect6\": ()=>{\n                    current?.removeEventListener(\"loadedmetadata\", didLoad);\n                    continueRender2(newHandle);\n                }\n            })[\"AudioForRenderingRefForwardingFunction.useLayoutEffect6\"];\n        }\n    }[\"AudioForRenderingRefForwardingFunction.useLayoutEffect6\"], [\n        src,\n        onDuration,\n        needsToRenderAudioTag,\n        delayRenderRetries,\n        delayRenderTimeoutInMilliseconds,\n        continueRender2,\n        delayRender2\n    ]);\n    if (!needsToRenderAudioTag) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"audio\", {\n        ref: audioRef,\n        ...nativeProps,\n        onError: onNativeError\n    });\n};\nvar AudioForRendering = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioForRenderingRefForwardingFunction);\n// src/audio/Audio.tsx\n\nvar AudioRefForwardingFunction = (props, ref)=>{\n    const audioContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    const { startFrom, endAt, trimBefore, trimAfter, name, stack, pauseWhenBuffering, showInTimeline, onError: onRemotionError, ...otherProps } = props;\n    const { loop, ...propsOtherThanLoop } = props;\n    const { fps } = useVideoConfig();\n    const environment = useRemotionEnvironment();\n    const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);\n    if (typeof props.src !== \"string\") {\n        throw new TypeError(`The \\`<Audio>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props.src)} instead.`);\n    }\n    const preloadedSrc = usePreload(props.src);\n    const onError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"AudioRefForwardingFunction.useCallback11[onError]\": (e)=>{\n            console.log(e.currentTarget.error);\n            const errMessage = `Could not play audio with src ${preloadedSrc}: ${e.currentTarget.error}. See https://remotion.dev/docs/media-playback-error for help.`;\n            if (loop) {\n                if (onRemotionError) {\n                    onRemotionError(new Error(errMessage));\n                    return;\n                }\n                cancelRender(new Error(errMessage));\n            } else {\n                onRemotionError?.(new Error(errMessage));\n                console.warn(errMessage);\n            }\n        }\n    }[\"AudioRefForwardingFunction.useCallback11[onError]\"], [\n        loop,\n        onRemotionError,\n        preloadedSrc\n    ]);\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"AudioRefForwardingFunction.useCallback11[onDuration]\": (src, durationInSeconds)=>{\n            setDurations({\n                type: \"got-duration\",\n                durationInSeconds,\n                src\n            });\n        }\n    }[\"AudioRefForwardingFunction.useCallback11[onDuration]\"], [\n        setDurations\n    ]);\n    const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props.src)];\n    validateMediaTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    const { trimBeforeValue, trimAfterValue } = resolveTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    if (loop && durationFetched !== undefined) {\n        if (!Number.isFinite(durationFetched)) {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {\n                ...propsOtherThanLoop,\n                ref,\n                _remotionInternalNativeLoopPassed: true\n            });\n        }\n        const duration = durationFetched * fps;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, {\n            layout: \"none\",\n            durationInFrames: calculateLoopDuration({\n                endAt: trimAfterValue ?? endAt,\n                mediaDuration: duration,\n                playbackRate: props.playbackRate ?? 1,\n                startFrom: trimBeforeValue ?? startFrom\n            }),\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {\n                ...propsOtherThanLoop,\n                ref,\n                _remotionInternalNativeLoopPassed: true\n            })\n        });\n    }\n    if (typeof trimBeforeValue !== \"undefined\" || typeof trimAfterValue !== \"undefined\") {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n            layout: \"none\",\n            from: 0 - (trimBeforeValue ?? 0),\n            showInTimeline: false,\n            durationInFrames: trimAfterValue,\n            name,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Audio, {\n                _remotionInternalNeedsDurationCalculation: Boolean(loop),\n                pauseWhenBuffering: pauseWhenBuffering ?? false,\n                ...otherProps,\n                ref\n            })\n        });\n    }\n    validateMediaProps(props, \"Audio\");\n    if (environment.isRendering) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForRendering, {\n            onDuration,\n            ...props,\n            ref,\n            onNativeError: onError,\n            _remotionInternalNeedsDurationCalculation: Boolean(loop)\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(AudioForPreview, {\n        _remotionInternalNativeLoopPassed: props._remotionInternalNativeLoopPassed ?? false,\n        _remotionInternalStack: stack ?? null,\n        shouldPreMountAudioTags: audioContext !== null && audioContext.numberOfAudioTags > 0,\n        ...props,\n        ref,\n        onNativeError: onError,\n        onDuration,\n        pauseWhenBuffering: pauseWhenBuffering ?? false,\n        _remotionInternalNeedsDurationCalculation: Boolean(loop),\n        showInTimeline: showInTimeline ?? true\n    });\n};\nvar Audio = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(AudioRefForwardingFunction);\naddSequenceStackTraces(Audio);\n// src/Composition.tsx\n\n\n// src/Folder.tsx\n\n// src/validation/validate-folder-name.ts\nvar getRegex = ()=>/^([a-zA-Z0-9-\\u4E00-\\u9FFF])+$/g;\nvar isFolderNameValid = (name)=>name.match(getRegex());\nvar validateFolderName = (name)=>{\n    if (name === undefined || name === null) {\n        throw new TypeError(\"You must pass a name to a <Folder />.\");\n    }\n    if (typeof name !== \"string\") {\n        throw new TypeError(`The \"name\" you pass into <Folder /> must be a string. Got: ${typeof name}`);\n    }\n    if (!isFolderNameValid(name)) {\n        throw new Error(`Folder name can only contain a-z, A-Z, 0-9 and -. You passed ${name}`);\n    }\n};\nvar invalidFolderNameErrorMessage = `Folder name must match ${String(getRegex())}`;\n// src/Folder.tsx\n\nvar FolderContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    folderName: null,\n    parentName: null\n});\nvar Folder = ({ name, children })=>{\n    const parent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);\n    const { registerFolder, unregisterFolder } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);\n    validateFolderName(name);\n    const parentNameArr = [\n        parent.parentName,\n        parent.folderName\n    ].filter(truthy);\n    const parentName = parentNameArr.length === 0 ? null : parentNameArr.join(\"/\");\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Folder.useMemo22[value]\": ()=>{\n            return {\n                folderName: name,\n                parentName\n            };\n        }\n    }[\"Folder.useMemo22[value]\"], [\n        name,\n        parentName\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Folder.useEffect15\": ()=>{\n            registerFolder(name, parentName);\n            return ({\n                \"Folder.useEffect15\": ()=>{\n                    unregisterFolder(name, parentName);\n                }\n            })[\"Folder.useEffect15\"];\n        }\n    }[\"Folder.useEffect15\"], [\n        name,\n        parent.folderName,\n        parentName,\n        registerFolder,\n        unregisterFolder\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(FolderContext.Provider, {\n        value,\n        children\n    });\n};\n// src/loading-indicator.tsx\n\nvar rotate = {\n    transform: `rotate(90deg)`\n};\nvar ICON_SIZE = 40;\nvar label = {\n    color: \"white\",\n    fontSize: 14,\n    fontFamily: \"sans-serif\"\n};\nvar container = {\n    justifyContent: \"center\",\n    alignItems: \"center\"\n};\nvar Loading = ()=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(AbsoluteFill, {\n        style: container,\n        id: \"remotion-comp-loading\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"style\", {\n                type: \"text/css\",\n                children: `\n\t\t\t\t@keyframes anim {\n\t\t\t\t\tfrom {\n\t\t\t\t\t\topacity: 0\n\t\t\t\t\t}\n\t\t\t\t\tto {\n\t\t\t\t\t\topacity: 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#remotion-comp-loading {\n\t\t\t\t\tanimation: anim 2s;\n\t\t\t\t\tanimation-fill-mode: forwards;\n\t\t\t\t}\n\t\t\t`\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"svg\", {\n                width: ICON_SIZE,\n                height: ICON_SIZE,\n                viewBox: \"-100 -100 400 400\",\n                style: rotate,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"path\", {\n                    fill: \"#555\",\n                    stroke: \"#555\",\n                    strokeWidth: \"100\",\n                    strokeLinejoin: \"round\",\n                    d: \"M 2 172 a 196 100 0 0 0 195 5 A 196 240 0 0 0 100 2.259 A 196 240 0 0 0 2 172 z\"\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"p\", {\n                style: label,\n                children: [\n                    \"Resolving \",\n                    \"<Suspense>\",\n                    \"...\"\n                ]\n            })\n        ]\n    });\n};\n// src/portal-node.ts\nvar _portalNode = null;\nvar portalNode = ()=>{\n    if (!_portalNode) {\n        if (typeof document === \"undefined\") {\n            throw new Error(\"Tried to call an API that only works in the browser from outside the browser\");\n        }\n        _portalNode = document.createElement(\"div\");\n        _portalNode.style.position = \"absolute\";\n        _portalNode.style.top = \"0px\";\n        _portalNode.style.left = \"0px\";\n        _portalNode.style.right = \"0px\";\n        _portalNode.style.bottom = \"0px\";\n        _portalNode.style.width = \"100%\";\n        _portalNode.style.height = \"100%\";\n        _portalNode.style.display = \"flex\";\n        _portalNode.style.flexDirection = \"column\";\n        const containerNode = document.createElement(\"div\");\n        containerNode.style.position = \"fixed\";\n        containerNode.style.top = -999999 + \"px\";\n        containerNode.appendChild(_portalNode);\n        document.body.appendChild(containerNode);\n    }\n    return _portalNode;\n};\n// src/use-lazy-component.ts\n\nvar useLazyComponent = ({ compProps, componentName, noSuspense })=>{\n    const lazy = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useLazyComponent.useMemo23[lazy]\": ()=>{\n            if (\"component\" in compProps) {\n                if (typeof document === \"undefined\" || noSuspense) {\n                    return compProps.component;\n                }\n                if (typeof compProps.component === \"undefined\") {\n                    throw new Error(`A value of \\`undefined\\` was passed to the \\`component\\` prop. Check the value you are passing to the <${componentName}/> component.`);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.lazy({\n                    \"useLazyComponent.useMemo23[lazy]\": ()=>Promise.resolve({\n                            default: compProps.component\n                        })\n                }[\"useLazyComponent.useMemo23[lazy]\"]);\n            }\n            if (\"lazyComponent\" in compProps && typeof compProps.lazyComponent !== \"undefined\") {\n                if (typeof compProps.lazyComponent === \"undefined\") {\n                    throw new Error(`A value of \\`undefined\\` was passed to the \\`lazyComponent\\` prop. Check the value you are passing to the <${componentName}/> component.`);\n                }\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.lazy(compProps.lazyComponent);\n            }\n            throw new Error(\"You must pass either 'component' or 'lazyComponent'\");\n        }\n    }[\"useLazyComponent.useMemo23[lazy]\"], [\n        compProps.component,\n        compProps.lazyComponent\n    ]);\n    return lazy;\n};\n// src/validation/validate-composition-id.ts\nvar getRegex2 = ()=>/^([a-zA-Z0-9-\\u4E00-\\u9FFF])+$/g;\nvar isCompositionIdValid = (id)=>id.match(getRegex2());\nvar validateCompositionId = (id)=>{\n    if (!isCompositionIdValid(id)) {\n        throw new Error(`Composition id can only contain a-z, A-Z, 0-9, CJK characters and -. You passed ${id}`);\n    }\n};\nvar invalidCompositionErrorMessage = `Composition ID must match ${String(getRegex2())}`;\n// src/validation/validate-default-props.ts\nvar validateDefaultAndInputProps = (defaultProps, name, compositionId)=>{\n    if (!defaultProps) {\n        return;\n    }\n    if (typeof defaultProps !== \"object\") {\n        throw new Error(`\"${name}\" must be an object, but you passed a value of type ${typeof defaultProps}`);\n    }\n    if (Array.isArray(defaultProps)) {\n        throw new Error(`\"${name}\" must be an object, an array was passed ${compositionId ? `for composition \"${compositionId}\"` : \"\"}`);\n    }\n};\n// src/Composition.tsx\n\nvar Fallback = ()=>{\n    const { continueRender: continueRender2, delayRender: delayRender2 } = useDelayRender();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"Fallback.useEffect16\": ()=>{\n            const fallback = delayRender2(\"Waiting for Root component to unsuspend\");\n            return ({\n                \"Fallback.useEffect16\": ()=>continueRender2(fallback)\n            })[\"Fallback.useEffect16\"];\n        }\n    }[\"Fallback.useEffect16\"], [\n        continueRender2,\n        delayRender2\n    ]);\n    return null;\n};\nvar InnerComposition = ({ width, height, fps, durationInFrames, id, defaultProps, schema, ...compProps })=>{\n    const compManager = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);\n    const { registerComposition, unregisterComposition } = compManager;\n    const video = useVideo();\n    const lazy = useLazyComponent({\n        compProps,\n        componentName: \"Composition\",\n        noSuspense: false\n    });\n    const nonce = useNonce();\n    const isPlayer = useIsPlayer();\n    const environment = useRemotionEnvironment();\n    const canUseComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CanUseRemotionHooks);\n    if (canUseComposition) {\n        if (isPlayer) {\n            throw new Error(\"<Composition> was mounted inside the `component` that was passed to the <Player>. See https://remotion.dev/docs/wrong-composition-mount for help.\");\n        }\n        throw new Error(\"<Composition> mounted inside another composition. See https://remotion.dev/docs/wrong-composition-mount for help.\");\n    }\n    const { folderName, parentName } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(FolderContext);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"InnerComposition.useEffect16\": ()=>{\n            if (!id) {\n                throw new Error(\"No id for composition passed.\");\n            }\n            validateCompositionId(id);\n            validateDefaultAndInputProps(defaultProps, \"defaultProps\", id);\n            registerComposition({\n                durationInFrames: durationInFrames ?? undefined,\n                fps: fps ?? undefined,\n                height: height ?? undefined,\n                width: width ?? undefined,\n                id,\n                folderName,\n                component: lazy,\n                defaultProps: serializeThenDeserializeInStudio(defaultProps ?? {}),\n                nonce,\n                parentFolderName: parentName,\n                schema: schema ?? null,\n                calculateMetadata: compProps.calculateMetadata ?? null\n            });\n            return ({\n                \"InnerComposition.useEffect16\": ()=>{\n                    unregisterComposition(id);\n                }\n            })[\"InnerComposition.useEffect16\"];\n        }\n    }[\"InnerComposition.useEffect16\"], [\n        durationInFrames,\n        fps,\n        height,\n        lazy,\n        id,\n        folderName,\n        defaultProps,\n        width,\n        nonce,\n        parentName,\n        schema,\n        compProps.calculateMetadata,\n        registerComposition,\n        unregisterComposition\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"InnerComposition.useEffect16\": ()=>{\n            window.dispatchEvent(new CustomEvent(PROPS_UPDATED_EXTERNALLY, {\n                detail: {\n                    resetUnsaved: id\n                }\n            }));\n        }\n    }[\"InnerComposition.useEffect16\"], [\n        defaultProps,\n        id\n    ]);\n    const resolved = useResolvedVideoConfig(id);\n    if (environment.isStudio && video && video.component === lazy) {\n        const Comp = lazy;\n        if (resolved === null || resolved.type !== \"success\" && resolved.type !== \"success-and-refreshing\") {\n            return null;\n        }\n        return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n                fallback: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loading, {}),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, {\n                    ...resolved.result.props ?? {}\n                })\n            })\n        }), portalNode());\n    }\n    if (environment.isRendering && video && video.component === lazy) {\n        const Comp = lazy;\n        if (resolved === null || resolved.type !== \"success\" && resolved.type !== \"success-and-refreshing\") {\n            return null;\n        }\n        return /*#__PURE__*/ (0,react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal)(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooksProvider, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n                fallback: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Fallback, {}),\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Comp, {\n                    ...resolved.result.props ?? {}\n                })\n            })\n        }), portalNode());\n    }\n    return null;\n};\nvar Composition = (props2)=>{\n    const { onlyRenderComposition } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CompositionSetters);\n    if (onlyRenderComposition && onlyRenderComposition !== props2.id) {\n        return null;\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(InnerComposition, {\n        ...props2\n    });\n};\n// src/bezier.ts\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1 / (kSplineTableSize - 1);\nvar float32ArraySupported = typeof Float32Array === \"function\";\nfunction a(aA1, aA2) {\n    return 1 - 3 * aA2 + 3 * aA1;\n}\nfunction b(aA1, aA2) {\n    return 3 * aA2 - 6 * aA1;\n}\nfunction c(aA1) {\n    return 3 * aA1;\n}\nfunction calcBezier(aT, aA1, aA2) {\n    return ((a(aA1, aA2) * aT + b(aA1, aA2)) * aT + c(aA1)) * aT;\n}\nfunction getSlope(aT, aA1, aA2) {\n    return 3 * a(aA1, aA2) * aT * aT + 2 * b(aA1, aA2) * aT + c(aA1);\n}\nfunction binarySubdivide({ aX, _aA, _aB, mX1, mX2 }) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    let aA = _aA;\n    let aB = _aB;\n    do {\n        currentT = aA + (aB - aA) / 2;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0) {\n            aB = currentT;\n        } else {\n            aA = currentT;\n        }\n    }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n}\nfunction newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n    let aGuessT = _aGuessT;\n    for(let i = 0; i < NEWTON_ITERATIONS; ++i){\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nfunction bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n        throw new Error(\"bezier x values must be in [0, 1] range\");\n    }\n    const sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n        for(let i = 0; i < kSplineTableSize; ++i){\n            sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n        }\n    }\n    function getTForX(aX) {\n        let intervalStart = 0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample){\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        if (initialSlope === 0) {\n            return guessForT;\n        }\n        return binarySubdivide({\n            aX,\n            _aA: intervalStart,\n            _aB: intervalStart + kSampleStepSize,\n            mX1,\n            mX2\n        });\n    }\n    return function(x) {\n        if (mX1 === mY1 && mX2 === mY2) {\n            return x;\n        }\n        if (x === 0) {\n            return 0;\n        }\n        if (x === 1) {\n            return 1;\n        }\n        return calcBezier(getTForX(x), mY1, mY2);\n    };\n}\n// src/easing.ts\nclass Easing {\n    static step0(n) {\n        return n > 0 ? 1 : 0;\n    }\n    static step1(n) {\n        return n >= 1 ? 1 : 0;\n    }\n    static linear(t) {\n        return t;\n    }\n    static ease(t) {\n        return Easing.bezier(0.42, 0, 1, 1)(t);\n    }\n    static quad(t) {\n        return t * t;\n    }\n    static cubic(t) {\n        return t * t * t;\n    }\n    static poly(n) {\n        return (t)=>t ** n;\n    }\n    static sin(t) {\n        return 1 - Math.cos(t * Math.PI / 2);\n    }\n    static circle(t) {\n        return 1 - Math.sqrt(1 - t * t);\n    }\n    static exp(t) {\n        return 2 ** (10 * (t - 1));\n    }\n    static elastic(bounciness = 1) {\n        const p = bounciness * Math.PI;\n        return (t)=>1 - Math.cos(t * Math.PI / 2) ** 3 * Math.cos(t * p);\n    }\n    static back(s = 1.70158) {\n        return (t)=>t * t * ((s + 1) * t - s);\n    }\n    static bounce(t) {\n        if (t < 1 / 2.75) {\n            return 7.5625 * t * t;\n        }\n        if (t < 2 / 2.75) {\n            const t2_ = t - 1.5 / 2.75;\n            return 7.5625 * t2_ * t2_ + 0.75;\n        }\n        if (t < 2.5 / 2.75) {\n            const t2_ = t - 2.25 / 2.75;\n            return 7.5625 * t2_ * t2_ + 0.9375;\n        }\n        const t2 = t - 2.625 / 2.75;\n        return 7.5625 * t2 * t2 + 0.984375;\n    }\n    static bezier(x1, y1, x2, y2) {\n        return bezier(x1, y1, x2, y2);\n    }\n    static in(easing) {\n        return easing;\n    }\n    static out(easing) {\n        return (t)=>1 - easing(1 - t);\n    }\n    static inOut(easing) {\n        return (t)=>{\n            if (t < 0.5) {\n                return easing(t * 2) / 2;\n            }\n            return 1 - easing((1 - t) * 2) / 2;\n        };\n    }\n}\n// src/v5-flag.ts\nvar ENABLE_V5_BREAKING_CHANGES = false;\n// src/get-static-files.ts\nvar warnedServer = false;\nvar warnedPlayer = false;\nvar warnServerOnce = ()=>{\n    if (warnedServer) {\n        return;\n    }\n    warnedServer = true;\n    console.warn(\"Called getStaticFiles() on the server. The API is only available in the browser. An empty array was returned.\");\n};\nvar warnPlayerOnce = ()=>{\n    if (warnedPlayer) {\n        return;\n    }\n    warnedPlayer = true;\n    console.warn(\"Called getStaticFiles() while using the Remotion Player. The API is only available while using the Remotion Studio. An empty array was returned.\");\n};\nvar getStaticFiles = ()=>{\n    if (ENABLE_V5_BREAKING_CHANGES) {\n        throw new Error(\"getStaticFiles() has moved into the `@remotion/studio` package. Update your imports.\");\n    }\n    if (typeof document === \"undefined\") {\n        warnServerOnce();\n        return [];\n    }\n    if (window.remotion_isPlayer) {\n        warnPlayerOnce();\n        return [];\n    }\n    return window.remotion_staticFiles;\n};\n// src/IFrame.tsx\n\n\nvar IFrameRefForwarding = ({ onLoad, onError, delayRenderRetries, delayRenderTimeoutInMilliseconds, ...props2 }, ref)=>{\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    const [handle] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"IFrameRefForwarding.useState15\": ()=>delayRender2(`Loading <IFrame> with source ${props2.src}`, {\n                retries: delayRenderRetries ?? undefined,\n                timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined\n            })\n    }[\"IFrameRefForwarding.useState15\"]);\n    const didLoad = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"IFrameRefForwarding.useCallback12[didLoad]\": (e)=>{\n            continueRender2(handle);\n            onLoad?.(e);\n        }\n    }[\"IFrameRefForwarding.useCallback12[didLoad]\"], [\n        handle,\n        onLoad,\n        continueRender2\n    ]);\n    const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"IFrameRefForwarding.useCallback12[didGetError]\": (e)=>{\n            continueRender2(handle);\n            if (onError) {\n                onError(e);\n            } else {\n                console.error(\"Error loading iframe:\", e, \"Handle the event using the onError() prop to make this message disappear.\");\n            }\n        }\n    }[\"IFrameRefForwarding.useCallback12[didGetError]\"], [\n        handle,\n        onError,\n        continueRender2\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"iframe\", {\n        ...props2,\n        ref,\n        onError: didGetError,\n        onLoad: didLoad\n    });\n};\nvar IFrame = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(IFrameRefForwarding);\n// src/Img.tsx\n\n\nfunction exponentialBackoff(errorCount) {\n    return 1000 * 2 ** (errorCount - 1);\n}\nvar ImgRefForwarding = ({ onError, maxRetries = 2, src, pauseWhenLoading, delayRenderRetries, delayRenderTimeoutInMilliseconds, onImageFrame, crossOrigin, ...props2 }, ref)=>{\n    const imageRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const errors = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({});\n    const { delayPlayback } = useBufferState();\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    if (!src) {\n        throw new Error('No \"src\" prop was passed to <Img>.');\n    }\n    const _propsValid = true;\n    if (!_propsValid) {\n        throw new Error(\"typecheck error\");\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"ImgRefForwarding.useImperativeHandle7\": ()=>{\n            return imageRef.current;\n        }\n    }[\"ImgRefForwarding.useImperativeHandle7\"], []);\n    const actualSrc = usePreload(src);\n    const retryIn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"ImgRefForwarding.useCallback13[retryIn]\": (timeout)=>{\n            if (!imageRef.current) {\n                return;\n            }\n            const currentSrc = imageRef.current.src;\n            setTimeout({\n                \"ImgRefForwarding.useCallback13[retryIn]\": ()=>{\n                    if (!imageRef.current) {\n                        return;\n                    }\n                    const newSrc = imageRef.current?.src;\n                    if (newSrc !== currentSrc) {\n                        return;\n                    }\n                    imageRef.current.removeAttribute(\"src\");\n                    imageRef.current.setAttribute(\"src\", newSrc);\n                }\n            }[\"ImgRefForwarding.useCallback13[retryIn]\"], timeout);\n        }\n    }[\"ImgRefForwarding.useCallback13[retryIn]\"], []);\n    const didGetError = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"ImgRefForwarding.useCallback13[didGetError]\": (e)=>{\n            if (!errors.current) {\n                return;\n            }\n            errors.current[imageRef.current?.src] = (errors.current[imageRef.current?.src] ?? 0) + 1;\n            if (onError && (errors.current[imageRef.current?.src] ?? 0) > maxRetries) {\n                onError(e);\n                return;\n            }\n            if ((errors.current[imageRef.current?.src] ?? 0) <= maxRetries) {\n                const backoff = exponentialBackoff(errors.current[imageRef.current?.src] ?? 0);\n                console.warn(`Could not load image with source ${imageRef.current?.src}, retrying again in ${backoff}ms`);\n                retryIn(backoff);\n                return;\n            }\n            cancelRender(\"Error loading image with src: \" + imageRef.current?.src);\n        }\n    }[\"ImgRefForwarding.useCallback13[didGetError]\"], [\n        maxRetries,\n        onError,\n        retryIn\n    ]);\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    if (false) {}\n    const crossOriginValue = getCrossOriginValue({\n        crossOrigin,\n        requestsVideoFrame: false\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"img\", {\n        ...props2,\n        ref: imageRef,\n        crossOrigin: crossOriginValue,\n        onError: didGetError\n    });\n};\nvar Img = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(ImgRefForwarding);\n// src/internals.ts\n\n// src/CompositionManager.tsx\n\n\nvar compositionsRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\nvar CompositionManagerProvider = ({ children, numberOfAudioTags, onlyRenderComposition, currentCompositionMetadata, audioLatencyHint })=>{\n    const [compositions, setCompositions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const currentcompositionsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(compositions);\n    const [folders, setFolders] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [canvasContent, setCanvasContent] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const updateCompositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[updateCompositions]\": (updateComps)=>{\n            setCompositions({\n                \"CompositionManagerProvider.useCallback14[updateCompositions]\": (comps)=>{\n                    const updated = updateComps(comps);\n                    currentcompositionsRef.current = updated;\n                    return updated;\n                }\n            }[\"CompositionManagerProvider.useCallback14[updateCompositions]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[updateCompositions]\"], []);\n    const registerComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[registerComposition]\": (comp)=>{\n            updateCompositions({\n                \"CompositionManagerProvider.useCallback14[registerComposition]\": (comps)=>{\n                    if (comps.find({\n                        \"CompositionManagerProvider.useCallback14[registerComposition]\": (c2)=>c2.id === comp.id\n                    }[\"CompositionManagerProvider.useCallback14[registerComposition]\"])) {\n                        throw new Error(`Multiple composition with id ${comp.id} are registered.`);\n                    }\n                    const value = [\n                        ...comps,\n                        comp\n                    ].slice().sort({\n                        \"CompositionManagerProvider.useCallback14[registerComposition].value\": (a2, b2)=>a2.nonce - b2.nonce\n                    }[\"CompositionManagerProvider.useCallback14[registerComposition].value\"]);\n                    return value;\n                }\n            }[\"CompositionManagerProvider.useCallback14[registerComposition]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[registerComposition]\"], [\n        updateCompositions\n    ]);\n    const unregisterComposition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[unregisterComposition]\": (id)=>{\n            setCompositions({\n                \"CompositionManagerProvider.useCallback14[unregisterComposition]\": (comps)=>{\n                    return comps.filter({\n                        \"CompositionManagerProvider.useCallback14[unregisterComposition]\": (c2)=>c2.id !== id\n                    }[\"CompositionManagerProvider.useCallback14[unregisterComposition]\"]);\n                }\n            }[\"CompositionManagerProvider.useCallback14[unregisterComposition]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[unregisterComposition]\"], []);\n    const registerFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[registerFolder]\": (name, parent)=>{\n            setFolders({\n                \"CompositionManagerProvider.useCallback14[registerFolder]\": (prevFolders)=>{\n                    return [\n                        ...prevFolders,\n                        {\n                            name,\n                            parent\n                        }\n                    ];\n                }\n            }[\"CompositionManagerProvider.useCallback14[registerFolder]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[registerFolder]\"], []);\n    const unregisterFolder = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[unregisterFolder]\": (name, parent)=>{\n            setFolders({\n                \"CompositionManagerProvider.useCallback14[unregisterFolder]\": (prevFolders)=>{\n                    return prevFolders.filter({\n                        \"CompositionManagerProvider.useCallback14[unregisterFolder]\": (p)=>!(p.name === name && p.parent === parent)\n                    }[\"CompositionManagerProvider.useCallback14[unregisterFolder]\"]);\n                }\n            }[\"CompositionManagerProvider.useCallback14[unregisterFolder]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[unregisterFolder]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(compositionsRef, {\n        \"CompositionManagerProvider.useImperativeHandle8\": ()=>{\n            return {\n                getCompositions: ({\n                    \"CompositionManagerProvider.useImperativeHandle8\": ()=>currentcompositionsRef.current\n                })[\"CompositionManagerProvider.useImperativeHandle8\"]\n            };\n        }\n    }[\"CompositionManagerProvider.useImperativeHandle8\"], []);\n    const composition = compositions.find((c2)=>canvasContent?.type === \"composition\" ? c2.id === canvasContent.compositionId : null);\n    const updateCompositionDefaultProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps]\": (id, newDefaultProps)=>{\n            setCompositions({\n                \"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps]\": (comps)=>{\n                    const updated = comps.map({\n                        \"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps].updated\": (c2)=>{\n                            if (c2.id === id) {\n                                return {\n                                    ...c2,\n                                    defaultProps: newDefaultProps\n                                };\n                            }\n                            return c2;\n                        }\n                    }[\"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps].updated\"]);\n                    return updated;\n                }\n            }[\"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps]\"]);\n        }\n    }[\"CompositionManagerProvider.useCallback14[updateCompositionDefaultProps]\"], []);\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"CompositionManagerProvider.useMemo24[contextValue]\": ()=>{\n            return {\n                compositions,\n                folders,\n                currentCompositionMetadata,\n                canvasContent\n            };\n        }\n    }[\"CompositionManagerProvider.useMemo24[contextValue]\"], [\n        compositions,\n        folders,\n        currentCompositionMetadata,\n        canvasContent\n    ]);\n    const setters = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"CompositionManagerProvider.useMemo24[setters]\": ()=>{\n            return {\n                registerComposition,\n                unregisterComposition,\n                registerFolder,\n                unregisterFolder,\n                setCanvasContent,\n                updateCompositionDefaultProps,\n                onlyRenderComposition\n            };\n        }\n    }[\"CompositionManagerProvider.useMemo24[setters]\"], [\n        registerComposition,\n        registerFolder,\n        unregisterComposition,\n        unregisterFolder,\n        updateCompositionDefaultProps,\n        onlyRenderComposition\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, {\n        value: contextValue,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionSetters.Provider, {\n            value: setters,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManagerProvider, {\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManagerProvider, {\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionConfig, {\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SharedAudioContextProvider, {\n                            numberOfAudioTags,\n                            component: composition?.component ?? null,\n                            audioLatencyHint,\n                            children\n                        })\n                    })\n                })\n            })\n        })\n    });\n};\n// src/default-css.ts\nvar exports_default_css = {};\n__export(exports_default_css, {\n    makeDefaultPreviewCSS: ()=>makeDefaultPreviewCSS,\n    injectCSS: ()=>injectCSS,\n    OFFTHREAD_VIDEO_CLASS_NAME: ()=>OFFTHREAD_VIDEO_CLASS_NAME\n});\nvar injected = {};\nvar injectCSS = (css)=>{\n    if (typeof document === \"undefined\") {\n        return;\n    }\n    if (injected[css]) {\n        return;\n    }\n    const head = document.head || document.getElementsByTagName(\"head\")[0];\n    const style = document.createElement(\"style\");\n    style.appendChild(document.createTextNode(css));\n    head.prepend(style);\n    injected[css] = true;\n};\nvar OFFTHREAD_VIDEO_CLASS_NAME = \"__remotion_offthreadvideo\";\nvar makeDefaultPreviewCSS = (scope, backgroundColor)=>{\n    if (!scope) {\n        return `\n    * {\n      box-sizing: border-box;\n    }\n    body {\n      margin: 0;\n\t    background-color: ${backgroundColor};\n    }\n    .${OFFTHREAD_VIDEO_CLASS_NAME} {\n      object-fit: contain;\n    }\n    `;\n    }\n    return `\n    ${scope} * {\n      box-sizing: border-box;\n    }\n    ${scope} *:-webkit-full-screen {\n      width: 100%;\n      height: 100%;\n    }\n    ${scope} .${OFFTHREAD_VIDEO_CLASS_NAME} {\n      object-fit: contain;\n    }\n  `;\n};\n// src/get-preview-dom-element.ts\nvar REMOTION_STUDIO_CONTAINER_ELEMENT = \"__remotion-studio-container\";\nvar getPreviewDomElement = ()=>{\n    return document.getElementById(REMOTION_STUDIO_CONTAINER_ELEMENT);\n};\n// src/register-root.ts\nvar Root = null;\nvar listeners = [];\nvar registerRoot = (comp)=>{\n    if (!comp) {\n        throw new Error(`You must pass a React component to registerRoot(), but ${JSON.stringify(comp)} was passed.`);\n    }\n    if (Root) {\n        throw new Error(\"registerRoot() was called more than once.\");\n    }\n    Root = comp;\n    listeners.forEach((l)=>{\n        l(comp);\n    });\n};\nvar getRoot = ()=>{\n    return Root;\n};\nvar waitForRoot = (fn)=>{\n    if (Root) {\n        fn(Root);\n        return ()=>{\n            return;\n        };\n    }\n    listeners.push(fn);\n    return ()=>{\n        listeners = listeners.filter((l)=>l !== fn);\n    };\n};\n// src/RemotionRoot.tsx\n\n\nvar RemotionRoot = ({ children, numberOfAudioTags, logLevel, onlyRenderComposition, currentCompositionMetadata, audioLatencyHint })=>{\n    const [remotionRootId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"RemotionRoot.useState17\": ()=>String(random(null))\n    }[\"RemotionRoot.useState17\"]);\n    const [frame, setFrame] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"RemotionRoot.useState17\": ()=>getInitialFrameState()\n    }[\"RemotionRoot.useState17\"]);\n    const [playing, setPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const imperativePlaying = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const [fastRefreshes, setFastRefreshes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [manualRefreshes, setManualRefreshes] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [playbackRate, setPlaybackRate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const audioAndVideoTags = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    if (false) {}\n    const timelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RemotionRoot.useMemo25[timelineContextValue]\": ()=>{\n            return {\n                frame,\n                playing,\n                imperativePlaying,\n                rootId: remotionRootId,\n                playbackRate,\n                setPlaybackRate,\n                audioAndVideoTags\n            };\n        }\n    }[\"RemotionRoot.useMemo25[timelineContextValue]\"], [\n        frame,\n        playbackRate,\n        playing,\n        remotionRootId\n    ]);\n    const setTimelineContextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RemotionRoot.useMemo25[setTimelineContextValue]\": ()=>{\n            return {\n                setFrame,\n                setPlaying\n            };\n        }\n    }[\"RemotionRoot.useMemo25[setTimelineContextValue]\"], []);\n    const nonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RemotionRoot.useMemo25[nonceContext]\": ()=>{\n            let counter = 0;\n            return {\n                getNonce: ({\n                    \"RemotionRoot.useMemo25[nonceContext]\": ()=>counter++\n                })[\"RemotionRoot.useMemo25[nonceContext]\"],\n                fastRefreshes,\n                manualRefreshes\n            };\n        }\n    }[\"RemotionRoot.useMemo25[nonceContext]\"], [\n        fastRefreshes,\n        manualRefreshes\n    ]);\n    const setNonceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RemotionRoot.useMemo25[setNonceContext]\": ()=>{\n            return {\n                increaseManualRefreshes: ({\n                    \"RemotionRoot.useMemo25[setNonceContext]\": ()=>{\n                        setManualRefreshes({\n                            \"RemotionRoot.useMemo25[setNonceContext]\": (i)=>i + 1\n                        }[\"RemotionRoot.useMemo25[setNonceContext]\"]);\n                    }\n                })[\"RemotionRoot.useMemo25[setNonceContext]\"]\n            };\n        }\n    }[\"RemotionRoot.useMemo25[setNonceContext]\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"RemotionRoot.useEffect17\": ()=>{\n            if (true) {\n                if (__webpack_module__.hot) {\n                    __webpack_module__.hot.addStatusHandler({\n                        \"RemotionRoot.useEffect17\": (status)=>{\n                            if (status === \"idle\") {\n                                setFastRefreshes({\n                                    \"RemotionRoot.useEffect17\": (i)=>i + 1\n                                }[\"RemotionRoot.useEffect17\"]);\n                            }\n                        }\n                    }[\"RemotionRoot.useEffect17\"]);\n                }\n            }\n        }\n    }[\"RemotionRoot.useEffect17\"], []);\n    const logging = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"RemotionRoot.useMemo25[logging]\": ()=>{\n            return {\n                logLevel,\n                mountTime: Date.now()\n            };\n        }\n    }[\"RemotionRoot.useMemo25[logging]\"], [\n        logLevel\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LogLevelContext.Provider, {\n        value: logging,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, {\n            value: nonceContext,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetNonceContext.Provider, {\n                value: setNonceContext,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {\n                    value: timelineContextValue,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, {\n                        value: setTimelineContextValue,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EditorPropsProvider, {\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PrefetchProvider, {\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManagerProvider, {\n                                    numberOfAudioTags,\n                                    onlyRenderComposition,\n                                    currentCompositionMetadata,\n                                    audioLatencyHint,\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(DurationsContextProvider, {\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingProvider, {\n                                            children\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n};\n// src/setup-env-variables.ts\nvar getEnvVariables = ()=>{\n    if (getRemotionEnvironment().isRendering) {\n        const param = window.remotion_envVariables;\n        if (!param) {\n            return {};\n        }\n        return {\n            ...JSON.parse(param),\n            NODE_ENV: \"production\"\n        };\n    }\n    if (false) {}\n    return {\n        NODE_ENV: \"production\"\n    };\n};\nvar setupEnvVariables = ()=>{\n    const env = getEnvVariables();\n    if (!window.process) {\n        window.process = {};\n    }\n    if (!window.process.env) {\n        window.process.env = {};\n    }\n    Object.keys(env).forEach((key)=>{\n        window.process.env[key] = env[key];\n    });\n};\n// src/use-current-scale.ts\n\nvar CurrentScaleContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nvar PreviewSizeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    setSize: ()=>{\n        return;\n    },\n    size: {\n        size: \"auto\",\n        translation: {\n            x: 0,\n            y: 0\n        }\n    }\n});\nvar calculateScale = ({ canvasSize, compositionHeight, compositionWidth, previewSize })=>{\n    const heightRatio = canvasSize.height / compositionHeight;\n    const widthRatio = canvasSize.width / compositionWidth;\n    const ratio = Math.min(heightRatio, widthRatio);\n    if (previewSize === \"auto\") {\n        if (ratio === 0) {\n            return 1;\n        }\n        return ratio;\n    }\n    return Number(previewSize);\n};\nvar useCurrentScale = (options)=>{\n    const hasContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CurrentScaleContext);\n    const zoomContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(PreviewSizeContext);\n    const config = useUnsafeVideoConfig();\n    const env = useRemotionEnvironment();\n    if (hasContext === null || config === null || zoomContext === null) {\n        if (options?.dontThrowIfOutsideOfRemotion) {\n            return 1;\n        }\n        if (env.isRendering) {\n            return 1;\n        }\n        throw new Error([\n            \"useCurrentScale() was called outside of a Remotion context.\",\n            \"This hook can only be called in a component that is being rendered by Remotion.\",\n            \"If you want to this hook to return 1 outside of Remotion, pass {dontThrowIfOutsideOfRemotion: true} as an option.\",\n            \"If you think you called this hook in a Remotion component, make sure all versions of Remotion are aligned.\"\n        ].join(`\n`));\n    }\n    if (hasContext.type === \"scale\") {\n        return hasContext.scale;\n    }\n    return calculateScale({\n        canvasSize: hasContext.canvasSize,\n        compositionHeight: config.height,\n        compositionWidth: config.width,\n        previewSize: zoomContext.size.size\n    });\n};\n// src/video/VideoForPreview.tsx\n\n// src/video/emit-video-frame.ts\n\nvar useEmitVideoFrame = ({ ref, onVideoFrame })=>{\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useEmitVideoFrame.useEffect18\": ()=>{\n            const { current } = ref;\n            if (!current) {\n                return;\n            }\n            if (!onVideoFrame) {\n                return;\n            }\n            let handle = 0;\n            const callback = {\n                \"useEmitVideoFrame.useEffect18.callback\": ()=>{\n                    if (!ref.current) {\n                        return;\n                    }\n                    onVideoFrame(ref.current);\n                    handle = ref.current.requestVideoFrameCallback(callback);\n                }\n            }[\"useEmitVideoFrame.useEffect18.callback\"];\n            callback();\n            return ({\n                \"useEmitVideoFrame.useEffect18\": ()=>{\n                    current.cancelVideoFrameCallback(handle);\n                }\n            })[\"useEmitVideoFrame.useEffect18\"];\n        }\n    }[\"useEmitVideoFrame.useEffect18\"], [\n        onVideoFrame,\n        ref\n    ]);\n};\n// src/video/VideoForPreview.tsx\n\nvar VideoForDevelopmentRefForwardingFunction = (props2, ref)=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SharedAudioContext);\n    if (!context) {\n        throw new Error(\"SharedAudioContext not found\");\n    }\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const sharedSource = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"VideoForDevelopmentRefForwardingFunction.useMemo26[sharedSource]\": ()=>{\n            if (!context.audioContext) {\n                return null;\n            }\n            return makeSharedElementSourceNode({\n                audioContext: context.audioContext,\n                ref: videoRef\n            });\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useMemo26[sharedSource]\"], [\n        context.audioContext\n    ]);\n    const { volume, muted, playbackRate, onlyWarnForMediaSeekingError, src, onDuration, acceptableTimeShift, acceptableTimeShiftInSeconds, toneFrequency, name, _remotionInternalNativeLoopPassed, _remotionInternalStack, style, pauseWhenBuffering, showInTimeline, loopVolumeCurveBehavior, onError, onAutoPlayError, onVideoFrame, crossOrigin, delayRenderRetries, delayRenderTimeoutInMilliseconds, allowAmplificationDuringRender, useWebAudioApi, audioStreamIndex, ...nativeProps } = props2;\n    const _propsValid = true;\n    if (!_propsValid) {\n        throw new Error(\"typecheck error\");\n    }\n    const volumePropFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? \"repeat\");\n    const { fps, durationInFrames } = useVideoConfig();\n    const parentSequence = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const { hidden } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceVisibilityToggleContext);\n    const logLevel = useLogLevel();\n    const mountTime = useMountTime();\n    const [timelineId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"VideoForDevelopmentRefForwardingFunction.useState18\": ()=>String(Math.random())\n    }[\"VideoForDevelopmentRefForwardingFunction.useState18\"]);\n    const isSequenceHidden = hidden[timelineId] ?? false;\n    if (typeof acceptableTimeShift !== \"undefined\") {\n        throw new Error(\"acceptableTimeShift has been removed. Use acceptableTimeShiftInSeconds instead.\");\n    }\n    const [mediaVolume] = useMediaVolumeState();\n    const [mediaMuted] = useMediaMutedState();\n    const userPreferredVolume = evaluateVolume({\n        frame: volumePropFrame,\n        volume,\n        mediaVolume\n    });\n    useMediaInTimeline({\n        mediaRef: videoRef,\n        volume,\n        mediaVolume,\n        mediaType: \"video\",\n        src,\n        playbackRate: props2.playbackRate ?? 1,\n        displayName: name ?? null,\n        id: timelineId,\n        stack: _remotionInternalStack,\n        showInTimeline,\n        premountDisplay: null,\n        postmountDisplay: null,\n        onAutoPlayError: onAutoPlayError ?? null,\n        isPremounting: Boolean(parentSequence?.premounting),\n        isPostmounting: Boolean(parentSequence?.postmounting)\n    });\n    useMediaPlayback({\n        mediaRef: videoRef,\n        src,\n        mediaType: \"video\",\n        playbackRate: props2.playbackRate ?? 1,\n        onlyWarnForMediaSeekingError,\n        acceptableTimeshift: acceptableTimeShiftInSeconds ?? null,\n        isPremounting: Boolean(parentSequence?.premounting),\n        isPostmounting: Boolean(parentSequence?.postmounting),\n        pauseWhenBuffering,\n        onAutoPlayError: onAutoPlayError ?? null\n    });\n    useVolume({\n        logLevel,\n        mediaRef: videoRef,\n        volume: userPreferredVolume,\n        source: sharedSource,\n        shouldUseWebAudioApi: useWebAudioApi ?? false\n    });\n    const actualFrom = parentSequence ? parentSequence.relativeFrom : 0;\n    const duration = parentSequence ? Math.min(parentSequence.durationInFrames, durationInFrames) : durationInFrames;\n    const preloadedSrc = usePreload(src);\n    const actualSrc = useAppendVideoFragment({\n        actualSrc: preloadedSrc,\n        actualFrom,\n        duration,\n        fps\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"VideoForDevelopmentRefForwardingFunction.useImperativeHandle9\": ()=>{\n            return videoRef.current;\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useImperativeHandle9\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"VideoForDevelopmentRefForwardingFunction.useState18\": ()=>playbackLogging({\n                logLevel,\n                message: `Mounting video with source = ${actualSrc}, v=${VERSION}, user agent=${typeof navigator === \"undefined\" ? \"server\" : navigator.userAgent}`,\n                tag: \"video\",\n                mountTime\n            })\n    }[\"VideoForDevelopmentRefForwardingFunction.useState18\"]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoForDevelopmentRefForwardingFunction.useEffect19\": ()=>{\n            const { current } = videoRef;\n            if (!current) {\n                return;\n            }\n            const errorHandler = {\n                \"VideoForDevelopmentRefForwardingFunction.useEffect19.errorHandler\": ()=>{\n                    if (current.error) {\n                        console.error(\"Error occurred in video\", current?.error);\n                        if (onError) {\n                            const err = new Error(`Code ${current.error.code}: ${current.error.message}`);\n                            onError(err);\n                            return;\n                        }\n                        throw new Error(`The browser threw an error while playing the video ${src}: Code ${current.error.code} - ${current?.error?.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);\n                    } else {\n                        if (onError) {\n                            const err = new Error(`The browser threw an error while playing the video ${src}`);\n                            onError(err);\n                            return;\n                        }\n                        throw new Error(\"The browser threw an error while playing the video\");\n                    }\n                }\n            }[\"VideoForDevelopmentRefForwardingFunction.useEffect19.errorHandler\"];\n            current.addEventListener(\"error\", errorHandler, {\n                once: true\n            });\n            return ({\n                \"VideoForDevelopmentRefForwardingFunction.useEffect19\": ()=>{\n                    current.removeEventListener(\"error\", errorHandler);\n                }\n            })[\"VideoForDevelopmentRefForwardingFunction.useEffect19\"];\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useEffect19\"], [\n        onError,\n        src\n    ]);\n    const currentOnDurationCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDuration);\n    currentOnDurationCallback.current = onDuration;\n    useEmitVideoFrame({\n        ref: videoRef,\n        onVideoFrame\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoForDevelopmentRefForwardingFunction.useEffect19\": ()=>{\n            const { current } = videoRef;\n            if (!current) {\n                return;\n            }\n            if (current.duration) {\n                currentOnDurationCallback.current?.(src, current.duration);\n                return;\n            }\n            const onLoadedMetadata = {\n                \"VideoForDevelopmentRefForwardingFunction.useEffect19.onLoadedMetadata\": ()=>{\n                    currentOnDurationCallback.current?.(src, current.duration);\n                }\n            }[\"VideoForDevelopmentRefForwardingFunction.useEffect19.onLoadedMetadata\"];\n            current.addEventListener(\"loadedmetadata\", onLoadedMetadata);\n            return ({\n                \"VideoForDevelopmentRefForwardingFunction.useEffect19\": ()=>{\n                    current.removeEventListener(\"loadedmetadata\", onLoadedMetadata);\n                }\n            })[\"VideoForDevelopmentRefForwardingFunction.useEffect19\"];\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useEffect19\"], [\n        src\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoForDevelopmentRefForwardingFunction.useEffect19\": ()=>{\n            const { current } = videoRef;\n            if (!current) {\n                return;\n            }\n            if (isIosSafari()) {\n                current.preload = \"metadata\";\n            } else {\n                current.preload = \"auto\";\n            }\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useEffect19\"], []);\n    const actualStyle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"VideoForDevelopmentRefForwardingFunction.useMemo26[actualStyle]\": ()=>{\n            return {\n                ...style,\n                opacity: isSequenceHidden ? 0 : style?.opacity ?? 1\n            };\n        }\n    }[\"VideoForDevelopmentRefForwardingFunction.useMemo26[actualStyle]\"], [\n        isSequenceHidden,\n        style\n    ]);\n    const crossOriginValue = getCrossOriginValue({\n        crossOrigin,\n        requestsVideoFrame: Boolean(onVideoFrame)\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\", {\n        ref: videoRef,\n        muted: muted || mediaMuted || isSequenceHidden || userPreferredVolume <= 0,\n        playsInline: true,\n        src: actualSrc,\n        loop: _remotionInternalNativeLoopPassed,\n        style: actualStyle,\n        disableRemotePlayback: true,\n        crossOrigin: crossOriginValue,\n        ...nativeProps\n    });\n};\nvar VideoForPreview = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForDevelopmentRefForwardingFunction);\n// src/watch-static-file.ts\nvar WATCH_REMOTION_STATIC_FILES = \"remotion_staticFilesChanged\";\nvar watchStaticFile = (fileName, callback)=>{\n    if (ENABLE_V5_BREAKING_CHANGES) {\n        throw new Error(\"watchStaticFile() has moved into the `@remotion/studio` package. Update your imports.\");\n    }\n    if (!getRemotionEnvironment().isStudio) {\n        console.warn(\"The watchStaticFile() API is only available while using the Remotion Studio.\");\n        return {\n            cancel: ()=>{\n                return;\n            }\n        };\n    }\n    const withoutStaticBase = fileName.startsWith(window.remotion_staticBase) ? fileName.replace(window.remotion_staticBase, \"\") : fileName;\n    const withoutLeadingSlash = withoutStaticBase.startsWith(\"/\") ? withoutStaticBase.slice(1) : withoutStaticBase;\n    let prevFileData = window.remotion_staticFiles.find((file)=>file.name === withoutLeadingSlash);\n    const checkFile = (event)=>{\n        const staticFiles = event.detail.files;\n        const newFileData = staticFiles.find((file)=>file.name === withoutLeadingSlash);\n        if (!newFileData) {\n            if (prevFileData !== undefined) {\n                callback(null);\n            }\n            prevFileData = undefined;\n            return;\n        }\n        if (prevFileData === undefined || prevFileData.lastModified !== newFileData.lastModified) {\n            callback(newFileData);\n            prevFileData = newFileData;\n        }\n    };\n    window.addEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);\n    const cancel = ()=>{\n        return window.removeEventListener(WATCH_REMOTION_STATIC_FILES, checkFile);\n    };\n    return {\n        cancel\n    };\n};\n// src/wrap-remotion-context.tsx\n\n\nfunction useRemotionContexts() {\n    const compositionManagerCtx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CompositionManager);\n    const timelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TimelineContext);\n    const setTimelineContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SetTimelineContext);\n    const sequenceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceContext);\n    const nonceContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(NonceContext);\n    const canUseRemotionHooksContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(CanUseRemotionHooks);\n    const preloadContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(PreloadContext);\n    const resolveCompositionContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ResolveCompositionContext);\n    const renderAssetManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RenderAssetManager);\n    const sequenceManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(SequenceManager);\n    const bufferManagerContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(BufferingContextReact);\n    const logLevelContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LogLevelContext);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"useRemotionContexts.useMemo27\": ()=>({\n                compositionManagerCtx,\n                timelineContext,\n                setTimelineContext,\n                sequenceContext,\n                nonceContext,\n                canUseRemotionHooksContext,\n                preloadContext,\n                resolveCompositionContext,\n                renderAssetManagerContext,\n                sequenceManagerContext,\n                bufferManagerContext,\n                logLevelContext\n            })\n    }[\"useRemotionContexts.useMemo27\"], [\n        compositionManagerCtx,\n        nonceContext,\n        sequenceContext,\n        setTimelineContext,\n        timelineContext,\n        canUseRemotionHooksContext,\n        preloadContext,\n        resolveCompositionContext,\n        renderAssetManagerContext,\n        sequenceManagerContext,\n        bufferManagerContext,\n        logLevelContext\n    ]);\n}\nvar RemotionContextProvider = (props2)=>{\n    const { children, contexts } = props2;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(LogLevelContext.Provider, {\n        value: contexts.logLevelContext,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CanUseRemotionHooks.Provider, {\n            value: contexts.canUseRemotionHooksContext,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NonceContext.Provider, {\n                value: contexts.nonceContext,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreloadContext.Provider, {\n                    value: contexts.preloadContext,\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(CompositionManager.Provider, {\n                        value: contexts.compositionManagerCtx,\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceManager.Provider, {\n                            value: contexts.sequenceManagerContext,\n                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(RenderAssetManager.Provider, {\n                                value: contexts.renderAssetManagerContext,\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ResolveCompositionContext.Provider, {\n                                    value: contexts.resolveCompositionContext,\n                                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(TimelineContext.Provider, {\n                                        value: contexts.timelineContext,\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SetTimelineContext.Provider, {\n                                            value: contexts.setTimelineContext,\n                                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(SequenceContext.Provider, {\n                                                value: contexts.sequenceContext,\n                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(BufferingContextReact.Provider, {\n                                                    value: contexts.bufferManagerContext,\n                                                    children\n                                                })\n                                            })\n                                        })\n                                    })\n                                })\n                            })\n                        })\n                    })\n                })\n            })\n        })\n    });\n};\n// src/internals.ts\nvar compositionSelectorRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\nvar Internals = {\n    useUnsafeVideoConfig,\n    useFrameForVolumeProp,\n    useTimelinePosition,\n    evaluateVolume,\n    getAbsoluteSrc,\n    Timeline: exports_timeline_position_state,\n    validateMediaTrimProps,\n    validateMediaProps,\n    resolveTrimProps,\n    VideoForPreview,\n    CompositionManager,\n    CompositionSetters,\n    SequenceManager,\n    SequenceVisibilityToggleContext,\n    RemotionRoot,\n    useVideo,\n    getRoot,\n    useMediaVolumeState,\n    useMediaMutedState,\n    useLazyComponent,\n    truthy,\n    SequenceContext,\n    useRemotionContexts,\n    RemotionContextProvider,\n    CSSUtils: exports_default_css,\n    setupEnvVariables,\n    MediaVolumeContext,\n    SetMediaVolumeContext,\n    getRemotionEnvironment,\n    SharedAudioContext,\n    SharedAudioContextProvider,\n    invalidCompositionErrorMessage,\n    isCompositionIdValid,\n    getPreviewDomElement,\n    compositionsRef,\n    portalNode,\n    waitForRoot,\n    CanUseRemotionHooksProvider,\n    CanUseRemotionHooks,\n    PrefetchProvider,\n    DurationsContextProvider,\n    IsPlayerContextProvider,\n    useIsPlayer,\n    EditorPropsProvider,\n    EditorPropsContext,\n    usePreload,\n    NonceContext,\n    SetNonceContext,\n    resolveVideoConfig,\n    useResolvedVideoConfig,\n    resolveCompositionsRef,\n    ResolveCompositionConfig,\n    REMOTION_STUDIO_CONTAINER_ELEMENT,\n    RenderAssetManager,\n    persistCurrentFrame,\n    useTimelineSetFrame,\n    isIosSafari,\n    WATCH_REMOTION_STATIC_FILES,\n    addSequenceStackTraces,\n    useMediaStartsAt,\n    BufferingProvider,\n    BufferingContextReact,\n    enableSequenceStackTraces,\n    CurrentScaleContext,\n    PreviewSizeContext,\n    calculateScale,\n    editorPropsProviderRef,\n    PROPS_UPDATED_EXTERNALLY,\n    validateRenderAsset,\n    Log,\n    LogLevelContext,\n    useLogLevel,\n    playbackLogging,\n    timeValueRef,\n    compositionSelectorRef,\n    RemotionEnvironmentContext\n};\n// src/interpolate-colors.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call(...args) {\n    return \"\\\\(\\\\s*(\" + args.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nfunction getMatchers() {\n    const cachedMatchers = {\n        rgb: undefined,\n        rgba: undefined,\n        hsl: undefined,\n        hsla: undefined,\n        hex3: undefined,\n        hex4: undefined,\n        hex5: undefined,\n        hex6: undefined,\n        hex8: undefined\n    };\n    if (cachedMatchers.rgb === undefined) {\n        cachedMatchers.rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\n        cachedMatchers.rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\n        cachedMatchers.hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\n        cachedMatchers.hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n        cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n        cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n        cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n    }\n    return cachedMatchers;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * 6 * t;\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b2 = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b2 * 255) << 8;\n}\nfunction parse255(str) {\n    const int = Number.parseInt(str, 10);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 255) {\n        return 255;\n    }\n    return int;\n}\nfunction parse360(str) {\n    const int = Number.parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n    const num = Number.parseFloat(str);\n    if (num < 0) {\n        return 0;\n    }\n    if (num > 1) {\n        return 255;\n    }\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    const int = Number.parseFloat(str);\n    if (int < 0) {\n        return 0;\n    }\n    if (int > 100) {\n        return 1;\n    }\n    return int / 100;\n}\nvar colorNames = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n};\nfunction normalizeColor(color) {\n    const matchers = getMatchers();\n    let match;\n    if (matchers.hex6) {\n        if (match = matchers.hex6.exec(color)) {\n            return Number.parseInt(match[1] + \"ff\", 16) >>> 0;\n        }\n    }\n    if (colorNames[color] !== undefined) {\n        return colorNames[color];\n    }\n    if (matchers.rgb) {\n        if (match = matchers.rgb.exec(color)) {\n            return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;\n        }\n    }\n    if (matchers.rgba) {\n        if (match = matchers.rgba.exec(color)) {\n            return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n        }\n    }\n    if (matchers.hex3) {\n        if (match = matchers.hex3.exec(color)) {\n            return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + \"ff\", 16) >>> 0;\n        }\n    }\n    if (matchers.hex8) {\n        if (match = matchers.hex8.exec(color)) {\n            return Number.parseInt(match[1], 16) >>> 0;\n        }\n    }\n    if (matchers.hex4) {\n        if (match = matchers.hex4.exec(color)) {\n            return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n        }\n    }\n    if (matchers.hsl) {\n        if (match = matchers.hsl.exec(color)) {\n            return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;\n        }\n    }\n    if (matchers.hsla) {\n        if (match = matchers.hsla.exec(color)) {\n            return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n        }\n    }\n    throw new Error(`invalid color string ${color} provided`);\n}\nvar opacity = (c2)=>{\n    return (c2 >> 24 & 255) / 255;\n};\nvar red = (c2)=>{\n    return c2 >> 16 & 255;\n};\nvar green = (c2)=>{\n    return c2 >> 8 & 255;\n};\nvar blue = (c2)=>{\n    return c2 & 255;\n};\nvar rgbaColor = (r, g, b2, alpha)=>{\n    return `rgba(${r}, ${g}, ${b2}, ${alpha})`;\n};\nfunction processColor(color) {\n    const normalizedColor = normalizeColor(color);\n    return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n}\nvar interpolateColorsRGB = (value, inputRange, colors)=>{\n    const [r, g, b2, a2] = [\n        red,\n        green,\n        blue,\n        opacity\n    ].map((f)=>{\n        const unrounded = interpolate(value, inputRange, colors.map((c2)=>f(c2)), {\n            extrapolateLeft: \"clamp\",\n            extrapolateRight: \"clamp\"\n        });\n        if (f === opacity) {\n            return Number(unrounded.toFixed(3));\n        }\n        return Math.round(unrounded);\n    });\n    return rgbaColor(r, g, b2, a2);\n};\nvar interpolateColors = (input, inputRange, outputRange)=>{\n    if (typeof input === \"undefined\") {\n        throw new TypeError(\"input can not be undefined\");\n    }\n    if (typeof inputRange === \"undefined\") {\n        throw new TypeError(\"inputRange can not be undefined\");\n    }\n    if (typeof outputRange === \"undefined\") {\n        throw new TypeError(\"outputRange can not be undefined\");\n    }\n    if (inputRange.length !== outputRange.length) {\n        throw new TypeError(\"inputRange (\" + inputRange.length + \" values provided) and outputRange (\" + outputRange.length + \" values provided) must have the same length\");\n    }\n    const processedOutputRange = outputRange.map((c2)=>processColor(c2));\n    return interpolateColorsRGB(input, inputRange, processedOutputRange);\n};\n// src/validate-frame.ts\nvar validateFrame = ({ allowFloats, durationInFrames, frame })=>{\n    if (typeof frame === \"undefined\") {\n        throw new TypeError(`Argument missing for parameter \"frame\"`);\n    }\n    if (typeof frame !== \"number\") {\n        throw new TypeError(`Argument passed for \"frame\" is not a number: ${frame}`);\n    }\n    if (!Number.isFinite(frame)) {\n        throw new RangeError(`Frame ${frame} is not finite`);\n    }\n    if (frame % 1 !== 0 && !allowFloats) {\n        throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);\n    }\n    if (frame < 0 && frame < -durationInFrames) {\n        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);\n    }\n    if (frame > durationInFrames - 1) {\n        throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);\n    }\n};\n// src/video/offthread-video-source.ts\nvar getOffthreadVideoSource = ({ src, transparent, currentTime, toneMapped })=>{\n    return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(Math.max(0, currentTime))}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;\n};\n// src/series/index.tsx\n\n// src/series/flatten-children.tsx\n\nvar flattenChildren = (children)=>{\n    const childrenArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children);\n    return childrenArray.reduce((flatChildren, child)=>{\n        if (child.type === react__WEBPACK_IMPORTED_MODULE_0__.Fragment) {\n            return flatChildren.concat(flattenChildren(child.props.children));\n        }\n        flatChildren.push(child);\n        return flatChildren;\n    }, []);\n};\n// src/series/is-inside-series.tsx\n\n\nvar IsInsideSeriesContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(false);\nvar IsInsideSeriesContainer = ({ children })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContext.Provider, {\n        value: true,\n        children\n    });\n};\nvar IsNotInsideSeriesProvider = ({ children })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContext.Provider, {\n        value: false,\n        children\n    });\n};\nvar useRequireToBeInsideSeries = ()=>{\n    const isInsideSeries = react__WEBPACK_IMPORTED_MODULE_0__.useContext(IsInsideSeriesContext);\n    if (!isInsideSeries) {\n        throw new Error(\"This component must be inside a <Series /> component.\");\n    }\n};\n// src/series/index.tsx\n\nvar SeriesSequenceRefForwardingFunction = ({ children }, _ref)=>{\n    useRequireToBeInsideSeries();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsNotInsideSeriesProvider, {\n        children\n    });\n};\nvar SeriesSequence = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(SeriesSequenceRefForwardingFunction);\nvar Series = (props2)=>{\n    const childrenValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"Series.useMemo28[childrenValue]\": ()=>{\n            let startFrame = 0;\n            const flattenedChildren = flattenChildren(props2.children);\n            return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(flattenedChildren, {\n                \"Series.useMemo28[childrenValue]\": (child, i)=>{\n                    const castedChild = child;\n                    if (typeof castedChild === \"string\") {\n                        if (castedChild.trim() === \"\") {\n                            return null;\n                        }\n                        throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but you passed a string \"${castedChild}\"`);\n                    }\n                    if (castedChild.type !== SeriesSequence) {\n                        throw new TypeError(`The <Series /> component only accepts a list of <Series.Sequence /> components as its children, but got ${castedChild} instead`);\n                    }\n                    const debugInfo = `index = ${i}, duration = ${castedChild.props.durationInFrames}`;\n                    if (!castedChild?.props.children) {\n                        throw new TypeError(`A <Series.Sequence /> component (${debugInfo}) was detected to not have any children. Delete it to fix this error.`);\n                    }\n                    const durationInFramesProp = castedChild.props.durationInFrames;\n                    const { durationInFrames, children: _children, from, name, ...passedProps } = castedChild.props;\n                    if (i !== flattenedChildren.length - 1 || durationInFramesProp !== Infinity) {\n                        validateDurationInFrames(durationInFramesProp, {\n                            component: `of a <Series.Sequence /> component`,\n                            allowFloats: true\n                        });\n                    }\n                    const offset = castedChild.props.offset ?? 0;\n                    if (Number.isNaN(offset)) {\n                        throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must not be NaN, but got NaN (${debugInfo}).`);\n                    }\n                    if (!Number.isFinite(offset)) {\n                        throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);\n                    }\n                    if (offset % 1 !== 0) {\n                        throw new TypeError(`The \"offset\" property of a <Series.Sequence /> must be finite, but got ${offset} (${debugInfo}).`);\n                    }\n                    const currentStartFrame = startFrame + offset;\n                    startFrame += durationInFramesProp + offset;\n                    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n                        name: name || \"<Series.Sequence>\",\n                        from: currentStartFrame,\n                        durationInFrames: durationInFramesProp,\n                        ...passedProps,\n                        ref: castedChild.ref,\n                        children: child\n                    });\n                }\n            }[\"Series.useMemo28[childrenValue]\"]);\n        }\n    }[\"Series.useMemo28[childrenValue]\"], [\n        props2.children\n    ]);\n    if (ENABLE_V5_BREAKING_CHANGES) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContainer, {\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n                ...props2,\n                children: childrenValue\n            })\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(IsInsideSeriesContainer, {\n        children: childrenValue\n    });\n};\nSeries.Sequence = SeriesSequence;\naddSequenceStackTraces(SeriesSequence);\n// src/validation/validation-spring-duration.ts\nvar validateSpringDuration = (dur)=>{\n    if (typeof dur === \"undefined\") {\n        return;\n    }\n    if (typeof dur !== \"number\") {\n        throw new TypeError(`A \"duration\" of a spring must be a \"number\" but is \"${typeof dur}\"`);\n    }\n    if (Number.isNaN(dur)) {\n        throw new TypeError('A \"duration\" of a spring is NaN, which it must not be');\n    }\n    if (!Number.isFinite(dur)) {\n        throw new TypeError('A \"duration\" of a spring must be finite, but is ' + dur);\n    }\n    if (dur <= 0) {\n        throw new TypeError('A \"duration\" of a spring must be positive, but is ' + dur);\n    }\n};\n// src/spring/spring-utils.ts\nvar defaultSpringConfig = {\n    damping: 10,\n    mass: 1,\n    stiffness: 100,\n    overshootClamping: false\n};\nvar advanceCache = {};\nfunction advance({ animation, now, config }) {\n    const { toValue, lastTimestamp, current, velocity } = animation;\n    const deltaTime = Math.min(now - lastTimestamp, 64);\n    if (config.damping <= 0) {\n        throw new Error(\"Spring damping must be greater than 0, otherwise the spring() animation will never end, causing an infinite loop.\");\n    }\n    const c2 = config.damping;\n    const m = config.mass;\n    const k = config.stiffness;\n    const cacheKey = [\n        toValue,\n        lastTimestamp,\n        current,\n        velocity,\n        c2,\n        m,\n        k,\n        now\n    ].join(\"-\");\n    if (advanceCache[cacheKey]) {\n        return advanceCache[cacheKey];\n    }\n    const v0 = -velocity;\n    const x0 = toValue - current;\n    const zeta = c2 / (2 * Math.sqrt(k * m));\n    const omega0 = Math.sqrt(k / m);\n    const omega1 = omega0 * Math.sqrt(1 - zeta ** 2);\n    const t = deltaTime / 1000;\n    const sin1 = Math.sin(omega1 * t);\n    const cos1 = Math.cos(omega1 * t);\n    const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n    const underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n    const underDampedPosition = toValue - underDampedFrag1;\n    const underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n    const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n    const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n    const criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n    const animationNode = {\n        toValue,\n        prevPosition: current,\n        lastTimestamp: now,\n        current: zeta < 1 ? underDampedPosition : criticallyDampedPosition,\n        velocity: zeta < 1 ? underDampedVelocity : criticallyDampedVelocity\n    };\n    advanceCache[cacheKey] = animationNode;\n    return animationNode;\n}\nvar calculationCache = {};\nfunction springCalculation({ frame, fps, config = {} }) {\n    const from = 0;\n    const to = 1;\n    const cacheKey = [\n        frame,\n        fps,\n        config.damping,\n        config.mass,\n        config.overshootClamping,\n        config.stiffness\n    ].join(\"-\");\n    if (calculationCache[cacheKey]) {\n        return calculationCache[cacheKey];\n    }\n    let animation = {\n        lastTimestamp: 0,\n        current: from,\n        toValue: to,\n        velocity: 0,\n        prevPosition: 0\n    };\n    const frameClamped = Math.max(0, frame);\n    const unevenRest = frameClamped % 1;\n    for(let f = 0; f <= Math.floor(frameClamped); f++){\n        if (f === Math.floor(frameClamped)) {\n            f += unevenRest;\n        }\n        const time = f / fps * 1000;\n        animation = advance({\n            animation,\n            now: time,\n            config: {\n                ...defaultSpringConfig,\n                ...config\n            }\n        });\n    }\n    calculationCache[cacheKey] = animation;\n    return animation;\n}\n// src/spring/measure-spring.ts\nvar cache = new Map;\nfunction measureSpring({ fps, config = {}, threshold = 0.005 }) {\n    if (typeof threshold !== \"number\") {\n        throw new TypeError(`threshold must be a number, got ${threshold} of type ${typeof threshold}`);\n    }\n    if (threshold === 0) {\n        return Infinity;\n    }\n    if (threshold === 1) {\n        return 0;\n    }\n    if (isNaN(threshold)) {\n        throw new TypeError(\"Threshold is NaN\");\n    }\n    if (!Number.isFinite(threshold)) {\n        throw new TypeError(\"Threshold is not finite\");\n    }\n    if (threshold < 0) {\n        throw new TypeError(\"Threshold is below 0\");\n    }\n    const cacheKey = [\n        fps,\n        config.damping,\n        config.mass,\n        config.overshootClamping,\n        config.stiffness,\n        threshold\n    ].join(\"-\");\n    if (cache.has(cacheKey)) {\n        return cache.get(cacheKey);\n    }\n    validateFps(fps, \"to the measureSpring() function\", false);\n    let frame = 0;\n    let finishedFrame = 0;\n    const calc = ()=>{\n        return springCalculation({\n            fps,\n            frame,\n            config\n        });\n    };\n    let animation = calc();\n    const calcDifference = ()=>{\n        return Math.abs(animation.current - animation.toValue);\n    };\n    let difference = calcDifference();\n    while(difference >= threshold){\n        frame++;\n        animation = calc();\n        difference = calcDifference();\n    }\n    finishedFrame = frame;\n    for(let i = 0; i < 20; i++){\n        frame++;\n        animation = calc();\n        difference = calcDifference();\n        if (difference >= threshold) {\n            i = 0;\n            finishedFrame = frame + 1;\n        }\n    }\n    cache.set(cacheKey, finishedFrame);\n    return finishedFrame;\n}\n// src/spring/index.ts\nfunction spring({ frame: passedFrame, fps, config = {}, from = 0, to = 1, durationInFrames: passedDurationInFrames, durationRestThreshold, delay = 0, reverse = false }) {\n    validateSpringDuration(passedDurationInFrames);\n    validateFrame({\n        frame: passedFrame,\n        durationInFrames: Infinity,\n        allowFloats: true\n    });\n    validateFps(fps, \"to spring()\", false);\n    const needsToCalculateNaturalDuration = reverse || typeof passedDurationInFrames !== \"undefined\";\n    const naturalDuration = needsToCalculateNaturalDuration ? measureSpring({\n        fps,\n        config,\n        threshold: durationRestThreshold\n    }) : undefined;\n    const naturalDurationGetter = needsToCalculateNaturalDuration ? {\n        get: ()=>naturalDuration\n    } : {\n        get: ()=>{\n            throw new Error(\"did not calculate natural duration, this is an error with Remotion. Please report\");\n        }\n    };\n    const reverseProcessed = reverse ? (passedDurationInFrames ?? naturalDurationGetter.get()) - passedFrame : passedFrame;\n    const delayProcessed = reverseProcessed + (reverse ? delay : -delay);\n    const durationProcessed = passedDurationInFrames === undefined ? delayProcessed : delayProcessed / (passedDurationInFrames / naturalDurationGetter.get());\n    if (passedDurationInFrames && delayProcessed > passedDurationInFrames) {\n        return to;\n    }\n    const spr = springCalculation({\n        fps,\n        frame: durationProcessed,\n        config\n    });\n    const inner = config.overshootClamping ? to >= from ? Math.min(spr.current, to) : Math.max(spr.current, to) : spr.current;\n    const interpolated = from === 0 && to === 1 ? inner : interpolate(inner, [\n        0,\n        1\n    ], [\n        from,\n        to\n    ]);\n    return interpolated;\n}\n// src/static-file.ts\nvar problematicCharacters = {\n    \"%3A\": \":\",\n    \"%2F\": \"/\",\n    \"%3F\": \"?\",\n    \"%23\": \"#\",\n    \"%5B\": \"[\",\n    \"%5D\": \"]\",\n    \"%40\": \"@\",\n    \"%21\": \"!\",\n    \"%24\": \"$\",\n    \"%26\": \"&\",\n    \"%27\": \"'\",\n    \"%28\": \"(\",\n    \"%29\": \")\",\n    \"%2A\": \"*\",\n    \"%2B\": \"+\",\n    \"%2C\": \",\",\n    \"%3B\": \";\"\n};\nvar didWarn2 = {};\nvar warnOnce3 = (message)=>{\n    if (didWarn2[message]) {\n        return;\n    }\n    console.warn(message);\n    didWarn2[message] = true;\n};\nvar includesHexOfUnsafeChar = (path)=>{\n    for (const key of Object.keys(problematicCharacters)){\n        if (path.includes(key)) {\n            return {\n                containsHex: true,\n                hexCode: key\n            };\n        }\n    }\n    return {\n        containsHex: false\n    };\n};\nvar trimLeadingSlash = (path)=>{\n    if (path.startsWith(\"/\")) {\n        return trimLeadingSlash(path.substring(1));\n    }\n    return path;\n};\nvar inner = (path)=>{\n    if (false) {}\n    return `/${trimLeadingSlash(path)}`;\n};\nvar encodeBySplitting = (path)=>{\n    const splitBySlash = path.split(\"/\");\n    const encodedArray = splitBySlash.map((element)=>{\n        return encodeURIComponent(element);\n    });\n    const merged = encodedArray.join(\"/\");\n    return merged;\n};\nvar staticFile = (path)=>{\n    if (path === null) {\n        throw new TypeError(\"null was passed to staticFile()\");\n    }\n    if (typeof path === \"undefined\") {\n        throw new TypeError(\"undefined was passed to staticFile()\");\n    }\n    if (path.startsWith(\"http://\") || path.startsWith(\"https://\")) {\n        throw new TypeError(`staticFile() does not support remote URLs - got \"${path}\". Instead, pass the URL without wrapping it in staticFile(). See: https://remotion.dev/docs/staticfile-remote-urls`);\n    }\n    if (path.startsWith(\"..\") || path.startsWith(\"./\")) {\n        throw new TypeError(`staticFile() does not support relative paths - got \"${path}\". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    if (path.startsWith(\"/Users\") || path.startsWith(\"/home\") || path.startsWith(\"/tmp\") || path.startsWith(\"/etc\") || path.startsWith(\"/opt\") || path.startsWith(\"/var\") || path.startsWith(\"C:\") || path.startsWith(\"D:\") || path.startsWith(\"E:\")) {\n        throw new TypeError(`staticFile() does not support absolute paths - got \"${path}\". Instead, pass the name of a file that is inside the public/ folder. See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    if (path.startsWith(\"public/\")) {\n        throw new TypeError(`Do not include the public/ prefix when using staticFile() - got \"${path}\". See: https://remotion.dev/docs/staticfile-relative-paths`);\n    }\n    const includesHex = includesHexOfUnsafeChar(path);\n    if (includesHex.containsHex) {\n        warnOnce3(`WARNING: You seem to pass an already encoded path (path contains ${includesHex.hexCode}). Since Remotion 4.0, the encoding is done by staticFile() itself. You may want to remove a encodeURIComponent() wrapping.`);\n    }\n    const preprocessed = encodeBySplitting(path);\n    const preparsed = inner(preprocessed);\n    if (!preparsed.startsWith(\"/\")) {\n        return `/${preparsed}`;\n    }\n    return preparsed;\n};\n// src/Still.tsx\n\nvar Still = (props2)=>{\n    const newProps = {\n        ...props2,\n        durationInFrames: 1,\n        fps: 1\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Composition, newProps);\n};\n// src/video/OffthreadVideo.tsx\n\n// src/video/OffthreadVideoForRendering.tsx\n\n\nvar OffthreadVideoForRendering = ({ onError, volume: volumeProp, playbackRate, src, muted, allowAmplificationDuringRender, transparent = false, toneMapped = true, toneFrequency, name, loopVolumeCurveBehavior, delayRenderRetries, delayRenderTimeoutInMilliseconds, onVideoFrame, crossOrigin, audioStreamIndex, ...props2 })=>{\n    const absoluteFrame = useTimelinePosition();\n    const frame = useCurrentFrame();\n    const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? \"repeat\");\n    const videoConfig = useUnsafeVideoConfig();\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const mediaStartsAt = useMediaStartsAt();\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    if (!src) {\n        throw new TypeError(\"No `src` was passed to <OffthreadVideo>.\");\n    }\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"OffthreadVideoForRendering.useMemo29[id]\": ()=>`offthreadvideo-${random(src ?? \"\")}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.relativeFrom}-${sequenceContext?.durationInFrames}`\n    }[\"OffthreadVideoForRendering.useMemo29[id]\"], [\n        src,\n        sequenceContext?.cumulatedFrom,\n        sequenceContext?.relativeFrom,\n        sequenceContext?.durationInFrames\n    ]);\n    if (!videoConfig) {\n        throw new Error(\"No video config found\");\n    }\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropsFrame,\n        mediaVolume: 1\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"OffthreadVideoForRendering.useEffect20\": ()=>{\n            if (!src) {\n                throw new Error(\"No src passed\");\n            }\n            if (!window.remotion_audioEnabled) {\n                return;\n            }\n            if (muted) {\n                return;\n            }\n            if (volume <= 0) {\n                return;\n            }\n            registerRenderAsset({\n                type: \"video\",\n                src: getAbsoluteSrc(src),\n                id,\n                frame: absoluteFrame,\n                volume,\n                mediaFrame: frame,\n                playbackRate: playbackRate ?? 1,\n                toneFrequency: toneFrequency ?? null,\n                audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),\n                audioStreamIndex: audioStreamIndex ?? 0\n            });\n            return ({\n                \"OffthreadVideoForRendering.useEffect20\": ()=>unregisterRenderAsset(id)\n            })[\"OffthreadVideoForRendering.useEffect20\"];\n        }\n    }[\"OffthreadVideoForRendering.useEffect20\"], [\n        muted,\n        src,\n        registerRenderAsset,\n        id,\n        unregisterRenderAsset,\n        volume,\n        frame,\n        absoluteFrame,\n        playbackRate,\n        toneFrequency,\n        sequenceContext?.relativeFrom,\n        audioStreamIndex\n    ]);\n    const currentTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"OffthreadVideoForRendering.useMemo29[currentTime]\": ()=>{\n            return getExpectedMediaFrameUncorrected({\n                frame,\n                playbackRate: playbackRate || 1,\n                startFrom: -mediaStartsAt\n            }) / videoConfig.fps;\n        }\n    }[\"OffthreadVideoForRendering.useMemo29[currentTime]\"], [\n        frame,\n        mediaStartsAt,\n        playbackRate,\n        videoConfig.fps\n    ]);\n    const actualSrc = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"OffthreadVideoForRendering.useMemo29[actualSrc]\": ()=>{\n            return getOffthreadVideoSource({\n                src,\n                currentTime,\n                transparent,\n                toneMapped\n            });\n        }\n    }[\"OffthreadVideoForRendering.useMemo29[actualSrc]\"], [\n        toneMapped,\n        currentTime,\n        src,\n        transparent\n    ]);\n    const [imageSrc, setImageSrc] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n        \"OffthreadVideoForRendering.useLayoutEffect9\": ()=>{\n            if (!window.remotion_videoEnabled) {\n                return;\n            }\n            const cleanup = [];\n            setImageSrc(null);\n            const controller = new AbortController;\n            const newHandle = delayRender2(`Fetching ${actualSrc} from server`, {\n                retries: delayRenderRetries ?? undefined,\n                timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined\n            });\n            const execute = {\n                \"OffthreadVideoForRendering.useLayoutEffect9.execute\": async ()=>{\n                    try {\n                        const res = await fetch(actualSrc, {\n                            signal: controller.signal,\n                            cache: \"no-store\"\n                        });\n                        if (res.status !== 200) {\n                            if (res.status === 500) {\n                                const json = await res.json();\n                                if (json.error) {\n                                    const cleanedUpErrorMessage = json.error.replace(/^Error: /, \"\");\n                                    throw new Error(cleanedUpErrorMessage);\n                                }\n                            }\n                            throw new Error(`Server returned status ${res.status} while fetching ${actualSrc}`);\n                        }\n                        const blob = await res.blob();\n                        const url = URL.createObjectURL(blob);\n                        cleanup.push({\n                            \"OffthreadVideoForRendering.useLayoutEffect9.execute\": ()=>URL.revokeObjectURL(url)\n                        }[\"OffthreadVideoForRendering.useLayoutEffect9.execute\"]);\n                        setImageSrc({\n                            src: url,\n                            handle: newHandle\n                        });\n                    } catch (err) {\n                        if (err.message.includes(\"aborted\")) {\n                            continueRender2(newHandle);\n                            return;\n                        }\n                        if (controller.signal.aborted) {\n                            continueRender2(newHandle);\n                            return;\n                        }\n                        if (err.message.includes(\"Failed to fetch\")) {\n                            err = new Error(`Failed to fetch ${actualSrc}. This could be caused by Chrome rejecting the request because the disk space is low. Consider increasing the disk size of your environment.`, {\n                                cause: err\n                            });\n                        }\n                        if (onError) {\n                            onError(err);\n                        } else {\n                            cancelRender(err);\n                        }\n                    }\n                }\n            }[\"OffthreadVideoForRendering.useLayoutEffect9.execute\"];\n            execute();\n            cleanup.push({\n                \"OffthreadVideoForRendering.useLayoutEffect9\": ()=>{\n                    if (controller.signal.aborted) {\n                        return;\n                    }\n                    controller.abort();\n                }\n            }[\"OffthreadVideoForRendering.useLayoutEffect9\"]);\n            return ({\n                \"OffthreadVideoForRendering.useLayoutEffect9\": ()=>{\n                    cleanup.forEach({\n                        \"OffthreadVideoForRendering.useLayoutEffect9\": (c2)=>c2()\n                    }[\"OffthreadVideoForRendering.useLayoutEffect9\"]);\n                }\n            })[\"OffthreadVideoForRendering.useLayoutEffect9\"];\n        }\n    }[\"OffthreadVideoForRendering.useLayoutEffect9\"], [\n        actualSrc,\n        delayRenderRetries,\n        delayRenderTimeoutInMilliseconds,\n        onError,\n        continueRender2,\n        delayRender2\n    ]);\n    const onErr = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"OffthreadVideoForRendering.useCallback15[onErr]\": ()=>{\n            if (onError) {\n                onError?.(new Error(\"Failed to load image with src \" + imageSrc));\n            } else {\n                cancelRender(\"Failed to load image with src \" + imageSrc);\n            }\n        }\n    }[\"OffthreadVideoForRendering.useCallback15[onErr]\"], [\n        imageSrc,\n        onError\n    ]);\n    const className = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"OffthreadVideoForRendering.useMemo29[className]\": ()=>{\n            return [\n                OFFTHREAD_VIDEO_CLASS_NAME,\n                props2.className\n            ].filter(truthy).join(\" \");\n        }\n    }[\"OffthreadVideoForRendering.useMemo29[className]\"], [\n        props2.className\n    ]);\n    const onImageFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"OffthreadVideoForRendering.useCallback15[onImageFrame]\": (img)=>{\n            if (onVideoFrame) {\n                onVideoFrame(img);\n            }\n        }\n    }[\"OffthreadVideoForRendering.useCallback15[onImageFrame]\"], [\n        onVideoFrame\n    ]);\n    if (!imageSrc || !window.remotion_videoEnabled) {\n        return null;\n    }\n    continueRender2(imageSrc.handle);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Img, {\n        src: imageSrc.src,\n        className,\n        delayRenderRetries,\n        delayRenderTimeoutInMilliseconds,\n        onImageFrame,\n        ...props2,\n        onError: onErr\n    });\n};\n// src/video/OffthreadVideo.tsx\n\nvar OffthreadVideo = (props2)=>{\n    const { startFrom, endAt, trimBefore, trimAfter, name, pauseWhenBuffering, stack, showInTimeline, ...otherProps } = props2;\n    const environment = useRemotionEnvironment();\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"OffthreadVideo.useCallback16[onDuration]\": ()=>{\n            return;\n        }\n    }[\"OffthreadVideo.useCallback16[onDuration]\"], []);\n    if (typeof props2.src !== \"string\") {\n        throw new TypeError(`The \\`<OffthreadVideo>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props2.src)} instead.`);\n    }\n    if (props2.imageFormat) {\n        throw new TypeError(`The \\`<OffthreadVideo>\\` tag does no longer accept \\`imageFormat\\`. Use the \\`transparent\\` prop if you want to render a transparent video.`);\n    }\n    validateMediaTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    const { trimBeforeValue, trimAfterValue } = resolveTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    if (typeof trimBeforeValue !== \"undefined\" || typeof trimAfterValue !== \"undefined\") {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n            layout: \"none\",\n            from: 0 - (trimBeforeValue ?? 0),\n            showInTimeline: false,\n            durationInFrames: trimAfterValue,\n            name,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideo, {\n                pauseWhenBuffering: pauseWhenBuffering ?? false,\n                ...otherProps\n            })\n        });\n    }\n    validateMediaProps(props2, \"Video\");\n    if (environment.isRendering) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(OffthreadVideoForRendering, {\n            ...otherProps\n        });\n    }\n    const { transparent, toneMapped, onAutoPlayError, onVideoFrame, crossOrigin, delayRenderRetries, delayRenderTimeoutInMilliseconds, ...propsForPreview } = otherProps;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForPreview, {\n        _remotionInternalStack: stack ?? null,\n        _remotionInternalNativeLoopPassed: false,\n        onDuration,\n        onlyWarnForMediaSeekingError: true,\n        pauseWhenBuffering: pauseWhenBuffering ?? false,\n        showInTimeline: showInTimeline ?? true,\n        onAutoPlayError: onAutoPlayError ?? undefined,\n        onVideoFrame: onVideoFrame ?? null,\n        crossOrigin,\n        ...propsForPreview\n    });\n};\n// src/video/Video.tsx\n\n// src/video/VideoForRendering.tsx\n\n// src/video/seek-until-right.ts\nvar roundTo6Commas = (num)=>{\n    return Math.round(num * 1e5) / 1e5;\n};\nvar seekToTime = ({ element, desiredTime, logLevel, mountTime })=>{\n    if (isApproximatelyTheSame(element.currentTime, desiredTime)) {\n        return {\n            wait: Promise.resolve(desiredTime),\n            cancel: ()=>{}\n        };\n    }\n    seek({\n        logLevel,\n        mediaRef: element,\n        time: desiredTime,\n        why: \"Seeking during rendering\",\n        mountTime\n    });\n    let cancel;\n    let cancelSeeked = null;\n    const prom = new Promise((resolve)=>{\n        cancel = element.requestVideoFrameCallback((now, metadata)=>{\n            const displayIn = metadata.expectedDisplayTime - now;\n            if (displayIn <= 0) {\n                resolve(metadata.mediaTime);\n                return;\n            }\n            setTimeout(()=>{\n                resolve(metadata.mediaTime);\n            }, displayIn + 150);\n        });\n    });\n    const waitForSeekedEvent = new Promise((resolve)=>{\n        const onDone = ()=>{\n            resolve();\n        };\n        element.addEventListener(\"seeked\", onDone, {\n            once: true\n        });\n        cancelSeeked = ()=>{\n            element.removeEventListener(\"seeked\", onDone);\n        };\n    });\n    return {\n        wait: Promise.all([\n            prom,\n            waitForSeekedEvent\n        ]).then(([time])=>time),\n        cancel: ()=>{\n            cancelSeeked?.();\n            element.cancelVideoFrameCallback(cancel);\n        }\n    };\n};\nvar seekToTimeMultipleUntilRight = ({ element, desiredTime, fps, logLevel, mountTime })=>{\n    const threshold = 1 / fps / 2;\n    let currentCancel = ()=>{\n        return;\n    };\n    if (Number.isFinite(element.duration) && element.currentTime >= element.duration && desiredTime >= element.duration) {\n        return {\n            prom: Promise.resolve(),\n            cancel: ()=>{}\n        };\n    }\n    const prom = new Promise((resolve, reject)=>{\n        const firstSeek = seekToTime({\n            element,\n            desiredTime: desiredTime + threshold,\n            logLevel,\n            mountTime\n        });\n        firstSeek.wait.then((seekedTo)=>{\n            const difference = Math.abs(desiredTime - seekedTo);\n            if (difference <= threshold) {\n                return resolve();\n            }\n            const sign = desiredTime > seekedTo ? 1 : -1;\n            const newSeek = seekToTime({\n                element,\n                desiredTime: seekedTo + threshold * sign,\n                logLevel,\n                mountTime\n            });\n            currentCancel = newSeek.cancel;\n            newSeek.wait.then((newTime)=>{\n                const newDifference = Math.abs(desiredTime - newTime);\n                if (roundTo6Commas(newDifference) <= roundTo6Commas(threshold)) {\n                    return resolve();\n                }\n                const thirdSeek = seekToTime({\n                    element,\n                    desiredTime: desiredTime + threshold,\n                    logLevel,\n                    mountTime\n                });\n                currentCancel = thirdSeek.cancel;\n                return thirdSeek.wait.then(()=>{\n                    resolve();\n                }).catch((err)=>{\n                    reject(err);\n                });\n            }).catch((err)=>{\n                reject(err);\n            });\n        });\n        currentCancel = firstSeek.cancel;\n    });\n    return {\n        prom,\n        cancel: ()=>{\n            currentCancel();\n        }\n    };\n};\n// src/video/VideoForRendering.tsx\n\nvar VideoForRenderingForwardFunction = ({ onError, volume: volumeProp, allowAmplificationDuringRender, playbackRate, onDuration, toneFrequency, name, acceptableTimeShiftInSeconds, delayRenderRetries, delayRenderTimeoutInMilliseconds, loopVolumeCurveBehavior, audioStreamIndex, ...props2 }, ref)=>{\n    const absoluteFrame = useTimelinePosition();\n    const frame = useCurrentFrame();\n    const volumePropsFrame = useFrameForVolumeProp(loopVolumeCurveBehavior ?? \"repeat\");\n    const videoConfig = useUnsafeVideoConfig();\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const sequenceContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SequenceContext);\n    const mediaStartsAt = useMediaStartsAt();\n    const environment = useRemotionEnvironment();\n    const logLevel = useLogLevel();\n    const mountTime = useMountTime();\n    const { delayRender: delayRender2, continueRender: continueRender2 } = useDelayRender();\n    const { registerRenderAsset, unregisterRenderAsset } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RenderAssetManager);\n    const id = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"VideoForRenderingForwardFunction.useMemo30[id]\": ()=>`video-${random(props2.src ?? \"\")}-${sequenceContext?.cumulatedFrom}-${sequenceContext?.relativeFrom}-${sequenceContext?.durationInFrames}`\n    }[\"VideoForRenderingForwardFunction.useMemo30[id]\"], [\n        props2.src,\n        sequenceContext?.cumulatedFrom,\n        sequenceContext?.relativeFrom,\n        sequenceContext?.durationInFrames\n    ]);\n    if (!videoConfig) {\n        throw new Error(\"No video config found\");\n    }\n    const volume = evaluateVolume({\n        volume: volumeProp,\n        frame: volumePropsFrame,\n        mediaVolume: 1\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoForRenderingForwardFunction.useEffect21\": ()=>{\n            if (!props2.src) {\n                throw new Error(\"No src passed\");\n            }\n            if (props2.muted) {\n                return;\n            }\n            if (volume <= 0) {\n                return;\n            }\n            if (!window.remotion_audioEnabled) {\n                return;\n            }\n            registerRenderAsset({\n                type: \"video\",\n                src: getAbsoluteSrc(props2.src),\n                id,\n                frame: absoluteFrame,\n                volume,\n                mediaFrame: frame,\n                playbackRate: playbackRate ?? 1,\n                toneFrequency: toneFrequency ?? null,\n                audioStartFrame: Math.max(0, -(sequenceContext?.relativeFrom ?? 0)),\n                audioStreamIndex: audioStreamIndex ?? 0\n            });\n            return ({\n                \"VideoForRenderingForwardFunction.useEffect21\": ()=>unregisterRenderAsset(id)\n            })[\"VideoForRenderingForwardFunction.useEffect21\"];\n        }\n    }[\"VideoForRenderingForwardFunction.useEffect21\"], [\n        props2.muted,\n        props2.src,\n        registerRenderAsset,\n        id,\n        unregisterRenderAsset,\n        volume,\n        frame,\n        absoluteFrame,\n        playbackRate,\n        toneFrequency,\n        sequenceContext?.relativeFrom,\n        audioStreamIndex\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, {\n        \"VideoForRenderingForwardFunction.useImperativeHandle10\": ()=>{\n            return videoRef.current;\n        }\n    }[\"VideoForRenderingForwardFunction.useImperativeHandle10\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoForRenderingForwardFunction.useEffect21\": ()=>{\n            if (!window.remotion_videoEnabled) {\n                return;\n            }\n            const { current } = videoRef;\n            if (!current) {\n                return;\n            }\n            const currentTime = getMediaTime({\n                frame,\n                playbackRate: playbackRate || 1,\n                startFrom: -mediaStartsAt,\n                fps: videoConfig.fps\n            });\n            const handle = delayRender2(`Rendering <Video /> with src=\"${props2.src}\" at time ${currentTime}`, {\n                retries: delayRenderRetries ?? undefined,\n                timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined\n            });\n            if (window.process?.env?.NODE_ENV === \"test\") {\n                continueRender2(handle);\n                return;\n            }\n            if (isApproximatelyTheSame(current.currentTime, currentTime)) {\n                if (current.readyState >= 2) {\n                    continueRender2(handle);\n                    return;\n                }\n                const loadedDataHandler = {\n                    \"VideoForRenderingForwardFunction.useEffect21.loadedDataHandler\": ()=>{\n                        continueRender2(handle);\n                    }\n                }[\"VideoForRenderingForwardFunction.useEffect21.loadedDataHandler\"];\n                current.addEventListener(\"loadeddata\", loadedDataHandler, {\n                    once: true\n                });\n                return ({\n                    \"VideoForRenderingForwardFunction.useEffect21\": ()=>{\n                        current.removeEventListener(\"loadeddata\", loadedDataHandler);\n                    }\n                })[\"VideoForRenderingForwardFunction.useEffect21\"];\n            }\n            const endedHandler = {\n                \"VideoForRenderingForwardFunction.useEffect21.endedHandler\": ()=>{\n                    continueRender2(handle);\n                }\n            }[\"VideoForRenderingForwardFunction.useEffect21.endedHandler\"];\n            const seek2 = seekToTimeMultipleUntilRight({\n                element: current,\n                desiredTime: currentTime,\n                fps: videoConfig.fps,\n                logLevel,\n                mountTime\n            });\n            seek2.prom.then({\n                \"VideoForRenderingForwardFunction.useEffect21\": ()=>{\n                    continueRender2(handle);\n                }\n            }[\"VideoForRenderingForwardFunction.useEffect21\"]);\n            current.addEventListener(\"ended\", endedHandler, {\n                once: true\n            });\n            const errorHandler = {\n                \"VideoForRenderingForwardFunction.useEffect21.errorHandler\": ()=>{\n                    if (current?.error) {\n                        console.error(\"Error occurred in video\", current?.error);\n                        if (onError) {\n                            return;\n                        }\n                        throw new Error(`The browser threw an error while playing the video ${props2.src}: Code ${current.error.code} - ${current?.error?.message}. See https://remotion.dev/docs/media-playback-error for help. Pass an onError() prop to handle the error.`);\n                    } else {\n                        throw new Error(\"The browser threw an error\");\n                    }\n                }\n            }[\"VideoForRenderingForwardFunction.useEffect21.errorHandler\"];\n            current.addEventListener(\"error\", errorHandler, {\n                once: true\n            });\n            return ({\n                \"VideoForRenderingForwardFunction.useEffect21\": ()=>{\n                    seek2.cancel();\n                    current.removeEventListener(\"ended\", endedHandler);\n                    current.removeEventListener(\"error\", errorHandler);\n                    continueRender2(handle);\n                }\n            })[\"VideoForRenderingForwardFunction.useEffect21\"];\n        }\n    }[\"VideoForRenderingForwardFunction.useEffect21\"], [\n        volumePropsFrame,\n        props2.src,\n        playbackRate,\n        videoConfig.fps,\n        frame,\n        mediaStartsAt,\n        onError,\n        delayRenderRetries,\n        delayRenderTimeoutInMilliseconds,\n        logLevel,\n        mountTime,\n        continueRender2,\n        delayRender2\n    ]);\n    const { src } = props2;\n    if (environment.isRendering) {\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)({\n            \"VideoForRenderingForwardFunction.useLayoutEffect10\": ()=>{\n                if (window.process?.env?.NODE_ENV === \"test\") {\n                    return;\n                }\n                const newHandle = delayRender2(\"Loading <Video> duration with src=\" + src, {\n                    retries: delayRenderRetries ?? undefined,\n                    timeoutInMilliseconds: delayRenderTimeoutInMilliseconds ?? undefined\n                });\n                const { current } = videoRef;\n                const didLoad = {\n                    \"VideoForRenderingForwardFunction.useLayoutEffect10.didLoad\": ()=>{\n                        if (current?.duration) {\n                            onDuration(src, current.duration);\n                        }\n                        continueRender2(newHandle);\n                    }\n                }[\"VideoForRenderingForwardFunction.useLayoutEffect10.didLoad\"];\n                if (current?.duration) {\n                    onDuration(src, current.duration);\n                    continueRender2(newHandle);\n                } else {\n                    current?.addEventListener(\"loadedmetadata\", didLoad, {\n                        once: true\n                    });\n                }\n                return ({\n                    \"VideoForRenderingForwardFunction.useLayoutEffect10\": ()=>{\n                        current?.removeEventListener(\"loadedmetadata\", didLoad);\n                        continueRender2(newHandle);\n                    }\n                })[\"VideoForRenderingForwardFunction.useLayoutEffect10\"];\n            }\n        }[\"VideoForRenderingForwardFunction.useLayoutEffect10\"], [\n            src,\n            onDuration,\n            delayRenderRetries,\n            delayRenderTimeoutInMilliseconds,\n            continueRender2,\n            delayRender2\n        ]);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"video\", {\n        ref: videoRef,\n        disableRemotePlayback: true,\n        ...props2\n    });\n};\nvar VideoForRendering = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForRenderingForwardFunction);\n// src/video/Video.tsx\n\nvar VideoForwardingFunction = (props2, ref)=>{\n    const { startFrom, endAt, trimBefore, trimAfter, name, pauseWhenBuffering, stack, _remotionInternalNativeLoopPassed, showInTimeline, onAutoPlayError, ...otherProps } = props2;\n    const { loop, ...propsOtherThanLoop } = props2;\n    const { fps } = useVideoConfig();\n    const environment = useRemotionEnvironment();\n    const { durations, setDurations } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DurationsContext);\n    if (typeof ref === \"string\") {\n        throw new Error(\"string refs are not supported\");\n    }\n    if (typeof props2.src !== \"string\") {\n        throw new TypeError(`The \\`<Video>\\` tag requires a string for \\`src\\`, but got ${JSON.stringify(props2.src)} instead.`);\n    }\n    const preloadedSrc = usePreload(props2.src);\n    const onDuration = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"VideoForwardingFunction.useCallback17[onDuration]\": (src, durationInSeconds)=>{\n            setDurations({\n                type: \"got-duration\",\n                durationInSeconds,\n                src\n            });\n        }\n    }[\"VideoForwardingFunction.useCallback17[onDuration]\"], [\n        setDurations\n    ]);\n    const onVideoFrame = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"VideoForwardingFunction.useCallback17[onVideoFrame]\": ()=>{}\n    }[\"VideoForwardingFunction.useCallback17[onVideoFrame]\"], []);\n    const durationFetched = durations[getAbsoluteSrc(preloadedSrc)] ?? durations[getAbsoluteSrc(props2.src)];\n    validateMediaTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    const { trimBeforeValue, trimAfterValue } = resolveTrimProps({\n        startFrom,\n        endAt,\n        trimBefore,\n        trimAfter\n    });\n    if (loop && durationFetched !== undefined) {\n        if (!Number.isFinite(durationFetched)) {\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {\n                ...propsOtherThanLoop,\n                ref,\n                _remotionInternalNativeLoopPassed: true\n            });\n        }\n        const mediaDuration = durationFetched * fps;\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Loop, {\n            durationInFrames: calculateLoopDuration({\n                endAt: trimAfterValue ?? undefined,\n                mediaDuration,\n                playbackRate: props2.playbackRate ?? 1,\n                startFrom: trimBeforeValue ?? undefined\n            }),\n            layout: \"none\",\n            name,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {\n                ...propsOtherThanLoop,\n                ref,\n                _remotionInternalNativeLoopPassed: true\n            })\n        });\n    }\n    if (typeof trimBeforeValue !== \"undefined\" || typeof trimAfterValue !== \"undefined\") {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Sequence, {\n            layout: \"none\",\n            from: 0 - (trimBeforeValue ?? 0),\n            showInTimeline: false,\n            durationInFrames: trimAfterValue,\n            name,\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Video, {\n                pauseWhenBuffering: pauseWhenBuffering ?? false,\n                ...otherProps,\n                ref\n            })\n        });\n    }\n    validateMediaProps(props2, \"Video\");\n    if (environment.isRendering) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForRendering, {\n            onDuration,\n            onVideoFrame: onVideoFrame ?? null,\n            ...otherProps,\n            ref\n        });\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(VideoForPreview, {\n        onlyWarnForMediaSeekingError: false,\n        ...otherProps,\n        ref,\n        onVideoFrame: null,\n        pauseWhenBuffering: pauseWhenBuffering ?? false,\n        onDuration,\n        _remotionInternalStack: stack ?? null,\n        _remotionInternalNativeLoopPassed: _remotionInternalNativeLoopPassed ?? false,\n        showInTimeline: showInTimeline ?? true,\n        onAutoPlayError: onAutoPlayError ?? undefined\n    });\n};\nvar Video = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(VideoForwardingFunction);\naddSequenceStackTraces(Video);\n// src/index.ts\ncheckMultipleRemotionVersions();\nvar Experimental = {\n    Clipper,\n    Null,\n    useIsPlayer\n};\nvar proxyObj = {};\nvar Config = new Proxy(proxyObj, {\n    get (_, prop) {\n        if (prop === \"Bundling\" || prop === \"Rendering\" || prop === \"Log\" || prop === \"Puppeteer\" || prop === \"Output\") {\n            return Config;\n        }\n        return ()=>{\n            console.warn(\"⚠️  The CLI configuration has been extracted from Remotion Core.\");\n            console.warn(\"Update the import from the config file:\");\n            console.warn();\n            console.warn(\"- Delete:\");\n            console.warn('import {Config} from \"remotion\";');\n            console.warn(\"+ Replace:\");\n            console.warn('import {Config} from \"@remotion/cli/config\";');\n            console.warn();\n            console.warn(\"For more information, see https://www.remotion.dev/docs/4-0-migration.\");\n            process.exit(1);\n        };\n    }\n});\naddSequenceStackTraces(Sequence);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remotion/dist/esm/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/remotion/dist/esm/no-react.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/remotion/dist/esm/no-react.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NoReactInternals: () => (/* binding */ NoReactInternals),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   random: () => (/* binding */ random)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n// src/interpolate.ts\nfunction interpolateFunction(input, inputRange, outputRange, options) {\n  const { extrapolateLeft, extrapolateRight, easing } = options;\n  let result = input;\n  const [inputMin, inputMax] = inputRange;\n  const [outputMin, outputMax] = outputRange;\n  if (result < inputMin) {\n    if (extrapolateLeft === \"identity\") {\n      return result;\n    }\n    if (extrapolateLeft === \"clamp\") {\n      result = inputMin;\n    } else if (extrapolateLeft === \"wrap\") {\n      const range = inputMax - inputMin;\n      result = ((result - inputMin) % range + range) % range + inputMin;\n    } else if (extrapolateLeft === \"extend\") {}\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === \"identity\") {\n      return result;\n    }\n    if (extrapolateRight === \"clamp\") {\n      result = inputMax;\n    } else if (extrapolateRight === \"wrap\") {\n      const range = inputMax - inputMin;\n      result = ((result - inputMin) % range + range) % range + inputMin;\n    } else if (extrapolateRight === \"extend\") {}\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  result = (result - inputMin) / (inputMax - inputMin);\n  result = easing(result);\n  result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\nfunction findRange(input, inputRange) {\n  let i;\n  for (i = 1;i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  for (let i = 1;i < arr.length; ++i) {\n    if (!(arr[i] > arr[i - 1])) {\n      throw new Error(`inputRange must be strictly monotonically increasing but got [${arr.join(\",\")}]`);\n    }\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  if (arr.length < 2) {\n    throw new Error(name + \" must have at least 2 elements\");\n  }\n  for (const element of arr) {\n    if (typeof element !== \"number\") {\n      throw new Error(`${name} must contain only numbers`);\n    }\n    if (!Number.isFinite(element)) {\n      throw new Error(`${name} must contain only finite numbers, but got [${arr.join(\",\")}]`);\n    }\n  }\n}\nfunction interpolate(input, inputRange, outputRange, options) {\n  if (typeof input === \"undefined\") {\n    throw new Error(\"input can not be undefined\");\n  }\n  if (typeof inputRange === \"undefined\") {\n    throw new Error(\"inputRange can not be undefined\");\n  }\n  if (typeof outputRange === \"undefined\") {\n    throw new Error(\"outputRange can not be undefined\");\n  }\n  if (inputRange.length !== outputRange.length) {\n    throw new Error(\"inputRange (\" + inputRange.length + \") and outputRange (\" + outputRange.length + \") must have the same length\");\n  }\n  checkInfiniteRange(\"inputRange\", inputRange);\n  checkInfiniteRange(\"outputRange\", outputRange);\n  checkValidInputRange(inputRange);\n  const easing = options?.easing ?? ((num) => num);\n  let extrapolateLeft = \"extend\";\n  if (options?.extrapolateLeft !== undefined) {\n    extrapolateLeft = options.extrapolateLeft;\n  }\n  let extrapolateRight = \"extend\";\n  if (options?.extrapolateRight !== undefined) {\n    extrapolateRight = options.extrapolateRight;\n  }\n  if (typeof input !== \"number\") {\n    throw new TypeError(\"Cannot interpolate an input which is not a number\");\n  }\n  const range = findRange(input, inputRange);\n  return interpolateFunction(input, [inputRange[range], inputRange[range + 1]], [outputRange[range], outputRange[range + 1]], {\n    easing,\n    extrapolateLeft,\n    extrapolateRight\n  });\n}\n// src/random.ts\nfunction mulberry32(a) {\n  let t = a + 1831565813;\n  t = Math.imul(t ^ t >>> 15, t | 1);\n  t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n  return ((t ^ t >>> 14) >>> 0) / 4294967296;\n}\nfunction hashCode(str) {\n  let i = 0;\n  let chr = 0;\n  let hash = 0;\n  for (i = 0;i < str.length; i++) {\n    chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0;\n  }\n  return hash;\n}\nvar random = (seed, dummy) => {\n  if (dummy !== undefined) {\n    throw new TypeError(\"random() takes only one argument\");\n  }\n  if (seed === null) {\n    return Math.random();\n  }\n  if (typeof seed === \"string\") {\n    return mulberry32(hashCode(seed));\n  }\n  if (typeof seed === \"number\") {\n    return mulberry32(seed * 10000000000);\n  }\n  throw new Error(\"random() argument must be a number or a string\");\n};\n// src/get-remotion-environment.ts\n\nvar RemotionEnvironmentContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\n// src/truthy.ts\nfunction truthy(value) {\n  return Boolean(value);\n}\n\n// src/delay-render.ts\nif (typeof window !== \"undefined\") {\n  window.remotion_renderReady = false;\n}\nif (typeof window !== \"undefined\") {\n  window.remotion_delayRenderTimeouts = {};\n}\nvar DELAY_RENDER_CALLSTACK_TOKEN = \"The delayRender was called:\";\nvar DELAY_RENDER_RETRIES_LEFT = \"Retries left: \";\nvar DELAY_RENDER_RETRY_TOKEN = \"- Rendering the frame will be retried.\";\nvar DELAY_RENDER_CLEAR_TOKEN = \"handle was cleared after\";\n\n// src/input-props-serialization.ts\nvar DATE_TOKEN = \"remotion-date:\";\nvar FILE_TOKEN = \"remotion-file:\";\nvar serializeJSONWithSpecialTypes = ({\n  data,\n  indent,\n  staticBase\n}) => {\n  let customDateUsed = false;\n  let customFileUsed = false;\n  let mapUsed = false;\n  let setUsed = false;\n  try {\n    const serializedString = JSON.stringify(data, function(key, value) {\n      const item = this[key];\n      if (item instanceof Date) {\n        customDateUsed = true;\n        return `${DATE_TOKEN}${item.toISOString()}`;\n      }\n      if (item instanceof Map) {\n        mapUsed = true;\n        return value;\n      }\n      if (item instanceof Set) {\n        setUsed = true;\n        return value;\n      }\n      if (typeof item === \"string\" && staticBase !== null && item.startsWith(staticBase)) {\n        customFileUsed = true;\n        return `${FILE_TOKEN}${item.replace(staticBase + \"/\", \"\")}`;\n      }\n      return value;\n    }, indent);\n    return { serializedString, customDateUsed, customFileUsed, mapUsed, setUsed };\n  } catch (err) {\n    throw new Error(\"Could not serialize the passed input props to JSON: \" + err.message);\n  }\n};\nvar deserializeJSONWithSpecialTypes = (data) => {\n  return JSON.parse(data, (_, value) => {\n    if (typeof value === \"string\" && value.startsWith(DATE_TOKEN)) {\n      return new Date(value.replace(DATE_TOKEN, \"\"));\n    }\n    if (typeof value === \"string\" && value.startsWith(FILE_TOKEN)) {\n      return `${window.remotion_staticBase}/${value.replace(FILE_TOKEN, \"\")}`;\n    }\n    return value;\n  });\n};\n\n// src/interpolate-colors.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call(...args) {\n  return \"\\\\(\\\\s*(\" + args.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nfunction getMatchers() {\n  const cachedMatchers = {\n    rgb: undefined,\n    rgba: undefined,\n    hsl: undefined,\n    hsla: undefined,\n    hex3: undefined,\n    hex4: undefined,\n    hex5: undefined,\n    hex6: undefined,\n    hex8: undefined\n  };\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\n    cachedMatchers.hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\n    cachedMatchers.hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n  return cachedMatchers;\n}\nfunction hue2rgb(p, q, t) {\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\nfunction hslToRgb(h, s, l) {\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n  const int = Number.parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\nfunction parse360(str) {\n  const int = Number.parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n  const num = Number.parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n  const int = Number.parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\nvar colorNames = {\n  transparent: 0,\n  aliceblue: 4042850303,\n  antiquewhite: 4209760255,\n  aqua: 16777215,\n  aquamarine: 2147472639,\n  azure: 4043309055,\n  beige: 4126530815,\n  bisque: 4293182719,\n  black: 255,\n  blanchedalmond: 4293643775,\n  blue: 65535,\n  blueviolet: 2318131967,\n  brown: 2771004159,\n  burlywood: 3736635391,\n  burntsienna: 3934150143,\n  cadetblue: 1604231423,\n  chartreuse: 2147418367,\n  chocolate: 3530104575,\n  coral: 4286533887,\n  cornflowerblue: 1687547391,\n  cornsilk: 4294499583,\n  crimson: 3692313855,\n  cyan: 16777215,\n  darkblue: 35839,\n  darkcyan: 9145343,\n  darkgoldenrod: 3095792639,\n  darkgray: 2846468607,\n  darkgreen: 6553855,\n  darkgrey: 2846468607,\n  darkkhaki: 3182914559,\n  darkmagenta: 2332068863,\n  darkolivegreen: 1433087999,\n  darkorange: 4287365375,\n  darkorchid: 2570243327,\n  darkred: 2332033279,\n  darksalmon: 3918953215,\n  darkseagreen: 2411499519,\n  darkslateblue: 1211993087,\n  darkslategray: 793726975,\n  darkslategrey: 793726975,\n  darkturquoise: 13554175,\n  darkviolet: 2483082239,\n  deeppink: 4279538687,\n  deepskyblue: 12582911,\n  dimgray: 1768516095,\n  dimgrey: 1768516095,\n  dodgerblue: 512819199,\n  firebrick: 2988581631,\n  floralwhite: 4294635775,\n  forestgreen: 579543807,\n  fuchsia: 4278255615,\n  gainsboro: 3705462015,\n  ghostwhite: 4177068031,\n  gold: 4292280575,\n  goldenrod: 3668254975,\n  gray: 2155905279,\n  green: 8388863,\n  greenyellow: 2919182335,\n  grey: 2155905279,\n  honeydew: 4043305215,\n  hotpink: 4285117695,\n  indianred: 3445382399,\n  indigo: 1258324735,\n  ivory: 4294963455,\n  khaki: 4041641215,\n  lavender: 3873897215,\n  lavenderblush: 4293981695,\n  lawngreen: 2096890111,\n  lemonchiffon: 4294626815,\n  lightblue: 2916673279,\n  lightcoral: 4034953471,\n  lightcyan: 3774873599,\n  lightgoldenrodyellow: 4210742015,\n  lightgray: 3553874943,\n  lightgreen: 2431553791,\n  lightgrey: 3553874943,\n  lightpink: 4290167295,\n  lightsalmon: 4288707327,\n  lightseagreen: 548580095,\n  lightskyblue: 2278488831,\n  lightslategray: 2005441023,\n  lightslategrey: 2005441023,\n  lightsteelblue: 2965692159,\n  lightyellow: 4294959359,\n  lime: 16711935,\n  limegreen: 852308735,\n  linen: 4210091775,\n  magenta: 4278255615,\n  maroon: 2147483903,\n  mediumaquamarine: 1724754687,\n  mediumblue: 52735,\n  mediumorchid: 3126187007,\n  mediumpurple: 2473647103,\n  mediumseagreen: 1018393087,\n  mediumslateblue: 2070474495,\n  mediumspringgreen: 16423679,\n  mediumturquoise: 1221709055,\n  mediumvioletred: 3340076543,\n  midnightblue: 421097727,\n  mintcream: 4127193855,\n  mistyrose: 4293190143,\n  moccasin: 4293178879,\n  navajowhite: 4292783615,\n  navy: 33023,\n  oldlace: 4260751103,\n  olive: 2155872511,\n  olivedrab: 1804477439,\n  orange: 4289003775,\n  orangered: 4282712319,\n  orchid: 3664828159,\n  palegoldenrod: 4008225535,\n  palegreen: 2566625535,\n  paleturquoise: 2951671551,\n  palevioletred: 3681588223,\n  papayawhip: 4293907967,\n  peachpuff: 4292524543,\n  peru: 3448061951,\n  pink: 4290825215,\n  plum: 3718307327,\n  powderblue: 2967529215,\n  purple: 2147516671,\n  rebeccapurple: 1714657791,\n  red: 4278190335,\n  rosybrown: 3163525119,\n  royalblue: 1097458175,\n  saddlebrown: 2336560127,\n  salmon: 4202722047,\n  sandybrown: 4104413439,\n  seagreen: 780883967,\n  seashell: 4294307583,\n  sienna: 2689740287,\n  silver: 3233857791,\n  skyblue: 2278484991,\n  slateblue: 1784335871,\n  slategray: 1887473919,\n  slategrey: 1887473919,\n  snow: 4294638335,\n  springgreen: 16744447,\n  steelblue: 1182971135,\n  tan: 3535047935,\n  teal: 8421631,\n  thistle: 3636451583,\n  tomato: 4284696575,\n  turquoise: 1088475391,\n  violet: 4001558271,\n  wheat: 4125012991,\n  white: 4294967295,\n  whitesmoke: 4126537215,\n  yellow: 4294902015,\n  yellowgreen: 2597139199\n};\nfunction normalizeColor(color) {\n  const matchers = getMatchers();\n  let match;\n  if (matchers.hex6) {\n    if (match = matchers.hex6.exec(color)) {\n      return Number.parseInt(match[1] + \"ff\", 16) >>> 0;\n    }\n  }\n  if (colorNames[color] !== undefined) {\n    return colorNames[color];\n  }\n  if (matchers.rgb) {\n    if (match = matchers.rgb.exec(color)) {\n      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;\n    }\n  }\n  if (matchers.rgba) {\n    if (match = matchers.rgba.exec(color)) {\n      return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n    }\n  }\n  if (matchers.hex3) {\n    if (match = matchers.hex3.exec(color)) {\n      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + \"ff\", 16) >>> 0;\n    }\n  }\n  if (matchers.hex8) {\n    if (match = matchers.hex8.exec(color)) {\n      return Number.parseInt(match[1], 16) >>> 0;\n    }\n  }\n  if (matchers.hex4) {\n    if (match = matchers.hex4.exec(color)) {\n      return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n    }\n  }\n  if (matchers.hsl) {\n    if (match = matchers.hsl.exec(color)) {\n      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;\n    }\n  }\n  if (matchers.hsla) {\n    if (match = matchers.hsla.exec(color)) {\n      return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n    }\n  }\n  throw new Error(`invalid color string ${color} provided`);\n}\nfunction processColor(color) {\n  const normalizedColor = normalizeColor(color);\n  return (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n}\n\n// src/v5-flag.ts\nvar ENABLE_V5_BREAKING_CHANGES = false;\n\n// src/validate-frame.ts\nvar validateFrame = ({\n  allowFloats,\n  durationInFrames,\n  frame\n}) => {\n  if (typeof frame === \"undefined\") {\n    throw new TypeError(`Argument missing for parameter \"frame\"`);\n  }\n  if (typeof frame !== \"number\") {\n    throw new TypeError(`Argument passed for \"frame\" is not a number: ${frame}`);\n  }\n  if (!Number.isFinite(frame)) {\n    throw new RangeError(`Frame ${frame} is not finite`);\n  }\n  if (frame % 1 !== 0 && !allowFloats) {\n    throw new RangeError(`Argument for frame must be an integer, but got ${frame}`);\n  }\n  if (frame < 0 && frame < -durationInFrames) {\n    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the lowest frame that can be rendered is ${-durationInFrames}`);\n  }\n  if (frame > durationInFrames - 1) {\n    throw new RangeError(`Cannot use frame ${frame}: Duration of composition is ${durationInFrames}, therefore the highest frame that can be rendered is ${durationInFrames - 1}`);\n  }\n};\n\n// src/codec.ts\nvar validCodecs = [\n  \"h264\",\n  \"h265\",\n  \"vp8\",\n  \"vp9\",\n  \"mp3\",\n  \"aac\",\n  \"wav\",\n  \"prores\",\n  \"h264-mkv\",\n  \"h264-ts\",\n  \"gif\"\n];\n\n// src/validation/validate-default-codec.ts\nfunction validateCodec(defaultCodec, location, name) {\n  if (typeof defaultCodec === \"undefined\") {\n    return;\n  }\n  if (typeof defaultCodec !== \"string\") {\n    throw new TypeError(`The \"${name}\" prop ${location} must be a string, but you passed a value of type ${typeof defaultCodec}.`);\n  }\n  if (!validCodecs.includes(defaultCodec)) {\n    throw new Error(`The \"${name}\" prop ${location} must be one of ${validCodecs.join(\", \")}, but you passed ${defaultCodec}.`);\n  }\n}\n\n// src/validation/validate-default-props.ts\nvar validateDefaultAndInputProps = (defaultProps, name, compositionId) => {\n  if (!defaultProps) {\n    return;\n  }\n  if (typeof defaultProps !== \"object\") {\n    throw new Error(`\"${name}\" must be an object, but you passed a value of type ${typeof defaultProps}`);\n  }\n  if (Array.isArray(defaultProps)) {\n    throw new Error(`\"${name}\" must be an object, an array was passed ${compositionId ? `for composition \"${compositionId}\"` : \"\"}`);\n  }\n};\n\n// src/validation/validate-dimensions.ts\nfunction validateDimension(amount, nameOfProp, location) {\n  if (typeof amount !== \"number\") {\n    throw new Error(`The \"${nameOfProp}\" prop ${location} must be a number, but you passed a value of type ${typeof amount}`);\n  }\n  if (isNaN(amount)) {\n    throw new TypeError(`The \"${nameOfProp}\" prop ${location} must not be NaN, but is NaN.`);\n  }\n  if (!Number.isFinite(amount)) {\n    throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be finite, but is ${amount}.`);\n  }\n  if (amount % 1 !== 0) {\n    throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be an integer, but is ${amount}.`);\n  }\n  if (amount <= 0) {\n    throw new TypeError(`The \"${nameOfProp}\" prop ${location} must be positive, but got ${amount}.`);\n  }\n}\n\n// src/validation/validate-duration-in-frames.ts\nfunction validateDurationInFrames(durationInFrames, options) {\n  const { allowFloats, component } = options;\n  if (typeof durationInFrames === \"undefined\") {\n    throw new Error(`The \"durationInFrames\" prop ${component} is missing.`);\n  }\n  if (typeof durationInFrames !== \"number\") {\n    throw new Error(`The \"durationInFrames\" prop ${component} must be a number, but you passed a value of type ${typeof durationInFrames}`);\n  }\n  if (durationInFrames <= 0) {\n    throw new TypeError(`The \"durationInFrames\" prop ${component} must be positive, but got ${durationInFrames}.`);\n  }\n  if (!allowFloats && durationInFrames % 1 !== 0) {\n    throw new TypeError(`The \"durationInFrames\" prop ${component} must be an integer, but got ${durationInFrames}.`);\n  }\n  if (!Number.isFinite(durationInFrames)) {\n    throw new TypeError(`The \"durationInFrames\" prop ${component} must be finite, but got ${durationInFrames}.`);\n  }\n}\n\n// src/validation/validate-fps.ts\nfunction validateFps(fps, location, isGif) {\n  if (typeof fps !== \"number\") {\n    throw new Error(`\"fps\" must be a number, but you passed a value of type ${typeof fps} ${location}`);\n  }\n  if (!Number.isFinite(fps)) {\n    throw new Error(`\"fps\" must be a finite, but you passed ${fps} ${location}`);\n  }\n  if (isNaN(fps)) {\n    throw new Error(`\"fps\" must not be NaN, but got ${fps} ${location}`);\n  }\n  if (fps <= 0) {\n    throw new TypeError(`\"fps\" must be positive, but got ${fps} ${location}`);\n  }\n  if (isGif && fps > 50) {\n    throw new TypeError(`The FPS for a GIF cannot be higher than 50. Use the --every-nth-frame option to lower the FPS: https://remotion.dev/docs/render-as-gif`);\n  }\n}\n\n// src/video/get-current-time.ts\nvar getExpectedMediaFrameUncorrected = ({\n  frame,\n  playbackRate,\n  startFrom\n}) => {\n  return interpolate(frame, [-1, startFrom, startFrom + 1], [-1, startFrom, startFrom + playbackRate]);\n};\n\n// src/absolute-src.ts\nvar getAbsoluteSrc = (relativeSrc) => {\n  if (typeof window === \"undefined\") {\n    return relativeSrc;\n  }\n  if (relativeSrc.startsWith(\"http://\") || relativeSrc.startsWith(\"https://\") || relativeSrc.startsWith(\"file://\") || relativeSrc.startsWith(\"blob:\") || relativeSrc.startsWith(\"data:\")) {\n    return relativeSrc;\n  }\n  return new URL(relativeSrc, window.origin).href;\n};\n\n// src/video/offthread-video-source.ts\nvar getOffthreadVideoSource = ({\n  src,\n  transparent,\n  currentTime,\n  toneMapped\n}) => {\n  return `http://localhost:${window.remotion_proxyPort}/proxy?src=${encodeURIComponent(getAbsoluteSrc(src))}&time=${encodeURIComponent(Math.max(0, currentTime))}&transparent=${String(transparent)}&toneMapped=${String(toneMapped)}`;\n};\n\n// src/no-react.ts\nvar NoReactInternals = {\n  processColor,\n  truthy,\n  validateFps,\n  validateDimension,\n  validateDurationInFrames,\n  validateDefaultAndInputProps,\n  validateFrame,\n  serializeJSONWithSpecialTypes,\n  bundleName: \"bundle.js\",\n  bundleMapName: \"bundle.js.map\",\n  deserializeJSONWithSpecialTypes,\n  DELAY_RENDER_CALLSTACK_TOKEN,\n  DELAY_RENDER_RETRY_TOKEN,\n  DELAY_RENDER_CLEAR_TOKEN,\n  DELAY_RENDER_ATTEMPT_TOKEN: DELAY_RENDER_RETRIES_LEFT,\n  getOffthreadVideoSource,\n  getExpectedMediaFrameUncorrected,\n  ENABLE_V5_BREAKING_CHANGES,\n  MIN_NODE_VERSION: ENABLE_V5_BREAKING_CHANGES ? 18 : 16,\n  MIN_BUN_VERSION: ENABLE_V5_BREAKING_CHANGES ? \"1.1.3\" : \"1.0.3\",\n  colorNames,\n  DATE_TOKEN,\n  FILE_TOKEN,\n  validateCodec\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/remotion/dist/esm/no-react.mjs\n");

/***/ })

};
;